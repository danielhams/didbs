diff -N -u -r -w gcc-4.8.2/fixincludes/Makefile.in gcc-4.8.2-patched/fixincludes/Makefile.in
--- gcc-4.8.2/fixincludes/Makefile.in	2013-01-04 12:49:55.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/Makefile.in	2019-08-09 16:06:36.854930920 +0000
@@ -49,7 +49,7 @@
 target_noncanonical:=@target_noncanonical@
 
 # The version of GCC in this tree
-gcc_version := $(shell cat $(srcdir)/../gcc/BASE-VER)
+gcc_version := $(shell @get_gcc_base_ver@ $(srcdir)/../gcc/BASE-VER)
 
 # Directory in which the compiler finds libraries etc.
 libsubdir = $(libdir)/gcc/$(target_noncanonical)/$(gcc_version)
@@ -184,13 +184,11 @@
 	$(INSTALL_DATA) $(srcdir)/README-fixinc \
 	  $(DESTDIR)$(itoolsdatadir)/include/README
 	$(INSTALL_SCRIPT) fixinc.sh $(DESTDIR)$(itoolsdir)/fixinc.sh
-	$(INSTALL_PROGRAM) fixincl@EXEEXT@ \
-	  $(DESTDIR)$(itoolsdir)/fixincl@EXEEXT@
+	$(INSTALL_PROGRAM) $(FI) $(DESTDIR)$(itoolsdir)/$(FI)
 	$(INSTALL_SCRIPT) mkheaders $(DESTDIR)$(itoolsdir)/mkheaders
 
 install-strip: install
-	test -z '$(STRIP)' \
-	  || $(STRIP) $(DESTDIR)$(itoolsdir)/fixincl@EXEEXT@
+	test -z '$(STRIP)' || $(STRIP) $(DESTDIR)$(itoolsdir)/$(FI)
 
 .PHONY: all check install install-strip
 .PHONY: dvi pdf info html install-pdf install-info install-html
diff -N -u -r -w gcc-4.8.2/fixincludes/aclocal.m4 gcc-4.8.2-patched/fixincludes/aclocal.m4
--- gcc-4.8.2/fixincludes/aclocal.m4	2012-05-29 20:28:57.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/aclocal.m4	2019-08-09 16:06:36.898425640 +0000
@@ -1,7 +1,8 @@
-# generated automatically by aclocal 1.11.1 -*- Autoconf -*-
+# generated automatically by aclocal 1.11.6 -*- Autoconf -*-
 
 # Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,
-# 2005, 2006, 2007, 2008, 2009  Free Software Foundation, Inc.
+# 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software Foundation,
+# Inc.
 # This file is free software; the Free Software Foundation
 # gives unlimited permission to copy and/or distribute it,
 # with or without modifications, as long as this notice is preserved.
diff -N -u -r -w gcc-4.8.2/fixincludes/check.tpl gcc-4.8.2-patched/fixincludes/check.tpl
--- gcc-4.8.2/fixincludes/check.tpl	2012-10-29 16:44:34.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/check.tpl	2019-08-09 16:06:36.938388840 +0000
@@ -123,6 +123,11 @@
 exec < ${TESTDIR}/LIST
 while read f
 do
+  if [ -n "$MSYSTEM" -o -n "$DJGPP" ]
+  then
+    # On MinGW and DJGPP convert line endings to avoid false positives
+    mv $f $f.dos; tr -d '\r' < $f.dos > $f; rm $f.dos
+  fi
   if [ ! -f ${TESTBASE}/$f ]
   then
     echo "Newly fixed header:  $f" >&2
@@ -141,9 +146,8 @@
 
 cd $TESTBASE
 
-find * -type f -print | \
-fgrep -v 'CVS/' | \
-fgrep -v '.svn/' > ${TESTDIR}/LIST
+find * -type f ! -name .DS_Store ! -name CVS ! -name .svn -print \
+> ${TESTDIR}/LIST
 
 exitok=`
 exec < ${TESTDIR}/LIST
diff -N -u -r -w gcc-4.8.2/fixincludes/configure gcc-4.8.2-patched/fixincludes/configure
--- gcc-4.8.2/fixincludes/configure	2012-05-29 20:28:57.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/configure	2019-08-09 16:06:36.998937960 +0000
@@ -590,6 +590,7 @@
 
 ac_subst_vars='LTLIBOBJS
 LIBOBJS
+get_gcc_base_ver
 MAINT
 TARGET
 target_noncanonical
@@ -664,6 +665,7 @@
 with_local_prefix
 enable_twoprocess
 enable_maintainer_mode
+with_gcc_major_version_only
 '
       ac_precious_vars='build_alias
 host_alias
@@ -1298,6 +1300,8 @@
   --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]
   --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)
   --with-local-prefix=DIR specifies directory to put local include
+  --with-gcc-major-version-only
+                          use only GCC major number in filesystem paths
 
 Some influential environment variables:
   CC          C compiler command
@@ -4561,6 +4565,12 @@
 # Figure out what compiler warnings we can enable.
 # See config/warnings.m4 for details.
 
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
 WARN_CFLAGS=
 save_CFLAGS="$CFLAGS"
 for real_option in -W -Wall -Wwrite-strings -Wstrict-prototypes \
@@ -4607,6 +4617,18 @@
 fi
   done
 CFLAGS="$save_CFLAGS"
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
+
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
 
 WARN_PEDANTIC=
 # Do the check with the no- prefix removed from the warning options
@@ -4645,10 +4667,22 @@
 fi
 
 fi
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
 
 
 # Only enable with --enable-werror-always until existing warnings are
 # corrected.
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
 WERROR=
 # Check whether --enable-werror-always was given.
 if test "${enable_werror_always+set}" = set; then :
@@ -4661,6 +4695,12 @@
   WERROR="$WERROR${WERROR:+ }-Werror"
 fi
 
+ac_ext=c
+ac_cpp='$CPP $CPPFLAGS'
+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'
+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'
+ac_compiler_gnu=$ac_cv_c_compiler_gnu
+
 
 
 # Determine the noncanonical target name, for directory use.
@@ -5354,6 +5394,21 @@
 _ACEOF
 
 
+# Determine what GCC version number to use in filesystem paths.
+
+  get_gcc_base_ver="cat"
+
+# Check whether --with-gcc-major-version-only was given.
+if test "${with_gcc_major_version_only+set}" = set; then :
+  withval=$with_gcc_major_version_only; if test x$with_gcc_major_version_only = xyes ; then
+        get_gcc_base_ver="sed -e 's/^\([0-9]*\).*/\1/'"
+      fi
+
+fi
+
+
+
+
 ac_config_headers="$ac_config_headers config.h"
 
 ac_config_files="$ac_config_files Makefile mkheaders.almost:mkheaders.in"
diff -N -u -r -w gcc-4.8.2/fixincludes/configure.ac gcc-4.8.2-patched/fixincludes/configure.ac
--- gcc-4.8.2/fixincludes/configure.ac	2012-05-29 20:28:57.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/configure.ac	2019-08-09 16:06:37.014391160 +0000
@@ -114,6 +114,9 @@
 AC_DEFINE_UNQUOTED([SED_PROGRAM], "${SED}",
    [Defined to the best working sed program on the host system])
 
+# Determine what GCC version number to use in filesystem paths.
+GCC_BASE_VER
+
 AC_CONFIG_HEADERS(config.h, [echo timestamp > stamp-h])
 AC_CONFIG_FILES(Makefile mkheaders.almost:mkheaders.in)
 AC_OUTPUT
diff -N -u -r -w gcc-4.8.2/fixincludes/fixfixes.c gcc-4.8.2-patched/fixincludes/fixfixes.c
--- gcc-4.8.2/fixincludes/fixfixes.c	2009-04-09 16:00:19.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/fixfixes.c	2019-08-09 16:06:37.048672920 +0000
@@ -790,7 +790,8 @@
       return EXIT_FAILURE;
     }
 
-  apply_fix (pFix, argv[1]);
+  /* Second parameter of apply_fix is file name */
+  apply_fix (pFix, argv[2]);
   fclose (stdout);
   fclose (stdin);
   unlink (argv[4]);
diff -N -u -r -w gcc-4.8.2/fixincludes/fixinc.in gcc-4.8.2-patched/fixincludes/fixinc.in
--- gcc-4.8.2/fixincludes/fixinc.in	2012-10-28 21:42:48.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/fixinc.in	2019-08-09 16:06:37.077945400 +0000
@@ -41,7 +41,7 @@
 
 # Make sure it exists.
 if [ ! -d $LIB ]; then
-  mkdir $LIB || {
+  mkdir -p $LIB || {
     echo fixincludes:  output dir '`'$LIB"' cannot be created"
     exit 1
   }
@@ -344,7 +344,7 @@
             mkdir $component >/dev/null 2>&1
             cd $component
             dirmade=$dirmade/$component
-            dirname=`echo $dirname | sed -e 's|[^/]*/||'`
+            dirname=`echo $dirname | sed -e 's|[^/]*//*||'`
           done
         fi
 
diff -N -u -r -w gcc-4.8.2/fixincludes/fixincl.c gcc-4.8.2-patched/fixincludes/fixincl.c
--- gcc-4.8.2/fixincludes/fixincl.c	2013-01-04 12:49:55.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/fixincl.c	2019-08-09 16:06:37.101200680 +0000
@@ -74,9 +74,12 @@
 #endif /* DO_STATS */
 
 const char incl_quote_pat[] = "^[ \t]*#[ \t]*include[ \t]*\"[^/]";
-tSCC z_fork_err[] = "Error %d (%s) starting filter process for %s\n";
 regex_t incl_quote_re;
 
+#ifndef SEPARATE_FIX_PROC
+tSCC z_fork_err[] = "Error %d (%s) starting filter process for %s\n";
+#endif
+
 static void do_version (void) ATTRIBUTE_NORETURN;
 char *load_file (const char *);
 void run_compiles (void);
@@ -188,7 +191,7 @@
   puts (zBuf + 5);
   exit (strcmp (run_shell (zBuf), program_id));
 #else
-  exit (system (zBuf));
+  exit (system_with_shell (zBuf));
 #endif
 }
 
@@ -275,6 +278,11 @@
   /* NULL as the first argument to `tempnam' causes it to DTRT
      wrt the temporary directory where the file will be created.  */
   pz_temp_file = tempnam( NULL, "fxinc" );
+
+#if defined(__MINGW32__)
+  fix_path_separators (pz_temp_file);
+#endif
+
 # endif
 
   signal (SIGQUIT, SIG_IGN);
@@ -566,6 +574,26 @@
   free ((void *) pz_res);
   return res;
 }
+#elif defined(__MINGW32__) || defined(__DJGPP__)
+static int
+test_test (tTestDesc* p_test, char* pz_test_file)
+{
+  tSCC cmd_fmt[] =
+#if defined(__DJGPP__)
+    "file=%s; test %s >/dev/null 2>/dev/null";
+#else
+    "file=%s; test %s > /dev/null 2>&1";
+#endif
+  int res;
+
+  char *cmd_buf = XNEWVEC (char, strlen(cmd_fmt) + strlen(pz_test_file) + strlen(p_test->pz_test_text));
+
+  sprintf (cmd_buf, cmd_fmt, pz_test_file, p_test->pz_test_text);
+  res = system_with_shell (cmd_buf);
+
+  free (cmd_buf);
+  return res ? SKIP_FIX : APPLY_FIX;
+}
 #else
 /*
  *  IF we are in MS-DOS land, then whatever shell-type test is required
@@ -597,6 +625,63 @@
   return SKIP_FIX;
 }
 
+/* * * * * * * * * * * * *
+
+  cksum_test   check the sum of the candidate file
+  Input:  the original file contents and the file name
+  Result: APPLY_FIX if the check sum matches, SKIP_FIX otherwise
+
+  The caller may choose to reverse meaning if the sense of the test
+  is inverted.  */
+
+static int
+cksum_test (char * pz_data, tTestDesc * p_test, char * fname)
+{
+  unsigned int cksum;
+
+  /*
+   * Testing is off in normal operation mode.
+   * So, in testing mode, APPLY_FIX is always returned.
+   */
+  if (fixinc_mode != TESTING_OFF)
+    return APPLY_FIX;
+
+  {
+    char * fnm = strrchr(fname, '/');
+    if (fnm != NULL)
+      fname = fnm + 1;
+    
+    errno = 0;
+    cksum = (unsigned int)strtoul(p_test->pz_test_text, &fnm, 10);
+    if (errno != 0)
+      return SKIP_FIX;
+
+    if (! ISSPACE(*fnm++))
+      return SKIP_FIX;
+    while (ISSPACE(*fnm)) fnm++;
+
+    if (! ISDIGIT(*fnm++))
+      return SKIP_FIX;
+    while (ISDIGIT(*fnm)) fnm++;
+
+    if (! ISSPACE(*fnm++))
+      return SKIP_FIX;
+    while (ISSPACE(*fnm)) fnm++;
+
+    if (strcmp(fnm, fname) != 0)
+      return SKIP_FIX;
+  }
+
+  {
+    unsigned int sum = 0;
+    while (*pz_data != NUL) {
+      sum = (sum >> 1) + ((sum & 1) << 15) + (unsigned)(*pz_data++);
+      sum &= 0xFFFF;
+    }
+
+    return (sum == cksum) ? APPLY_FIX : SKIP_FIX;
+  }
+}
 
 /* * * * * * * * * * * * *
 
@@ -830,7 +915,7 @@
   else /* NOT an "internal" fix: */
     {
       size_t parg_size;
-#ifdef __MSDOS__
+#if defined(__MSDOS__) && !defined(__DJGPP__)
       /* Don't use the "src > dstX; rm -f dst; mv -f dstX dst" trick:
          dst is a temporary file anyway, so we know there's no other
          file by that name; and DOS's system(3) doesn't mind to
@@ -849,12 +934,18 @@
          implementations cannot cope  :-(.  */
       tSCC   z_cmd_fmt[] = " %s > %sX ; rm -f %s; mv -f %sX %s";
 #endif
+      tSCC   z_subshell_start[] = "( ";
+      tSCC   z_subshell_end[] = " ) < ";
       tCC**  ppArgs = p_fixd->patch_args;
 
       argsize = sizeof( z_cmd_fmt ) + strlen( pz_temp_file )
               + strlen( pz_file_source );
       parg_size = argsize;
       
+      if (p_fixd->fd_flags & FD_SHELL_SCRIPT)
+        {
+          argsize += strlen( z_subshell_start ) + strlen ( z_subshell_end );
+        }
 
       /*
        *  Compute the size of the command line.  Add lotsa extra space
@@ -880,6 +971,16 @@
       ppArgs = p_fixd->patch_args;
 
       /*
+       * If it's shell script, enclose it in parentheses and skip "sh -c".
+       */
+      if (p_fixd->fd_flags & FD_SHELL_SCRIPT)
+        {
+          strcpy (pz_scan, z_subshell_start);
+          pz_scan += strlen (z_subshell_start);
+          ppArgs += 2;
+        }
+
+      /*
        *  Copy the program name, unquoted
        */
       {
@@ -921,17 +1022,26 @@
         }
 
       /*
+       * Close parenthesis if it's shell script.
+       */
+      if (p_fixd->fd_flags & FD_SHELL_SCRIPT)
+        {
+          strcpy (pz_scan, z_subshell_end);
+          pz_scan += strlen (z_subshell_end);
+        }
+
+      /*
        *  add the file machinations.
        */
-#ifdef __MSDOS__
+#if defined(__MSDOS__) && !defined(__DJGPP__)
       sprintf (pz_scan, z_cmd_fmt, pz_file_source, pz_temp_file );
 #else
       sprintf (pz_scan, z_cmd_fmt, pz_file_source, pz_temp_file,
                pz_temp_file, pz_temp_file, pz_temp_file);
 #endif
     }
-  system( pz_cmd );
-  free( (void*)pz_cmd );
+  system_with_shell (pz_cmd);
+  free (pz_cmd);
 }
 
 /* * * * * * * * * * * * *
@@ -1007,7 +1117,15 @@
   return read_fd;
 }
 #endif
-
+#ifdef DEBUG
+# define NOTE_SKIP(_ttyp)  do {                                         \
+            if (VLEVEL( VERB_EVERYTHING ))                              \
+              fprintf (stderr, z_failed, _ttyp, p_fixd->fix_name,       \
+                       pz_fname, p_fixd->test_ct - test_ct);            \
+          } while (0)
+#else
+# define NOTE_SKIP(_ttyp)
+#endif
 
 /* * * * * * * * * * * * *
  *
@@ -1022,8 +1140,10 @@
   const char *pz_scan = p_fixd->file_list;
   int test_ct;
   tTestDesc *p_test;
+  t_bool saw_sum_test   = BOOL_FALSE;
+  t_bool one_sum_passed = BOOL_FALSE;
 
-#ifdef SEPARATE_FIX_PROC
+#if defined(__MSDOS__) && !defined(__DJGPP__)
   /*
    *  There is only one fix that uses a shell script as of this writing.
    *  I hope to nuke it anyway, it does not apply to DOS and it would
@@ -1055,6 +1175,7 @@
     }
 
   /*  FOR each test, see if it fails.
+      "sum" fails only if all "sum" tests fail.
       IF it does fail, then we go on to the next test */
 
   for (p_test = p_fixd->p_test_desc, test_ct = p_fixd->test_ct;
@@ -1065,52 +1186,51 @@
         {
         case TT_TEST:
           if (test_test (p_test, pz_curr_file) != APPLY_FIX) {
-#ifdef DEBUG
-            if (VLEVEL( VERB_EVERYTHING ))
-              fprintf (stderr, z_failed, "TEST", p_fixd->fix_name,
-                       pz_fname, p_fixd->test_ct - test_ct);
-#endif
+            NOTE_SKIP("TEST");
             return BOOL_FALSE;
           }
           break;
 
         case TT_EGREP:
           if (egrep_test (pz_curr_data, p_test) != APPLY_FIX) {
-#ifdef DEBUG
-            if (VLEVEL( VERB_EVERYTHING ))
-              fprintf (stderr, z_failed, "EGREP", p_fixd->fix_name,
-                       pz_fname, p_fixd->test_ct - test_ct);
-#endif
+            NOTE_SKIP("EGREP");
             return BOOL_FALSE;
           }
           break;
 
         case TT_NEGREP:
           if (egrep_test (pz_curr_data, p_test) == APPLY_FIX) {
-#ifdef DEBUG
-            if (VLEVEL( VERB_EVERYTHING ))
-              fprintf (stderr, z_failed, "NEGREP", p_fixd->fix_name,
-                       pz_fname, p_fixd->test_ct - test_ct);
-#endif
+            NOTE_SKIP("NEGREP");
             /*  Negated sense  */
             return BOOL_FALSE;
           }
           break;
 
+        case TT_CKSUM:
+	  if (one_sum_passed)
+	    break; /*  No need to check any more  */
+
+          saw_sum_test = BOOL_TRUE;
+          if (cksum_test (pz_curr_data, p_test, pz_curr_file) != APPLY_FIX) {
+            NOTE_SKIP("CKSUM");
+          } else {
+            one_sum_passed = BOOL_TRUE;
+          }
+          break;
+
         case TT_FUNCTION:
           if (run_test (p_test->pz_test_text, pz_curr_file, pz_curr_data)
               != APPLY_FIX) {
-#ifdef DEBUG
-            if (VLEVEL( VERB_EVERYTHING ))
-              fprintf (stderr, z_failed, "FTEST", p_fixd->fix_name,
-                       pz_fname, p_fixd->test_ct - test_ct);
-#endif
+            NOTE_SKIP("FTEST");
             return BOOL_FALSE;
           }
           break;
         }
     }
 
+  if (saw_sum_test)
+    return one_sum_passed;
+
   return BOOL_TRUE;
 }
 
diff -N -u -r -w gcc-4.8.2/fixincludes/fixincl.tpl gcc-4.8.2-patched/fixincludes/fixincl.tpl
--- gcc-4.8.2/fixincludes/fixincl.tpl	2008-09-06 20:57:26.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/fixincl.tpl	2019-08-09 16:06:37.138450600 +0000
@@ -1,6 +1,9 @@
 [= AutoGen5 Template -*- Mode: C -*-
 x=fixincl.x =]
-[= (dne " * " "/* ")=]
+[=
+ (if (version-compare >= autogen-version "5.18.1")
+     (dne "-D" " * " "/* ")
+     (dne " * " "/* ") ) =]
  */
 /* DO NOT SVN-MERGE THIS FILE, EITHER [=
    (define re-ct 0) (define max-mach 0) (define ct 0)
@@ -114,6 +117,20 @@
     ENDFOR bypass =][=
   ENDIF =][=
 
+  IF (exist? "sum")=][=
+     (if (not (exist? "files"))
+         (error "specifying a 'sum' requires specifying 'files'"))
+     =]
+
+/*
+ *  file selection - do fix if checksum matches
+ */[=
+    FOR sum             =]
+tSCC z[=(. Hack)=]Sum[=(for-index)=][] =
+       [=(kr-string (get "sum"))=];[=
+    ENDFOR sum          =][=
+  ENDIF                 =][=
+
   IF (exist? "test")=]
 
 /*
@@ -162,7 +179,11 @@
 
     FOR select =]
   { TT_EGREP,    z[=(. Hack)=]Select[=(for-index)=], (regex_t*)NULL },[=
-    ENDFOR select =] };[=
+    ENDFOR select       =][=
+
+    FOR sum             =]
+  { TT_CKSUM,    z[=(. Hack)=]Sum[=(for-index)=], 0 /* unused */ },[=
+    ENDFOR sum          =] };[=
   ENDIF =]
 
 /*
diff -N -u -r -w gcc-4.8.2/fixincludes/fixincl.x gcc-4.8.2-patched/fixincludes/fixincl.x
--- gcc-4.8.2/fixincludes/fixincl.x	2013-05-31 12:43:36.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/fixincl.x	2019-08-09 16:06:37.177821240 +0000
@@ -2,11 +2,11 @@
  * 
  * DO NOT EDIT THIS FILE   (fixincl.x)
  * 
- * It has been AutoGen-ed  Thursday May 16, 2013 at 03:34:25 PM MEST
+ * It has been AutoGen-ed  June  1, 2019 at 12:13:46 AM by AutoGen 5.18.12
  * From the definitions    inclhack.def
  * and the template file   fixincl
  */
-/* DO NOT SVN-MERGE THIS FILE, EITHER Thu May 16 15:34:25 MEST 2013
+/* DO NOT SVN-MERGE THIS FILE, EITHER Sat Jun  1 00:13:46 BST 2019
  *
  * You must regenerate it.  Use the ./genfixes script.
  *
@@ -15,7 +15,7 @@
  * certain ANSI-incompatible system header files which are fixed to work
  * correctly with ANSI C and placed in a directory that GNU C will search.
  *
- * This file contains 226 fixup descriptions.
+ * This file contains 259 fixup descriptions.
  *
  * See README for more information.
  *
@@ -581,120 +581,6 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Aab_Vxworks_Stdint fix
- */
-tSCC zAab_Vxworks_StdintName[] =
-     "AAB_vxworks_stdint";
-
-/*
- *  File name selection pattern
- */
-tSCC zAab_Vxworks_StdintList[] =
-  "stdint.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-tSCC* apzAab_Vxworks_StdintMachs[] = {
-        "*-*-vxworks*",
-        (const char*)NULL };
-#define AAB_VXWORKS_STDINT_TEST_CT  0
-#define aAab_Vxworks_StdintTests   (tTestDesc*)NULL
-
-/*
- *  Fix Command Arguments for Aab_Vxworks_Stdint
- */
-static const char* apzAab_Vxworks_StdintPatch[] = {
-"#ifndef _STDINT_H\n\
-#define _STDINT_H\n\
-/* get int*_t, uint*_t */\n\
-#include <types/vxTypes.h>\n\n\
-/* get legacy vxworks types for compatibility */\n\
-#include <types/vxTypesOld.h>\n\n\
-typedef long intptr_t;\n\
-typedef unsigned long uintptr_t;\n\n\
-typedef int64_t intmax_t;\n\
-typedef uint64_t uintmax_t;\n\n\
-typedef int8_t int_least8_t;\n\
-typedef int16_t int_least16_t;\n\
-typedef int32_t int_least32_t;\n\
-typedef int64_t int_least64_t;\n\n\
-typedef uint8_t uint_least8_t;\n\
-typedef uint16_t uint_least16_t;\n\
-typedef uint32_t uint_least32_t;\n\
-typedef uint64_t uint_least64_t;\n\n\
-typedef int8_t int_fast8_t;\n\
-typedef int int_fast16_t;\n\
-typedef int32_t int_fast32_t;\n\
-typedef int64_t int_fast64_t;\n\n\
-typedef uint8_t uint_fast8_t;\n\
-typedef unsigned int uint_fast16_t;\n\
-typedef uint32_t uint_fast32_t;\n\
-typedef uint64_t uint_fast64_t;\n\n\
-/* Ranges */\n\
-#define UINT8_MAX (~(uint8_t)0)\n\
-#define UINT8_MIN 0\n\
-#define UINT16_MAX (~(uint16_t)0)\n\
-#define UINT16_MIN 0\n\
-#define UINT32_MAX (~(uint32_t)0)\n\
-#define UINT32_MIN 0\n\
-#define UINT64_MAX (~(uint64_t)0)\n\
-#define UINT64_MIN 0\n\n\
-#define UINTPTR_MAX (~(uintptr_t)0)\n\
-#define UINTPTR_MIN 0\n\n\
-/* Need to do int_fast16_t as well, as type\n\
-   size may be architecture dependent */\n\
-#define UINT_FAST16_MAX (~(uint_fast16_t)0)\n\
-#define UINT_FAST16_MAX 0\n\n\
-#define INT8_MAX (UINT8_MAX>>1)\n\
-#define INT8_MIN (INT8_MAX+1)\n\
-#define INT16_MAX (UINT16_MAX>>1)\n\
-#define INT16_MIN (INT16_MAX+1)\n\
-#define INT32_MAX (UINT32_MAX>>1)\n\
-#define INT32_MIN (INT32_MAX+1)\n\
-#define INT64_MAX (UINT64_MAX>>1)\n\
-#define INT64_MIN (INT64_MAX+1)\n\n\
-#define INTPTR_MAX (UINTPTR_MAX>>1)\n\
-#define INTPTR_MIN (INTPTR_MAX+1)\t\n\n\
-#define INT_FAST16_MAX (UINT_FAST16_MAX>>1)\n\
-#define INT_FAST16_MIN (INT_FAST16_MAX+1)\n\n\
-/* now define equiv. constants */\n\
-#define UINT_FAST8_MAX UINT8_MAX\n\
-#define UINT_FAST8_MIN UINT_FAST8_MIN\n\
-#define INT_FAST8_MAX INT8_MAX\n\
-#define INT_FAST8_MIN INT8_MIN\n\
-#define UINT_FAST32_MAX UINT32_MAX\n\
-#define UINT_FAST32_MIN UINT32_MIN\n\
-#define INT_FAST32_MAX INT32_MAX\n\
-#define INT_FAST32_MIN INT32_MIN\n\
-#define UINT_FAST64_MAX UINT64_MAX\n\
-#define UINT_FAST64_MIN UINT64_MIN\n\
-#define INT_FAST64_MAX INT64_MAX\n\
-#define INT_FAST64_MIN INT64_MIN\n\n\
-#define UINT_LEAST8_MAX UINT8_MAX\n\
-#define UINT_LEAST8_MIN UINT8_MIN\n\
-#define INT_LEAST8_MAX INT8_MAX\n\
-#define INT_LEAST8_MIN INT8_MIN\n\
-#define UINT_LEAST16_MAX UINT16_MAX\n\
-#define UINT_LEAST16_MIN UINT16_MIN\n\
-#define INT_LEAST16_MAX INT16_MAX\n\
-#define INT_LEAST16_MIN INT16_MIN\n\
-#define UINT_LEAST32_MAX UINT32_MAX\n\
-#define UINT_LEAST32_MIN UINT32_MIN\n\
-#define INT_LEAST32_MAX INT32_MAX\n\
-#define INT_LEAST32_MIN INT32_MIN\n\
-#define UINT_LEAST64_MAX UINT64_MAX\n\
-#define UINT_LEAST64_MIN UINT64_MIN\n\
-#define INT_LEAST64_MAX INT64_MAX\n\
-#define INT_LEAST64_MIN INT64_MIN\n\n\
-#define UINTMAX_MAX UINT64_MAX\n\
-#define UINTMAX_MIN UINT64_MIN\n\
-#define INTMAX_MAX INT64_MAX\n\
-#define INTMAX_MIN INT64_MIN\n\n\
-#endif",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
  *  Description of Aab_Vxworks_Unistd fix
  */
 tSCC zAab_Vxworks_UnistdName[] =
@@ -736,6 +622,45 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Aix_Assert fix
+ */
+tSCC zAix_AssertName[] =
+     "aix_assert";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_AssertList[] =
+  "assert.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_AssertMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_AssertSelect0[] =
+       "#define[ \t]static_assert[ \t]_Static_assert";
+
+#define    AIX_ASSERT_TEST_CT  1
+static tTestDesc aAix_AssertTests[] = {
+  { TT_EGREP,    zAix_AssertSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Assert
+ */
+static const char* apzAix_AssertPatch[] = {
+    "format",
+    "#ifndef __cplusplus\n\
+%0\n\
+#endif",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Aix_Complex fix
  */
 tSCC zAix_ComplexName[] =
@@ -773,6 +698,124 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Aix_Externc fix
+ */
+tSCC zAix_ExterncName[] =
+     "aix_externc";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_ExterncList[] =
+  "ctype.h\0fcntl.h\0langinfo.h\0ldfcn.h\0sys/localedef.h\0sys/times.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_ExterncMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content bypass pattern - skip fix if pattern found
+ */
+tSCC zAix_ExterncBypass0[] =
+       "extern \"C\"";
+
+#define    AIX_EXTERNC_TEST_CT  1
+static tTestDesc aAix_ExterncTests[] = {
+  { TT_NEGREP,   zAix_ExterncBypass0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Externc
+ */
+static const char* apzAix_ExterncPatch[] = {
+    "wrap",
+    "#ifdef __cplusplus\n\
+extern \"C\" {\n\
+#endif\n",
+    "#ifdef __cplusplus\n\
+}\n\
+#endif\n",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Aix_Externcpp1 fix
+ */
+tSCC zAix_Externcpp1Name[] =
+     "aix_externcpp1";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_Externcpp1List[] =
+  "sys/socket.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_Externcpp1Machs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_Externcpp1Select0[] =
+       "#ifdef __cplusplus";
+
+#define    AIX_EXTERNCPP1_TEST_CT  1
+static tTestDesc aAix_Externcpp1Tests[] = {
+  { TT_EGREP,    zAix_Externcpp1Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Externcpp1
+ */
+static const char* apzAix_Externcpp1Patch[] = {
+    "format",
+    "#ifdef __cplusplus\n\
+extern \"C++\" {",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Aix_Externcpp2 fix
+ */
+tSCC zAix_Externcpp2Name[] =
+     "aix_externcpp2";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_Externcpp2List[] =
+  "sys/socket.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_Externcpp2Machs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_Externcpp2Select0[] =
+       "#else  /\\* __cplusplus \\*/";
+
+#define    AIX_EXTERNCPP2_TEST_CT  1
+static tTestDesc aAix_Externcpp2Tests[] = {
+  { TT_EGREP,    zAix_Externcpp2Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Externcpp2
+ */
+static const char* apzAix_Externcpp2Patch[] = {
+    "format",
+    "} /* extern \"C++\" */\n\
+#else  /* __cplusplus */",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Aix_Malloc fix
  */
 tSCC zAix_MallocName[] =
@@ -847,6 +890,60 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Aix_Null fix
+ */
+tSCC zAix_NullName[] =
+     "aix_null";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_NullList[] =
+  "curses.h\0dbm.h\0locale.h\0stdio.h\0stdlib.h\0string.h\0time.h\0unistd.h\0wchar.h\0sys/dir.h\0sys/param.h\0sys/types.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_NullMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_NullSelect0[] =
+       "#define[ \t]+NULL[ \t]+\\(*0L*\\)*";
+
+/*
+ *  content bypass pattern - skip fix if pattern found
+ */
+tSCC zAix_NullBypass0[] =
+       "__null";
+
+#define    AIX_NULL_TEST_CT  2
+static tTestDesc aAix_NullTests[] = {
+  { TT_NEGREP,   zAix_NullBypass0, (regex_t*)NULL },
+  { TT_EGREP,    zAix_NullSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Null
+ */
+static const char* apzAix_NullPatch[] = {
+    "format",
+    "#ifndef NULL\n\
+#ifdef __cplusplus\n\
+#ifdef __GNUG__\n\
+#define NULL __null\n\
+#else /* ! __GNUG__  */\n\
+#define NULL 0L\n\
+#endif /* __GNUG__  */\n\
+#else /* ! __cplusplus  */\n\
+#define NULL ((void *)0)\n\
+#endif /* __cplusplus  */\n\
+#endif /* !NULL  */",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Aix_Once_Init_1 fix
  */
 tSCC zAix_Once_Init_1Name[] =
@@ -1061,7 +1158,7 @@
  *  content selection pattern - do fix if pattern found
  */
 tSCC zAix_PthreadSelect0[] =
-       "(#define [A-Za-z_0-9]+)(\\\\\n\
+       "(#define[\t ][A-Za-z_0-9]+)(\\\\\n\
 [^A-Za-z_0-9 \t\n\
 (])";
 
@@ -1292,6 +1389,309 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Aix_Stdio_Inline fix
+ */
+tSCC zAix_Stdio_InlineName[] =
+     "aix_stdio_inline";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_Stdio_InlineList[] =
+  "stdio.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_Stdio_InlineMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_Stdio_InlineSelect0[] =
+       "#ifdef __cplusplus\\\n\
+}\\\n\
+\\\n\
+#ifdef ferror\\\n";
+
+#define    AIX_STDIO_INLINE_TEST_CT  1
+static tTestDesc aAix_Stdio_InlineTests[] = {
+  { TT_EGREP,    zAix_Stdio_InlineSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Stdio_Inline
+ */
+static const char* apzAix_Stdio_InlinePatch[] = {
+    "format",
+    "#ifdef __cplusplus\n\
+}\n\
+#endif\n\n\
+#if (defined(__cplusplus) && defined(__IBMCPP__))\n\
+#ifdef ferror\n",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Aix_Stdlib_Malloc fix
+ */
+tSCC zAix_Stdlib_MallocName[] =
+     "aix_stdlib_malloc";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_Stdlib_MallocList[] =
+  "stdlib.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_Stdlib_MallocMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_Stdlib_MallocSelect0[] =
+       "#define[ \t]+malloc[ \t]+__linux_malloc";
+
+#define    AIX_STDLIB_MALLOC_TEST_CT  1
+static tTestDesc aAix_Stdlib_MallocTests[] = {
+  { TT_EGREP,    zAix_Stdlib_MallocSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Stdlib_Malloc
+ */
+static const char* apzAix_Stdlib_MallocPatch[] = {
+    "format",
+    "extern void *malloc(size_t) __asm__(\"__linux_malloc\");",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Aix_Stdlib_Realloc fix
+ */
+tSCC zAix_Stdlib_ReallocName[] =
+     "aix_stdlib_realloc";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_Stdlib_ReallocList[] =
+  "stdlib.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_Stdlib_ReallocMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_Stdlib_ReallocSelect0[] =
+       "#define[ \t]+realloc[ \t]+__linux_realloc";
+
+#define    AIX_STDLIB_REALLOC_TEST_CT  1
+static tTestDesc aAix_Stdlib_ReallocTests[] = {
+  { TT_EGREP,    zAix_Stdlib_ReallocSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Stdlib_Realloc
+ */
+static const char* apzAix_Stdlib_ReallocPatch[] = {
+    "format",
+    "extern void *realloc(void *, size_t) __asm__(\"__linux_realloc\");",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Aix_Stdlib_Calloc fix
+ */
+tSCC zAix_Stdlib_CallocName[] =
+     "aix_stdlib_calloc";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_Stdlib_CallocList[] =
+  "stdlib.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_Stdlib_CallocMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_Stdlib_CallocSelect0[] =
+       "#define[ \t]+calloc[ \t]+__linux_calloc";
+
+#define    AIX_STDLIB_CALLOC_TEST_CT  1
+static tTestDesc aAix_Stdlib_CallocTests[] = {
+  { TT_EGREP,    zAix_Stdlib_CallocSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Stdlib_Calloc
+ */
+static const char* apzAix_Stdlib_CallocPatch[] = {
+    "format",
+    "extern void *calloc(size_t, size_t) __asm__(\"__linux_calloc\");",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Aix_Stdlib_Valloc fix
+ */
+tSCC zAix_Stdlib_VallocName[] =
+     "aix_stdlib_valloc";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_Stdlib_VallocList[] =
+  "stdlib.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_Stdlib_VallocMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_Stdlib_VallocSelect0[] =
+       "#define[ \t]+valloc[ \t]+__linux_valloc";
+
+#define    AIX_STDLIB_VALLOC_TEST_CT  1
+static tTestDesc aAix_Stdlib_VallocTests[] = {
+  { TT_EGREP,    zAix_Stdlib_VallocSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Stdlib_Valloc
+ */
+static const char* apzAix_Stdlib_VallocPatch[] = {
+    "format",
+    "extern void *valloc(size_t) __asm__(\"__linux_valloc\");",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Aix_Stdlib_Vec_Malloc fix
+ */
+tSCC zAix_Stdlib_Vec_MallocName[] =
+     "aix_stdlib_vec_malloc";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_Stdlib_Vec_MallocList[] =
+  "stdlib.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_Stdlib_Vec_MallocMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_Stdlib_Vec_MallocSelect0[] =
+       "#define[ \t]+malloc[ \t]+vec_malloc";
+
+#define    AIX_STDLIB_VEC_MALLOC_TEST_CT  1
+static tTestDesc aAix_Stdlib_Vec_MallocTests[] = {
+  { TT_EGREP,    zAix_Stdlib_Vec_MallocSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Stdlib_Vec_Malloc
+ */
+static const char* apzAix_Stdlib_Vec_MallocPatch[] = {
+    "format",
+    "extern void *malloc(size_t) __asm__(\"vec_malloc\");",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Aix_Stdlib_Vec_Calloc fix
+ */
+tSCC zAix_Stdlib_Vec_CallocName[] =
+     "aix_stdlib_vec_calloc";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_Stdlib_Vec_CallocList[] =
+  "stdlib.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_Stdlib_Vec_CallocMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_Stdlib_Vec_CallocSelect0[] =
+       "#define[ \t]+calloc[ \t]+vec_calloc";
+
+#define    AIX_STDLIB_VEC_CALLOC_TEST_CT  1
+static tTestDesc aAix_Stdlib_Vec_CallocTests[] = {
+  { TT_EGREP,    zAix_Stdlib_Vec_CallocSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Stdlib_Vec_Calloc
+ */
+static const char* apzAix_Stdlib_Vec_CallocPatch[] = {
+    "format",
+    "extern void *calloc(size_t, size_t) __asm__(\"vec_calloc\");",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Aix_Strtof_Const fix
+ */
+tSCC zAix_Strtof_ConstName[] =
+     "aix_strtof_const";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zAix_Strtof_ConstList[] =
+  "stdlib.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzAix_Strtof_ConstMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zAix_Strtof_ConstSelect0[] =
+       "((extern[ \t]+)?float[ \t]+strtof)\\(char \\*, char \\*\\*\\);";
+
+#define    AIX_STRTOF_CONST_TEST_CT  1
+static tTestDesc aAix_Strtof_ConstTests[] = {
+  { TT_EGREP,    zAix_Strtof_ConstSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Aix_Strtof_Const
+ */
+static const char* apzAix_Strtof_ConstPatch[] = {
+    "format",
+    "%1(const char *, char **);",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Aix_Sysmachine fix
  */
 tSCC zAix_SysmachineName[] =
@@ -1305,7 +1705,9 @@
 /*
  *  Machine/OS name selection pattern
  */
-#define apzAix_SysmachineMachs (const char**)NULL
+tSCC* apzAix_SysmachineMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
@@ -1340,7 +1742,9 @@
 /*
  *  Machine/OS name selection pattern
  */
-#define apzAix_Syswait_2Machs (const char**)NULL
+tSCC* apzAix_Syswait_2Machs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
@@ -1375,7 +1779,9 @@
 /*
  *  Machine/OS name selection pattern
  */
-#define apzAix_VolatileMachs (const char**)NULL
+tSCC* apzAix_VolatileMachs[] = {
+        "*-*-aix*",
+        (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
@@ -2018,41 +2424,6 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Cdef_Cplusplus fix
- */
-tSCC zCdef_CplusplusName[] =
-     "cdef_cplusplus";
-
-/*
- *  File name selection pattern
- */
-tSCC zCdef_CplusplusList[] =
-  "sys/cdefs.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-#define apzCdef_CplusplusMachs (const char**)NULL
-
-/*
- *  content selection pattern - do fix if pattern found
- */
-tSCC zCdef_CplusplusSelect0[] =
-       "\\[\\[noreturn\\]\\]";
-
-#define    CDEF_CPLUSPLUS_TEST_CT  1
-static tTestDesc aCdef_CplusplusTests[] = {
-  { TT_EGREP,    zCdef_CplusplusSelect0, (regex_t*)NULL }, };
-
-/*
- *  Fix Command Arguments for Cdef_Cplusplus
- */
-static const char* apzCdef_CplusplusPatch[] = {
-    "format",
-    "__attribute__((__noreturn__))",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
  *  Description of Ctrl_Quotes_Def fix
  */
 tSCC zCtrl_Quotes_DefName[] =
@@ -2168,6 +2539,51 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Darwin_Availabilityinternal fix
+ */
+tSCC zDarwin_AvailabilityinternalName[] =
+     "darwin_availabilityinternal";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zDarwin_AvailabilityinternalList[] =
+  "AvailabilityInternal.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzDarwin_AvailabilityinternalMachs[] = {
+        "*-*-darwin*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zDarwin_AvailabilityinternalSelect0[] =
+       "#define[ \t]+(__API_[ADU]\\([^)]*\\)).*";
+
+#define    DARWIN_AVAILABILITYINTERNAL_TEST_CT  1
+static tTestDesc aDarwin_AvailabilityinternalTests[] = {
+  { TT_EGREP,    zDarwin_AvailabilityinternalSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Darwin_Availabilityinternal
+ */
+static const char* apzDarwin_AvailabilityinternalPatch[] = {
+    "format",
+    "#if defined(__has_attribute)\n\
+  #if __has_attribute(availability)\n\
+%0\n\
+  #else\n\
+    #define %1\n\
+  #endif\n\
+#else\n\
+    #define %1\n\
+#endif",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Darwin_9_Long_Double_Funcs_2 fix
  */
 tSCC zDarwin_9_Long_Double_Funcs_2Name[] =
@@ -2288,6 +2704,168 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Darwin_Longjmp_Noreturn fix
+ */
+tSCC zDarwin_Longjmp_NoreturnName[] =
+     "darwin_longjmp_noreturn";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zDarwin_Longjmp_NoreturnList[] =
+  "i386/setjmp.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzDarwin_Longjmp_NoreturnMachs[] = {
+        "*-*-darwin*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zDarwin_Longjmp_NoreturnSelect0[] =
+       "(.*longjmp\\(.*jmp_buf.*[^)]+\\));";
+
+/*
+ *  content bypass pattern - skip fix if pattern found
+ */
+tSCC zDarwin_Longjmp_NoreturnBypass0[] =
+       "__dead2";
+
+#define    DARWIN_LONGJMP_NORETURN_TEST_CT  2
+static tTestDesc aDarwin_Longjmp_NoreturnTests[] = {
+  { TT_NEGREP,   zDarwin_Longjmp_NoreturnBypass0, (regex_t*)NULL },
+  { TT_EGREP,    zDarwin_Longjmp_NoreturnSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Darwin_Longjmp_Noreturn
+ */
+static const char* apzDarwin_Longjmp_NoreturnPatch[] = {
+    "format",
+    "%1 __attribute__ ((__noreturn__));",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Darwin_Os_Trace_1 fix
+ */
+tSCC zDarwin_Os_Trace_1Name[] =
+     "darwin_os_trace_1";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zDarwin_Os_Trace_1List[] =
+  "os/trace.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzDarwin_Os_Trace_1Machs[] = {
+        "*-*-darwin*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zDarwin_Os_Trace_1Select0[] =
+       "^(_os_trace_verify_printf.*) (__attribute__.*)";
+
+#define    DARWIN_OS_TRACE_1_TEST_CT  1
+static tTestDesc aDarwin_Os_Trace_1Tests[] = {
+  { TT_EGREP,    zDarwin_Os_Trace_1Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Darwin_Os_Trace_1
+ */
+static const char* apzDarwin_Os_Trace_1Patch[] = {
+    "format",
+    "%1",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Darwin_Os_Trace_2 fix
+ */
+tSCC zDarwin_Os_Trace_2Name[] =
+     "darwin_os_trace_2";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zDarwin_Os_Trace_2List[] =
+  "os/trace.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzDarwin_Os_Trace_2Machs[] = {
+        "*-*-darwin*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zDarwin_Os_Trace_2Select0[] =
+       "typedef.*\\^os_trace_payload_t.*";
+
+#define    DARWIN_OS_TRACE_2_TEST_CT  1
+static tTestDesc aDarwin_Os_Trace_2Tests[] = {
+  { TT_EGREP,    zDarwin_Os_Trace_2Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Darwin_Os_Trace_2
+ */
+static const char* apzDarwin_Os_Trace_2Patch[] = {
+    "format",
+    "#if __BLOCKS__\n\
+%0\n\
+#endif",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Darwin_Os_Trace_3 fix
+ */
+tSCC zDarwin_Os_Trace_3Name[] =
+     "darwin_os_trace_3";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zDarwin_Os_Trace_3List[] =
+  "os/trace.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzDarwin_Os_Trace_3Machs[] = {
+        "*-*-darwin*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zDarwin_Os_Trace_3Select0[] =
+       "__(API|OSX)_.*\n\
+OS_EXPORT.*\n\
+.*\n\
+_os_trace.*os_trace_payload_t payload);";
+
+#define    DARWIN_OS_TRACE_3_TEST_CT  1
+static tTestDesc aDarwin_Os_Trace_3Tests[] = {
+  { TT_EGREP,    zDarwin_Os_Trace_3Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Darwin_Os_Trace_3
+ */
+static const char* apzDarwin_Os_Trace_3Patch[] = {
+    "format",
+    "#if __BLOCKS__\n\
+%0\n\
+#endif",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Darwin_Private_Extern fix
  */
 tSCC zDarwin_Private_ExternName[] =
@@ -2751,6 +3329,108 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Feraiseexcept_Nosse_Divbyzero fix
+ */
+tSCC zFeraiseexcept_Nosse_DivbyzeroName[] =
+     "feraiseexcept_nosse_divbyzero";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zFeraiseexcept_Nosse_DivbyzeroList[] =
+  "bits/fenv.h\0*/bits/fenv.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzFeraiseexcept_Nosse_DivbyzeroMachs[] = {
+        "i[34567]86-*-linux*",
+        "x86*-linux*",
+        "amd64-*-linux*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zFeraiseexcept_Nosse_DivbyzeroSelect0[] =
+       "^([\t ]*)__asm__ __volatile__ \\(\"divss %1, %0 *\" : : \"x\" \\(__f\\), \"x\" \\(__g\\)\\);$";
+
+/*
+ *  content bypass pattern - skip fix if pattern found
+ */
+tSCC zFeraiseexcept_Nosse_DivbyzeroBypass0[] =
+       "\"fdivp .*; fwait\"";
+
+#define    FERAISEEXCEPT_NOSSE_DIVBYZERO_TEST_CT  2
+static tTestDesc aFeraiseexcept_Nosse_DivbyzeroTests[] = {
+  { TT_NEGREP,   zFeraiseexcept_Nosse_DivbyzeroBypass0, (regex_t*)NULL },
+  { TT_EGREP,    zFeraiseexcept_Nosse_DivbyzeroSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Feraiseexcept_Nosse_Divbyzero
+ */
+static const char* apzFeraiseexcept_Nosse_DivbyzeroPatch[] = {
+    "format",
+    "# ifdef __SSE_MATH__\n\
+%0\n\
+# else\n\
+%1__asm__ __volatile__ (\"fdivp %%%%st, %%%%st(1); fwait\"\n\
+%1\t\t\t: \"=t\" (__f) : \"0\" (__f), \"u\" (__g) : \"st(1)\");\n\
+# endif",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Feraiseexcept_Nosse_Invalid fix
+ */
+tSCC zFeraiseexcept_Nosse_InvalidName[] =
+     "feraiseexcept_nosse_invalid";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zFeraiseexcept_Nosse_InvalidList[] =
+  "bits/fenv.h\0*/bits/fenv.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzFeraiseexcept_Nosse_InvalidMachs[] = {
+        "i[34567]86-*-linux*",
+        "x86*-linux*",
+        "amd64-*-linux*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zFeraiseexcept_Nosse_InvalidSelect0[] =
+       "^([\t ]*)__asm__ __volatile__ \\(\"divss %0, %0 *\" : : \"x\" \\(__f\\)\\);$";
+
+/*
+ *  content bypass pattern - skip fix if pattern found
+ */
+tSCC zFeraiseexcept_Nosse_InvalidBypass0[] =
+       "\"fdiv .*; fwait\"";
+
+#define    FERAISEEXCEPT_NOSSE_INVALID_TEST_CT  2
+static tTestDesc aFeraiseexcept_Nosse_InvalidTests[] = {
+  { TT_NEGREP,   zFeraiseexcept_Nosse_InvalidBypass0, (regex_t*)NULL },
+  { TT_EGREP,    zFeraiseexcept_Nosse_InvalidSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Feraiseexcept_Nosse_Invalid
+ */
+static const char* apzFeraiseexcept_Nosse_InvalidPatch[] = {
+    "format",
+    "# ifdef __SSE_MATH__\n\
+%0\n\
+# else\n\
+%1__asm__ __volatile__ (\"fdiv %%%%st, %%%%st(0); fwait\"\n\
+%1\t\t\t: \"=t\" (__f) : \"0\" (__f));\n\
+# endif",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Freebsd_Gcc3_Breakage fix
  */
 tSCC zFreebsd_Gcc3_BreakageName[] =
@@ -3013,7 +3693,7 @@
  *  File name selection pattern
  */
 tSCC zGlibc_C99_Inline_4List[] =
-  "sys/sysmacros.h\0*/sys/sysmacros.h\0wchar.h\0*/wchar.h\0";
+  "sys/sysmacros.h\0*/sys/sysmacros.h\0wchar.h\0*/wchar.h\0pthread.h\0*/pthread.h\0";
 /*
  *  Machine/OS name selection pattern
  */
@@ -3145,7 +3825,7 @@
  *  File name selection pattern
  */
 tSCC zGlibc_StrncpyList[] =
-  "bits/string2.h\0";
+  "bits/string2.h\0*/bits/string2.h\0";
 /*
  *  Machine/OS name selection pattern
  */
@@ -3622,6 +4302,46 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Hppa_Hpux11_Alloca fix
+ */
+tSCC zHppa_Hpux11_AllocaName[] =
+     "hppa_hpux11_alloca";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zHppa_Hpux11_AllocaList[] =
+  "alloca.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzHppa_Hpux11_AllocaMachs[] = {
+        "hppa*-*-hpux11*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zHppa_Hpux11_AllocaSelect0[] =
+       "#ifndef _STDDEF_INCLUDED";
+
+#define    HPPA_HPUX11_ALLOCA_TEST_CT  1
+static tTestDesc aHppa_Hpux11_AllocaTests[] = {
+  { TT_EGREP,    zHppa_Hpux11_AllocaSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Hppa_Hpux11_Alloca
+ */
+static const char* apzHppa_Hpux11_AllocaPatch[] = {
+    "format",
+    "#ifndef _SYS_STDSYMS_INCLUDED\n\
+#  include <sys/stdsyms.h>\n\
+#endif /* _SYS_STDSYMS_INCLUDED */\n\n\
+%0",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Hpux11_Abs fix
  */
 tSCC zHpux11_AbsName[] =
@@ -3659,6 +4379,121 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Hpux11_Lwp_Rwlock_Valid fix
+ */
+tSCC zHpux11_Lwp_Rwlock_ValidName[] =
+     "hpux11_lwp_rwlock_valid";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zHpux11_Lwp_Rwlock_ValidList[] =
+  "sys/pthread.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzHpux11_Lwp_Rwlock_ValidMachs[] = {
+        "*-hp-hpux11*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zHpux11_Lwp_Rwlock_ValidSelect0[] =
+       "#define __LWP_RWLOCK_VALID[ \t]*0x8c91";
+
+#define    HPUX11_LWP_RWLOCK_VALID_TEST_CT  1
+static tTestDesc aHpux11_Lwp_Rwlock_ValidTests[] = {
+  { TT_EGREP,    zHpux11_Lwp_Rwlock_ValidSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Hpux11_Lwp_Rwlock_Valid
+ */
+static const char* apzHpux11_Lwp_Rwlock_ValidPatch[] = {
+    "format",
+    "#define __LWP_RWLOCK_VALID              -29551",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Hpux11_Extern_Sendfile fix
+ */
+tSCC zHpux11_Extern_SendfileName[] =
+     "hpux11_extern_sendfile";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zHpux11_Extern_SendfileList[] =
+  "sys/socket.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzHpux11_Extern_SendfileMachs[] = {
+        "*-hp-hpux11.[12]*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zHpux11_Extern_SendfileSelect0[] =
+       "^[ \t]*extern sbsize_t sendfile.*\n\
+.*, int\\)\\);\n";
+
+#define    HPUX11_EXTERN_SENDFILE_TEST_CT  1
+static tTestDesc aHpux11_Extern_SendfileTests[] = {
+  { TT_EGREP,    zHpux11_Extern_SendfileSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Hpux11_Extern_Sendfile
+ */
+static const char* apzHpux11_Extern_SendfilePatch[] = {
+    "format",
+    "#ifndef _APP32_64BIT_OFF_T\n\
+%0#endif\n",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Hpux11_Extern_Sendpath fix
+ */
+tSCC zHpux11_Extern_SendpathName[] =
+     "hpux11_extern_sendpath";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zHpux11_Extern_SendpathList[] =
+  "sys/socket.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzHpux11_Extern_SendpathMachs[] = {
+        "*-hp-hpux11.[12]*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zHpux11_Extern_SendpathSelect0[] =
+       "^[ \t]*extern sbsize_t sendpath.*\n\
+.*, int\\)\\);\n";
+
+#define    HPUX11_EXTERN_SENDPATH_TEST_CT  1
+static tTestDesc aHpux11_Extern_SendpathTests[] = {
+  { TT_EGREP,    zHpux11_Extern_SendpathSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Hpux11_Extern_Sendpath
+ */
+static const char* apzHpux11_Extern_SendpathPatch[] = {
+    "format",
+    "#ifndef _APP32_64BIT_OFF_T\n\
+%0#endif\n",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Hpux11_Fabsf fix
  */
 tSCC zHpux11_FabsfName[] =
@@ -3672,7 +4507,9 @@
 /*
  *  Machine/OS name selection pattern
  */
-#define apzHpux11_FabsfMachs (const char**)NULL
+tSCC* apzHpux11_FabsfMachs[] = {
+        "*-hp-hpux11*",
+        (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
@@ -3680,15 +4517,8 @@
 tSCC zHpux11_FabsfSelect0[] =
        "^[ \t]*#[ \t]*define[ \t]+fabsf\\(.*";
 
-/*
- *  content bypass pattern - skip fix if pattern found
- */
-tSCC zHpux11_FabsfBypass0[] =
-       "__cplusplus";
-
-#define    HPUX11_FABSF_TEST_CT  2
+#define    HPUX11_FABSF_TEST_CT  1
 static tTestDesc aHpux11_FabsfTests[] = {
-  { TT_NEGREP,   zHpux11_FabsfBypass0, (regex_t*)NULL },
   { TT_EGREP,    zHpux11_FabsfSelect0, (regex_t*)NULL }, };
 
 /*
@@ -3703,6 +4533,43 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Hpux11_Pthread_Pointer fix
+ */
+tSCC zHpux11_Pthread_PointerName[] =
+     "hpux11_pthread_pointer";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zHpux11_Pthread_PointerList[] =
+  "sys/pthread.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzHpux11_Pthread_PointerMachs[] = {
+        "*-hp-hpux11.[0-3]*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zHpux11_Pthread_PointerSelect0[] =
+       "(void[ \t]*\\*)(m|c|rw)(_ptr)";
+
+#define    HPUX11_PTHREAD_POINTER_TEST_CT  1
+static tTestDesc aHpux11_Pthread_PointerTests[] = {
+  { TT_EGREP,    zHpux11_Pthread_PointerSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Hpux11_Pthread_Pointer
+ */
+static const char* apzHpux11_Pthread_PointerPatch[] = {
+    "format",
+    "long\t%2%3",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Hpux11_Pthread_Const fix
  */
 tSCC zHpux11_Pthread_ConstName[] =
@@ -3724,7 +4591,7 @@
  *  content selection pattern - do fix if pattern found
  */
 tSCC zHpux11_Pthread_ConstSelect0[] =
-       "^#define[ \t]*__POINTER_SET[ \t]*\\(\\(void \\*\\) 1LL\\)";
+       "^(#define[ \t]+__POINTER_SET[ \t0,]*)(.*\\))";
 
 #define    HPUX11_PTHREAD_CONST_TEST_CT  1
 static tTestDesc aHpux11_Pthread_ConstTests[] = {
@@ -3735,7 +4602,7 @@
  */
 static const char* apzHpux11_Pthread_ConstPatch[] = {
     "format",
-    "#define __POINTER_SET\t\t((void *) 1L)",
+    "%11",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -3846,6 +4713,43 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Hpux_Vsscanf fix
+ */
+tSCC zHpux_VsscanfName[] =
+     "hpux_vsscanf";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zHpux_VsscanfList[] =
+  "stdio.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzHpux_VsscanfMachs[] = {
+        "*-*-hpux*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zHpux_VsscanfSelect0[] =
+       "(extern int vsscanf\\()char";
+
+#define    HPUX_VSSCANF_TEST_CT  1
+static tTestDesc aHpux_VsscanfTests[] = {
+  { TT_EGREP,    zHpux_VsscanfSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Hpux_Vsscanf
+ */
+static const char* apzHpux_VsscanfPatch[] = {
+    "format",
+    "%1const char",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Hpux8_Bogus_Inlines fix
  */
 tSCC zHpux8_Bogus_InlinesName[] =
@@ -3890,355 +4794,372 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux_Ctype_Macros fix
+ *  Description of Hpux_C99_Intptr fix
  */
-tSCC zHpux_Ctype_MacrosName[] =
-     "hpux_ctype_macros";
+tSCC zHpux_C99_IntptrName[] =
+     "hpux_c99_intptr";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux_Ctype_MacrosList[] =
-  "ctype.h\0";
+tSCC zHpux_C99_IntptrList[] =
+  "stdint-hpux11.h\0stdint.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-#define apzHpux_Ctype_MacrosMachs (const char**)NULL
-
-/*
- *  content selection pattern - do fix if pattern found
- */
-tSCC zHpux_Ctype_MacrosSelect0[] =
-       "((: |\\()__SB_masks \\? )(__SB_masks\\[__(alnum|c)\\] & _IS)";
-
-#define    HPUX_CTYPE_MACROS_TEST_CT  1
-static tTestDesc aHpux_Ctype_MacrosTests[] = {
-  { TT_EGREP,    zHpux_Ctype_MacrosSelect0, (regex_t*)NULL }, };
+tSCC* apzHpux_C99_IntptrMachs[] = {
+        "*-hp-hpux11.3*",
+        (const char*)NULL };
+#define HPUX_C99_INTPTR_TEST_CT  0
+#define aHpux_C99_IntptrTests   (tTestDesc*)NULL
 
 /*
- *  Fix Command Arguments for Hpux_Ctype_Macros
+ *  Fix Command Arguments for Hpux_C99_Intptr
  */
-static const char* apzHpux_Ctype_MacrosPatch[] = {
-    "format",
-    "%1(int)%3",
+static const char* apzHpux_C99_IntptrPatch[] = { sed_cmd_z,
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*PTRDIFF_MAX[ \t]*INT32_MAX[ \t]*$@#define PTRDIFF_MAX (2147483647l)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*PTRDIFF_MIN[ \t]*INT32_MIN[ \t]*$@#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*INTPTR_MAX[ \t]*INT32_MAX[ \t]*$@#define INTPTR_MAX (2147483647l)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*INTPTR_MIN[ \t]*INT32_MIN[ \t]*$@#define INTPTR_MIN (-INTPTR_MAX - 1)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINTPTR_MAX[ \t]*UINT32_MAX[ \t]*$@#define UINTPTR_MAX (4294967295ul)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*SIZE_MAX[ \t]*UINT32_MAX[ \t]*$@#define SIZE_MAX (4294967295ul)@",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux_Htonl fix
+ *  Description of Hpux_C99_Inttypes fix
  */
-tSCC zHpux_HtonlName[] =
-     "hpux_htonl";
+tSCC zHpux_C99_InttypesName[] =
+     "hpux_c99_inttypes";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux_HtonlList[] =
-  "netinet/in.h\0";
+tSCC zHpux_C99_InttypesList[] =
+  "inttypes.h\0stdint-hpux11.h\0stdint.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-#define apzHpux_HtonlMachs (const char**)NULL
+tSCC* apzHpux_C99_InttypesMachs[] = {
+        "*-hp-hpux11.[23]*",
+        (const char*)NULL };
+#define HPUX_C99_INTTYPES_TEST_CT  0
+#define aHpux_C99_InttypesTests   (tTestDesc*)NULL
 
 /*
- *  content selection pattern - do fix if pattern found
+ *  Fix Command Arguments for Hpux_C99_Inttypes
  */
-tSCC zHpux_HtonlSelect0[] =
-       "#ifndef _XOPEN_SOURCE_EXTENDED[ \t]*\n\
-(/\\*\n\
- \\* Macros for number representation conversion\\.\n\
- \\*/\n\
-#ifndef ntohl)";
+static const char* apzHpux_C99_InttypesPatch[] = { sed_cmd_z,
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINT8_C(__c)[ \t]*__CONCAT_U__(__c)[ \t]*$@#define UINT8_C(__c) (__c)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINT16_C(__c)[ \t]*__CONCAT_U__(__c)[ \t]*$@#define UINT16_C(__c) (__c)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*INT32_C(__c)[ \t]*__CONCAT__(__c,l)[ \t]*$@#define INT32_C(__c) (__c)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINT32_C(__c)[ \t].*$@#define UINT32_C(__c) __CONCAT__(__c,u)@",
+    (char*)NULL };
 
-#define    HPUX_HTONL_TEST_CT  1
-static tTestDesc aHpux_HtonlTests[] = {
-  { TT_EGREP,    zHpux_HtonlSelect0, (regex_t*)NULL }, };
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Hpux_C99_Inttypes2 fix
+ */
+tSCC zHpux_C99_Inttypes2Name[] =
+     "hpux_c99_inttypes2";
 
 /*
- *  Fix Command Arguments for Hpux_Htonl
+ *  File name selection pattern
  */
-static const char* apzHpux_HtonlPatch[] = {
-    "format",
-    "#if 1\n\
-%1",
+tSCC zHpux_C99_Inttypes2List[] =
+  "stdint-hpux11.h\0stdint.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzHpux_C99_Inttypes2Machs[] = {
+        "*-hp-hpux11.2*",
+        (const char*)NULL };
+#define HPUX_C99_INTTYPES2_TEST_CT  0
+#define aHpux_C99_Inttypes2Tests   (tTestDesc*)NULL
+
+/*
+ *  Fix Command Arguments for Hpux_C99_Inttypes2
+ */
+static const char* apzHpux_C99_Inttypes2Patch[] = { sed_cmd_z,
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*INT8_C(__c)[ \t]*((signed char)(__c))[ \t]*$@#define INT8_C(__c) (__c)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINT8_C(__c)[ \t]*((unsigned char)(__c))[ \t]*$@#define UINT8_C(__c) (__c)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*INT16_C(__c)[ \t]*((short)(__c))[ \t]*$@#define INT16_C(__c) (__c)@",
+    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINT16_C(__c)[ \t]*((unsigned short)(__c))[ \t]*$@#define UINT16_C(__c) (__c)@",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux_Long_Double fix
+ *  Description of Hpux_Ctype_Macros fix
  */
-tSCC zHpux_Long_DoubleName[] =
-     "hpux_long_double";
+tSCC zHpux_Ctype_MacrosName[] =
+     "hpux_ctype_macros";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux_Long_DoubleList[] =
-  "stdlib.h\0";
+tSCC zHpux_Ctype_MacrosList[] =
+  "ctype.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzHpux_Long_DoubleMachs[] = {
-        "*-*-hpux10*",
-        "*-*-hpux11.[012]*",
-        (const char*)NULL };
+#define apzHpux_Ctype_MacrosMachs (const char**)NULL
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zHpux_Long_DoubleSelect0[] =
-       "extern[ \t]long_double[ \t]strtold";
-
-/*
- *  content bypass pattern - skip fix if pattern found
- */
-tSCC zHpux_Long_DoubleBypass0[] =
-       "long_double_t";
+tSCC zHpux_Ctype_MacrosSelect0[] =
+       "((: |\\()__SB_masks \\? )(__SB_masks\\[__(alnum|c)\\] & _IS)";
 
-#define    HPUX_LONG_DOUBLE_TEST_CT  2
-static tTestDesc aHpux_Long_DoubleTests[] = {
-  { TT_NEGREP,   zHpux_Long_DoubleBypass0, (regex_t*)NULL },
-  { TT_EGREP,    zHpux_Long_DoubleSelect0, (regex_t*)NULL }, };
+#define    HPUX_CTYPE_MACROS_TEST_CT  1
+static tTestDesc aHpux_Ctype_MacrosTests[] = {
+  { TT_EGREP,    zHpux_Ctype_MacrosSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Hpux_Long_Double
+ *  Fix Command Arguments for Hpux_Ctype_Macros
  */
-static const char* apzHpux_Long_DoublePatch[] = { sed_cmd_z,
-    "-e", "/^#[ \t]*ifndef _LONG_DOUBLE/,/\\/\\* _LONG_DOUBLE \\*\\//D",
-    "-e", "s/long_double/long double/g",
+static const char* apzHpux_Ctype_MacrosPatch[] = {
+    "format",
+    "%1(int)%3",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux_Long_Double_2 fix
+ *  Description of Hpux_Extern_Errno fix
  */
-tSCC zHpux_Long_Double_2Name[] =
-     "hpux_long_double_2";
+tSCC zHpux_Extern_ErrnoName[] =
+     "hpux_extern_errno";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux_Long_Double_2List[] =
-  "stdlib.h\0";
+tSCC zHpux_Extern_ErrnoList[] =
+  "errno.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzHpux_Long_Double_2Machs[] = {
-        "hppa*-*-hpux11.3*",
+tSCC* apzHpux_Extern_ErrnoMachs[] = {
+        "*-hp-hpux10.*",
+        "*-hp-hpux11.[0-2]*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zHpux_Long_Double_2Select0[] =
-       "#[ \t]*if[ \t]*!defined\\(__ia64\\) \\|\\| defined\\(_PROTOTYPES\\) \\|\\| defined\\(_LONG_DOUBLE_STRUCT\\)";
+tSCC zHpux_Extern_ErrnoSelect0[] =
+       "^[ \t]*extern int errno;$";
 
-#define    HPUX_LONG_DOUBLE_2_TEST_CT  1
-static tTestDesc aHpux_Long_Double_2Tests[] = {
-  { TT_EGREP,    zHpux_Long_Double_2Select0, (regex_t*)NULL }, };
+#define    HPUX_EXTERN_ERRNO_TEST_CT  1
+static tTestDesc aHpux_Extern_ErrnoTests[] = {
+  { TT_EGREP,    zHpux_Extern_ErrnoSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Hpux_Long_Double_2
+ *  Fix Command Arguments for Hpux_Extern_Errno
  */
-static const char* apzHpux_Long_Double_2Patch[] = {
+static const char* apzHpux_Extern_ErrnoPatch[] = {
     "format",
-    "#  if !defined(_PROTOTYPES) || defined(_LONG_DOUBLE_STRUCT)",
+    "#ifdef __cplusplus\n\
+extern \"C\" {\n\
+#endif\n\
+%0\n\
+#ifdef __cplusplus\n\
+}\n\
+#endif",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux_Systime fix
+ *  Description of Hpux_Htonl fix
  */
-tSCC zHpux_SystimeName[] =
-     "hpux_systime";
+tSCC zHpux_HtonlName[] =
+     "hpux_htonl";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux_SystimeList[] =
-  "sys/time.h\0";
+tSCC zHpux_HtonlList[] =
+  "netinet/in.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-#define apzHpux_SystimeMachs (const char**)NULL
+#define apzHpux_HtonlMachs (const char**)NULL
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zHpux_SystimeSelect0[] =
-       "^extern struct sigevent;";
+tSCC zHpux_HtonlSelect0[] =
+       "#ifndef _XOPEN_SOURCE_EXTENDED[ \t]*\n\
+(/\\*\n\
+ \\* Macros for number representation conversion\\.\n\
+ \\*/\n\
+#ifndef ntohl)";
 
-#define    HPUX_SYSTIME_TEST_CT  1
-static tTestDesc aHpux_SystimeTests[] = {
-  { TT_EGREP,    zHpux_SystimeSelect0, (regex_t*)NULL }, };
+#define    HPUX_HTONL_TEST_CT  1
+static tTestDesc aHpux_HtonlTests[] = {
+  { TT_EGREP,    zHpux_HtonlSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Hpux_Systime
+ *  Fix Command Arguments for Hpux_Htonl
  */
-static const char* apzHpux_SystimePatch[] = {
+static const char* apzHpux_HtonlPatch[] = {
     "format",
-    "struct sigevent;",
+    "#if 1\n\
+%1",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux_Spu_Info fix
+ *  Description of Hpux_Imaginary_I fix
  */
-tSCC zHpux_Spu_InfoName[] =
-     "hpux_spu_info";
+tSCC zHpux_Imaginary_IName[] =
+     "hpux_imaginary_i";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux_Spu_InfoList[] =
-  "ia64/sys/getppdp.h\0*/sys/getppdp.h\0";
+tSCC zHpux_Imaginary_IList[] =
+  "complex.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzHpux_Spu_InfoMachs[] = {
-        "*-hp-hpux*",
+tSCC* apzHpux_Imaginary_IMachs[] = {
+        "ia64-hp-hpux11.*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zHpux_Spu_InfoSelect0[] =
-       "^.*extern.*spu_info.*";
+tSCC zHpux_Imaginary_ISelect0[] =
+       "^[ \t]*#[ \t]*define[ \t]*_Complex_I.*";
 
-#define    HPUX_SPU_INFO_TEST_CT  1
-static tTestDesc aHpux_Spu_InfoTests[] = {
-  { TT_EGREP,    zHpux_Spu_InfoSelect0, (regex_t*)NULL }, };
+#define    HPUX_IMAGINARY_I_TEST_CT  1
+static tTestDesc aHpux_Imaginary_ITests[] = {
+  { TT_EGREP,    zHpux_Imaginary_ISelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Hpux_Spu_Info
+ *  Fix Command Arguments for Hpux_Imaginary_I
  */
-static const char* apzHpux_Spu_InfoPatch[] = {
+static const char* apzHpux_Imaginary_IPatch[] = {
     "format",
-    "#ifdef _KERNEL\n\
-%0\n\
-#endif",
+    "#define _Complex_I (__extension__ 1.0iF)",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux11_Extern_Sendfile fix
+ *  Description of Hpux_Inttype_Int8_T fix
  */
-tSCC zHpux11_Extern_SendfileName[] =
-     "hpux11_extern_sendfile";
+tSCC zHpux_Inttype_Int8_TName[] =
+     "hpux_inttype_int8_t";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux11_Extern_SendfileList[] =
-  "sys/socket.h\0";
+tSCC zHpux_Inttype_Int8_TList[] =
+  "sys/_inttypes.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzHpux11_Extern_SendfileMachs[] = {
-        "*-hp-hpux11.[12]*",
+tSCC* apzHpux_Inttype_Int8_TMachs[] = {
+        "*-hp-hpux1[01].*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zHpux11_Extern_SendfileSelect0[] =
-       "^[ \t]*extern sbsize_t sendfile.*\n\
-.*, int\\)\\);\n";
+tSCC zHpux_Inttype_Int8_TSelect0[] =
+       "^[ \t]*typedef[ \t]*char[ \t]*int(_least){0,1}8_t.*";
 
-#define    HPUX11_EXTERN_SENDFILE_TEST_CT  1
-static tTestDesc aHpux11_Extern_SendfileTests[] = {
-  { TT_EGREP,    zHpux11_Extern_SendfileSelect0, (regex_t*)NULL }, };
+#define    HPUX_INTTYPE_INT8_T_TEST_CT  1
+static tTestDesc aHpux_Inttype_Int8_TTests[] = {
+  { TT_EGREP,    zHpux_Inttype_Int8_TSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Hpux11_Extern_Sendfile
+ *  Fix Command Arguments for Hpux_Inttype_Int8_T
  */
-static const char* apzHpux11_Extern_SendfilePatch[] = {
+static const char* apzHpux_Inttype_Int8_TPatch[] = {
     "format",
-    "#ifndef _APP32_64BIT_OFF_T\n\
-%0#endif\n",
+    "typedef signed char int%18_t;",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux11_Extern_Sendpath fix
+ *  Description of Hpux_Long_Double fix
  */
-tSCC zHpux11_Extern_SendpathName[] =
-     "hpux11_extern_sendpath";
+tSCC zHpux_Long_DoubleName[] =
+     "hpux_long_double";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux11_Extern_SendpathList[] =
-  "sys/socket.h\0";
+tSCC zHpux_Long_DoubleList[] =
+  "stdlib.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzHpux11_Extern_SendpathMachs[] = {
-        "*-hp-hpux11.[12]*",
+tSCC* apzHpux_Long_DoubleMachs[] = {
+        "*-*-hpux10*",
+        "*-*-hpux11.[012]*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zHpux11_Extern_SendpathSelect0[] =
-       "^[ \t]*extern sbsize_t sendpath.*\n\
-.*, int\\)\\);\n";
+tSCC zHpux_Long_DoubleSelect0[] =
+       "extern[ \t]long_double[ \t]strtold";
 
-#define    HPUX11_EXTERN_SENDPATH_TEST_CT  1
-static tTestDesc aHpux11_Extern_SendpathTests[] = {
-  { TT_EGREP,    zHpux11_Extern_SendpathSelect0, (regex_t*)NULL }, };
+/*
+ *  content bypass pattern - skip fix if pattern found
+ */
+tSCC zHpux_Long_DoubleBypass0[] =
+       "long_double_t";
+
+#define    HPUX_LONG_DOUBLE_TEST_CT  2
+static tTestDesc aHpux_Long_DoubleTests[] = {
+  { TT_NEGREP,   zHpux_Long_DoubleBypass0, (regex_t*)NULL },
+  { TT_EGREP,    zHpux_Long_DoubleSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Hpux11_Extern_Sendpath
+ *  Fix Command Arguments for Hpux_Long_Double
  */
-static const char* apzHpux11_Extern_SendpathPatch[] = {
-    "format",
-    "#ifndef _APP32_64BIT_OFF_T\n\
-%0#endif\n",
+static const char* apzHpux_Long_DoublePatch[] = { sed_cmd_z,
+    "-e", "/^#[ \t]*ifndef _LONG_DOUBLE/,/\\/\\* _LONG_DOUBLE \\*\\//D",
+    "-e", "s/long_double/long double/g",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux_Extern_Errno fix
+ *  Description of Hpux_Long_Double_2 fix
  */
-tSCC zHpux_Extern_ErrnoName[] =
-     "hpux_extern_errno";
+tSCC zHpux_Long_Double_2Name[] =
+     "hpux_long_double_2";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux_Extern_ErrnoList[] =
-  "errno.h\0";
+tSCC zHpux_Long_Double_2List[] =
+  "stdlib.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzHpux_Extern_ErrnoMachs[] = {
-        "*-hp-hpux10.*",
-        "*-hp-hpux11.[0-2]*",
+tSCC* apzHpux_Long_Double_2Machs[] = {
+        "hppa*-*-hpux11.3*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zHpux_Extern_ErrnoSelect0[] =
-       "^[ \t]*extern int errno;$";
+tSCC zHpux_Long_Double_2Select0[] =
+       "#[ \t]*if[ \t]*!defined\\(__ia64\\) \\|\\| defined\\(_PROTOTYPES\\) \\|\\| defined\\(_LONG_DOUBLE_STRUCT\\)";
 
-#define    HPUX_EXTERN_ERRNO_TEST_CT  1
-static tTestDesc aHpux_Extern_ErrnoTests[] = {
-  { TT_EGREP,    zHpux_Extern_ErrnoSelect0, (regex_t*)NULL }, };
+#define    HPUX_LONG_DOUBLE_2_TEST_CT  1
+static tTestDesc aHpux_Long_Double_2Tests[] = {
+  { TT_EGREP,    zHpux_Long_Double_2Select0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Hpux_Extern_Errno
+ *  Fix Command Arguments for Hpux_Long_Double_2
  */
-static const char* apzHpux_Extern_ErrnoPatch[] = {
+static const char* apzHpux_Long_Double_2Patch[] = {
     "format",
-    "#ifdef __cplusplus\n\
-extern \"C\" {\n\
-#endif\n\
-%0\n\
-#ifdef __cplusplus\n\
-}\n\
-#endif",
+    "#  if !defined(_PROTOTYPES) || defined(_LONG_DOUBLE_STRUCT)",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -4283,97 +5204,41 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux_C99_Intptr fix
- */
-tSCC zHpux_C99_IntptrName[] =
-     "hpux_c99_intptr";
-
-/*
- *  File name selection pattern
- */
-tSCC zHpux_C99_IntptrList[] =
-  "stdint-hpux11.h\0stdint.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-tSCC* apzHpux_C99_IntptrMachs[] = {
-        "*-hp-hpux11.3*",
-        (const char*)NULL };
-#define HPUX_C99_INTPTR_TEST_CT  0
-#define aHpux_C99_IntptrTests   (tTestDesc*)NULL
-
-/*
- *  Fix Command Arguments for Hpux_C99_Intptr
- */
-static const char* apzHpux_C99_IntptrPatch[] = { sed_cmd_z,
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*PTRDIFF_MAX[ \t]*INT32_MAX[ \t]*$@#define PTRDIFF_MAX (2147483647l)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*PTRDIFF_MIN[ \t]*INT32_MIN[ \t]*$@#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*INTPTR_MAX[ \t]*INT32_MAX[ \t]*$@#define INTPTR_MAX (2147483647l)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*INTPTR_MIN[ \t]*INT32_MIN[ \t]*$@#define INTPTR_MIN (-INTPTR_MAX - 1)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINTPTR_MAX[ \t]*UINT32_MAX[ \t]*$@#define UINTPTR_MAX (4294967295ul)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*SIZE_MAX[ \t]*UINT32_MAX[ \t]*$@#define SIZE_MAX (4294967295ul)@",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
- *  Description of Hpux_C99_Inttypes fix
+ *  Description of Hpux_Spu_Info fix
  */
-tSCC zHpux_C99_InttypesName[] =
-     "hpux_c99_inttypes";
+tSCC zHpux_Spu_InfoName[] =
+     "hpux_spu_info";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux_C99_InttypesList[] =
-  "inttypes.h\0stdint-hpux11.h\0stdint.h\0";
+tSCC zHpux_Spu_InfoList[] =
+  "ia64/sys/getppdp.h\0*/sys/getppdp.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzHpux_C99_InttypesMachs[] = {
-        "*-hp-hpux11.[23]*",
+tSCC* apzHpux_Spu_InfoMachs[] = {
+        "*-hp-hpux*",
         (const char*)NULL };
-#define HPUX_C99_INTTYPES_TEST_CT  0
-#define aHpux_C99_InttypesTests   (tTestDesc*)NULL
 
 /*
- *  Fix Command Arguments for Hpux_C99_Inttypes
- */
-static const char* apzHpux_C99_InttypesPatch[] = { sed_cmd_z,
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINT8_C(__c)[ \t]*__CONCAT_U__(__c)[ \t]*$@#define UINT8_C(__c) (__c)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINT16_C(__c)[ \t]*__CONCAT_U__(__c)[ \t]*$@#define UINT16_C(__c) (__c)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*INT32_C(__c)[ \t]*__CONCAT__(__c,l)[ \t]*$@#define INT32_C(__c) (__c)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINT32_C(__c)[ \t].*$@#define UINT32_C(__c) __CONCAT__(__c,u)@",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
- *  Description of Hpux_C99_Inttypes2 fix
+ *  content selection pattern - do fix if pattern found
  */
-tSCC zHpux_C99_Inttypes2Name[] =
-     "hpux_c99_inttypes2";
+tSCC zHpux_Spu_InfoSelect0[] =
+       "^.*extern.*spu_info.*";
 
-/*
- *  File name selection pattern
- */
-tSCC zHpux_C99_Inttypes2List[] =
-  "stdint-hpux11.h\0stdint.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-tSCC* apzHpux_C99_Inttypes2Machs[] = {
-        "*-hp-hpux11.2*",
-        (const char*)NULL };
-#define HPUX_C99_INTTYPES2_TEST_CT  0
-#define aHpux_C99_Inttypes2Tests   (tTestDesc*)NULL
+#define    HPUX_SPU_INFO_TEST_CT  1
+static tTestDesc aHpux_Spu_InfoTests[] = {
+  { TT_EGREP,    zHpux_Spu_InfoSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Hpux_C99_Inttypes2
+ *  Fix Command Arguments for Hpux_Spu_Info
  */
-static const char* apzHpux_C99_Inttypes2Patch[] = { sed_cmd_z,
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*INT8_C(__c)[ \t]*((signed char)(__c))[ \t]*$@#define INT8_C(__c) (__c)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINT8_C(__c)[ \t]*((unsigned char)(__c))[ \t]*$@#define UINT8_C(__c) (__c)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*INT16_C(__c)[ \t]*((short)(__c))[ \t]*$@#define INT16_C(__c) (__c)@",
-    "-e", "s@^[ \t]*#[ \t]*define[ \t]*UINT16_C(__c)[ \t]*((unsigned short)(__c))[ \t]*$@#define UINT16_C(__c) (__c)@",
+static const char* apzHpux_Spu_InfoPatch[] = {
+    "format",
+    "#ifdef _KERNEL\n\
+%0\n\
+#endif",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -4415,76 +5280,74 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux_Inttype_Int8_T fix
+ *  Description of Hpux_Longjmp fix
  */
-tSCC zHpux_Inttype_Int8_TName[] =
-     "hpux_inttype_int8_t";
+tSCC zHpux_LongjmpName[] =
+     "hpux_longjmp";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux_Inttype_Int8_TList[] =
-  "sys/_inttypes.h\0";
+tSCC zHpux_LongjmpList[] =
+  "setjmp.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzHpux_Inttype_Int8_TMachs[] = {
-        "*-hp-hpux1[01].*",
+tSCC* apzHpux_LongjmpMachs[] = {
+        "*-hp-hpux*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zHpux_Inttype_Int8_TSelect0[] =
-       "^[ \t]*typedef[ \t]*char[ \t]*int(_least){0,1}8_t.*";
+tSCC zHpux_LongjmpSelect0[] =
+       "^[ \t]*extern[ \t]+void[ \t]+.*longjmp[ \t]*(__\\(\\(.*int\\)\\)|\\(.*int\\)|\\(\\))";
 
-#define    HPUX_INTTYPE_INT8_T_TEST_CT  1
-static tTestDesc aHpux_Inttype_Int8_TTests[] = {
-  { TT_EGREP,    zHpux_Inttype_Int8_TSelect0, (regex_t*)NULL }, };
+#define    HPUX_LONGJMP_TEST_CT  1
+static tTestDesc aHpux_LongjmpTests[] = {
+  { TT_EGREP,    zHpux_LongjmpSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Hpux_Inttype_Int8_T
+ *  Fix Command Arguments for Hpux_Longjmp
  */
-static const char* apzHpux_Inttype_Int8_TPatch[] = {
+static const char* apzHpux_LongjmpPatch[] = {
     "format",
-    "typedef signed char int%18_t;",
+    "%0 __attribute__ ((__noreturn__))",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Hpux_Imaginary_I fix
+ *  Description of Hpux_Systime fix
  */
-tSCC zHpux_Imaginary_IName[] =
-     "hpux_imaginary_i";
+tSCC zHpux_SystimeName[] =
+     "hpux_systime";
 
 /*
  *  File name selection pattern
  */
-tSCC zHpux_Imaginary_IList[] =
-  "complex.h\0";
+tSCC zHpux_SystimeList[] =
+  "sys/time.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzHpux_Imaginary_IMachs[] = {
-        "ia64-hp-hpux11.*",
-        (const char*)NULL };
+#define apzHpux_SystimeMachs (const char**)NULL
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zHpux_Imaginary_ISelect0[] =
-       "^[ \t]*#[ \t]*define[ \t]*_Complex_I.*";
+tSCC zHpux_SystimeSelect0[] =
+       "^extern struct sigevent;";
 
-#define    HPUX_IMAGINARY_I_TEST_CT  1
-static tTestDesc aHpux_Imaginary_ITests[] = {
-  { TT_EGREP,    zHpux_Imaginary_ISelect0, (regex_t*)NULL }, };
+#define    HPUX_SYSTIME_TEST_CT  1
+static tTestDesc aHpux_SystimeTests[] = {
+  { TT_EGREP,    zHpux_SystimeSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Hpux_Imaginary_I
+ *  Fix Command Arguments for Hpux_Systime
  */
-static const char* apzHpux_Imaginary_IPatch[] = {
+static const char* apzHpux_SystimePatch[] = {
     "format",
-    "#define _Complex_I (__extension__ 1.0iF)",
+    "struct sigevent;",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -4498,7 +5361,7 @@
  *  File name selection pattern
  */
 tSCC zHuge_Val_HexList[] =
-  "bits/huge_val.h\0";
+  "bits/huge_val.h\0*/bits/huge_val.h\0";
 /*
  *  Machine/OS name selection pattern
  */
@@ -4540,7 +5403,7 @@
  *  File name selection pattern
  */
 tSCC zHuge_Valf_HexList[] =
-  "bits/huge_val.h\0";
+  "bits/huge_val.h\0*/bits/huge_val.h\0";
 /*
  *  Machine/OS name selection pattern
  */
@@ -4582,7 +5445,7 @@
  *  File name selection pattern
  */
 tSCC zHuge_Vall_HexList[] =
-  "bits/huge_val.h\0";
+  "bits/huge_val.h\0*/bits/huge_val.h\0";
 /*
  *  Machine/OS name selection pattern
  */
@@ -4759,6 +5622,211 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Irix_Stdio_Va_List fix
+ */
+tSCC zIrix_Stdio_Va_ListName[] =
+     "irix_stdio_va_list";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zIrix_Stdio_Va_ListList[] =
+  "stdio.h\0internal/stdio_core.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+#define apzIrix_Stdio_Va_ListMachs (const char**)NULL
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zIrix_Stdio_Va_ListSelect0[] =
+       "/\\* va_list \\*/ char \\*";
+
+#define    IRIX_STDIO_VA_LIST_TEST_CT  1
+static tTestDesc aIrix_Stdio_Va_ListTests[] = {
+  { TT_EGREP,    zIrix_Stdio_Va_ListSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Irix_Stdio_Va_List
+ */
+static const char* apzIrix_Stdio_Va_ListPatch[] = {
+    "format",
+    "__gnuc_va_list",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Irix___Restrict fix
+ */
+tSCC zIrix___RestrictName[] =
+     "irix___restrict";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zIrix___RestrictList[] =
+  "internal/sgimacros.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzIrix___RestrictMachs[] = {
+        "mips-sgi-irix6.5",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zIrix___RestrictSelect0[] =
+       "(#ifdef __c99\n\
+)(#[ \t]*define __restrict restrict)";
+
+#define    IRIX___RESTRICT_TEST_CT  1
+static tTestDesc aIrix___RestrictTests[] = {
+  { TT_EGREP,    zIrix___RestrictSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Irix___Restrict
+ */
+static const char* apzIrix___RestrictPatch[] = {
+    "format",
+    "%1#  ifndef __cplusplus\n\
+%2\n\
+#  endif",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Irix___Generic1 fix
+ */
+tSCC zIrix___Generic1Name[] =
+     "irix___generic1";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zIrix___Generic1List[] =
+  "internal/math_core.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzIrix___Generic1Machs[] = {
+        "mips-sgi-irix6.5",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zIrix___Generic1Select0[] =
+       "#define ([a-z]+)\\(x\\) *__generic.*";
+
+#define    IRIX___GENERIC1_TEST_CT  1
+static tTestDesc aIrix___Generic1Tests[] = {
+  { TT_EGREP,    zIrix___Generic1Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Irix___Generic1
+ */
+static const char* apzIrix___Generic1Patch[] = {
+    "format",
+    "extern int %1(double);\n\
+extern int %1f(float);\n\
+extern int %1l(long double);\n\
+#if !defined(__cplusplus)\n\
+#define %1(x) (sizeof(x) == sizeof(double) ? _%1(x) \\\n\
+               : sizeof(x) == sizeof(float) ? _%1f(x) \\\n\
+               : _%1l(x))\n\
+#else\n\
+namespace std\n\
+{\n\
+    inline int %1(double x) { return _%1(x); };\n\
+    inline int %1f(float x) { return _%1f(x); };\n\
+    inline int %1l(long double x) { return _%1l(x); };\n\
+}\n\
+#endif\n",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Irix___Generic2 fix
+ */
+tSCC zIrix___Generic2Name[] =
+     "irix___generic2";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zIrix___Generic2List[] =
+  "internal/math_core.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzIrix___Generic2Machs[] = {
+        "mips-sgi-irix6.5",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zIrix___Generic2Select0[] =
+       "#define ([a-z]+)\\(x,y\\) *__generic.*";
+
+#define    IRIX___GENERIC2_TEST_CT  1
+static tTestDesc aIrix___Generic2Tests[] = {
+  { TT_EGREP,    zIrix___Generic2Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Irix___Generic2
+ */
+static const char* apzIrix___Generic2Patch[] = {
+    "format",
+    "#define %1(x,y) \\\n\
+  ((sizeof(x)<=4 && sizeof(y)<=4) ? _%1f(x,y) \\\n\
+   : (sizeof(x)<=8 && sizeof(y)<=8) ? _%1(x,y) \\\n\
+   : _%1l(x,y))\n",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Irix_Complex fix
+ */
+tSCC zIrix_ComplexName[] =
+     "irix_complex";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zIrix_ComplexList[] =
+  "complex.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzIrix_ComplexMachs[] = {
+        "mips-sgi-irix6.5",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zIrix_ComplexSelect0[] =
+       "#define[ \t]_Complex_I[ \t]\\(\\(float[ \t]_Complex\\)[ \t]\\(__I__\\)\\)";
+
+#define    IRIX_COMPLEX_TEST_CT  1
+static tTestDesc aIrix_ComplexTests[] = {
+  { TT_EGREP,    zIrix_ComplexSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Irix_Complex
+ */
+static const char* apzIrix_ComplexPatch[] = { sed_cmd_z,
+    "-e", "s/#define[ \t]_Complex_I[ \t]((float[ \t]_Complex)[ \t](__I__))/#define _Complex_I (__extension__ 1.0iF)/",
+    "-e", "/#define[ \t]imaginary[ \t]_Imaginary/d",
+    "-e", "/#define[ \t]_Imaginary_I/d",
+    "-e", "s/#define[ \t]I[ \t]_Imaginary_I/#define I _Complex_I/",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Irix_Limits_Const fix
  */
 tSCC zIrix_Limits_ConstName[] =
@@ -4794,37 +5862,236 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Irix_Stdio_Va_List fix
+ *  Description of Irix_Pthread_Init fix
  */
-tSCC zIrix_Stdio_Va_ListName[] =
-     "irix_stdio_va_list";
+tSCC zIrix_Pthread_InitName[] =
+     "irix_pthread_init";
 
 /*
  *  File name selection pattern
  */
-tSCC zIrix_Stdio_Va_ListList[] =
-  "stdio.h\0";
+tSCC zIrix_Pthread_InitList[] =
+  "pthread.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-#define apzIrix_Stdio_Va_ListMachs (const char**)NULL
+tSCC* apzIrix_Pthread_InitMachs[] = {
+        "mips-sgi-irix6.5",
+        (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zIrix_Stdio_Va_ListSelect0[] =
-       "/\\* va_list \\*/ char \\*";
+tSCC zIrix_Pthread_InitSelect0[] =
+       "^(#define[ \t]+PTHREAD_.*_INITIALIZER[ \t]+)(\\{ 0 \\})";
 
-#define    IRIX_STDIO_VA_LIST_TEST_CT  1
-static tTestDesc aIrix_Stdio_Va_ListTests[] = {
-  { TT_EGREP,    zIrix_Stdio_Va_ListSelect0, (regex_t*)NULL }, };
+#define    IRIX_PTHREAD_INIT_TEST_CT  1
+static tTestDesc aIrix_Pthread_InitTests[] = {
+  { TT_EGREP,    zIrix_Pthread_InitSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Irix_Stdio_Va_List
+ *  Fix Command Arguments for Irix_Pthread_Init
  */
-static const char* apzIrix_Stdio_Va_ListPatch[] = {
+static const char* apzIrix_Pthread_InitPatch[] = {
     "format",
-    "__gnuc_va_list",
+    "%1{ %2 }",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Irix_Socklen_T fix
+ */
+tSCC zIrix_Socklen_TName[] =
+     "irix_socklen_t";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zIrix_Socklen_TList[] =
+  "sys/socket.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzIrix_Socklen_TMachs[] = {
+        "mips-sgi-irix6.5",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zIrix_Socklen_TSelect0[] =
+       "(#define _SOCKLEN_T\n\
+)(typedef u_int32_t socklen_t;)";
+
+#define    IRIX_SOCKLEN_T_TEST_CT  1
+static tTestDesc aIrix_Socklen_TTests[] = {
+  { TT_EGREP,    zIrix_Socklen_TSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Irix_Socklen_T
+ */
+static const char* apzIrix_Socklen_TPatch[] = {
+    "format",
+    "%1#if _NO_XOPEN4 && _NO_XOPEN5\n\
+typedef int socklen_t;\n\
+#else\n\
+%2\n\
+#endif /* _NO_XOPEN4 && _NO_XOPEN5 */",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Irix_Stdint_C99_Mode fix
+ */
+tSCC zIrix_Stdint_C99_ModeName[] =
+     "irix_stdint_c99_mode";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zIrix_Stdint_C99_ModeList[] =
+  "stdint.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzIrix_Stdint_C99_ModeMachs[] = {
+        "mips-sgi-irix6.5",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zIrix_Stdint_C99_ModeSelect0[] =
+       "(#ifndef __c99\n\
+)(#error This header file is to be used only for c99 mode compilations)";
+
+#define    IRIX_STDINT_C99_MODE_TEST_CT  1
+static tTestDesc aIrix_Stdint_C99_ModeTests[] = {
+  { TT_EGREP,    zIrix_Stdint_C99_ModeSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Irix_Stdint_C99_Mode
+ */
+static const char* apzIrix_Stdint_C99_ModePatch[] = {
+    "format",
+    "#if 0\n\
+%2",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Irix_Stdint_C99_Types fix
+ */
+tSCC zIrix_Stdint_C99_TypesName[] =
+     "irix_stdint_c99_types";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zIrix_Stdint_C99_TypesList[] =
+  "stdint-irix65.h\0stdint.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzIrix_Stdint_C99_TypesMachs[] = {
+        "mips-sgi-irix6.5",
+        (const char*)NULL };
+#define IRIX_STDINT_C99_TYPES_TEST_CT  0
+#define aIrix_Stdint_C99_TypesTests   (tTestDesc*)NULL
+
+/*
+ *  Fix Command Arguments for Irix_Stdint_C99_Types
+ */
+static const char* apzIrix_Stdint_C99_TypesPatch[] = { sed_cmd_z,
+    "-e", "s@^#define INT64_MIN.*(-0x7fffffffffffffff - 1)$@#define INT64_MIN               (-0x7fffffffffffffffLL - 1)@",
+    "-e", "s@^#define INT64_MAX.*0x7fffffffffffffff$@#define INT64_MAX               0x7fffffffffffffffLL@",
+    "-e", "s@^#define UINT32_MAX.*0xffffffff$@#define UINT32_MAX              0xffffffffU@",
+    "-e", "s@^#define UINT64_MAX.*0xffffffffffffffff$@#define UINT64_MAX              0xffffffffffffffffULL@",
+    "-e", "s@^#define INTPTR_MIN.*INT32_MIN$@#define INTPTR_MIN              (-0x7fffffffL - 1)@",
+    "-e", "s@^#define INTPTR_MAX.*INT32_MAX$@#define INTPTR_MAX              0x7fffffffL@",
+    "-e", "s@^#define UINTPTR_MAX.*UINT32_MAX$@#define UINTPTR_MAX             0xffffffffUL@",
+    "-e", "s@^#define INTPTR_MIN.*INT64_MIN@#define INTPTR_MIN              (-0x7fffffffffffffffL - 1)@",
+    "-e", "s@^#define INTPTR_MAX.*INT64_MAX$@#define INTPTR_MAX              0x7fffffffffffffffL@",
+    "-e", "s@^#define UINTPTR_MAX.*UINT64_MAX$@#define UINTPTR_MAX             0xffffffffffffffffUL@",
+    "-e", "s@^#define PTRDIFF_MIN.*INT64_MIN$@#define PTRDIFF_MIN             (-0x7fffffffffffffffL - 1)@",
+    "-e", "s@^#define PTRDIFF_MAX.*INT64_MAX$@#define PTRDIFF_MAX             0x7fffffffffffffffL@",
+    "-e", "s@^#define SIZE_MAX.*UINT64_MAX$@#define SIZE_MAX                0xffffffffffffffffUL@",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Irix_Stdint_C99_Macros fix
+ */
+tSCC zIrix_Stdint_C99_MacrosName[] =
+     "irix_stdint_c99_macros";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zIrix_Stdint_C99_MacrosList[] =
+  "stdint-irix65.h\0stdint.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzIrix_Stdint_C99_MacrosMachs[] = {
+        "mips-sgi-irix6.5",
+        (const char*)NULL };
+#define IRIX_STDINT_C99_MACROS_TEST_CT  0
+#define aIrix_Stdint_C99_MacrosTests   (tTestDesc*)NULL
+
+/*
+ *  Fix Command Arguments for Irix_Stdint_C99_Macros
+ */
+static const char* apzIrix_Stdint_C99_MacrosPatch[] = { sed_cmd_z,
+    "-e", "s@^#define INT8_C(x).*int.*_t.*$@#define INT8_C(x)               (x)@",
+    "-e", "s@^#define INT16_C(x).*int.*_t.*$@#define INT16_C(x)              (x)@",
+    "-e", "s@^#define INT32_C(x).*int.*_t.*$@#define INT32_C(x)              (x)@",
+    "-e", "s@^#define INT64_C(x).*int.*_t.*$@#define INT64_C(x)              (x ## LL)@",
+    "-e", "s@^#define UINT8_C(x).*int.*_t.*$@#define UINT8_C(x)              (x)@",
+    "-e", "s@^#define UINT16_C(x).*int.*_t.*$@#define UINT16_C(x)             (x)@",
+    "-e", "s@^#define UINT32_C(x).*int.*_t.*$@#define UINT32_C(x)             (x ## U)@",
+    "-e", "s@^#define UINT64_C(x).*int.*_t.*$@#define UINT64_C(x)             (x ## ULL)@",
+    "-e", "s@^#define INTMAX_C(x).*int.*_t.*$@#define INTMAX_C(x)             (x ## LL)@",
+    "-e", "s@^#define UINTMAX_C(x).*int.*_t.*$@#define UINTMAX_C(x)            (x ## ULL)@",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Irix_Wcsftime fix
+ */
+tSCC zIrix_WcsftimeName[] =
+     "irix_wcsftime";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zIrix_WcsftimeList[] =
+  "internal/wchar_core.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzIrix_WcsftimeMachs[] = {
+        "mips-sgi-irix6.5",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zIrix_WcsftimeSelect0[] =
+       "#if _NO_XOPEN5\n\
+(extern size_t[ \t]+wcsftime.*const char *.*)";
+
+#define    IRIX_WCSFTIME_TEST_CT  1
+static tTestDesc aIrix_WcsftimeTests[] = {
+  { TT_EGREP,    zIrix_WcsftimeSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Irix_Wcsftime
+ */
+static const char* apzIrix_WcsftimePatch[] = {
+    "format",
+    "#if _NO_XOPEN5 && !defined(__c99)\n\
+%1",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -5069,7 +6336,9 @@
 /*
  *  Machine/OS name selection pattern
  */
-#define apzMath_ExceptionMachs (const char**)NULL
+tSCC* apzMath_ExceptionMachs[] = {
+        "*-*-solaris2.1[0-9]*",
+        (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
@@ -6240,46 +7509,234 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Solaris_Longjmp_Noreturn fix
+ *  Description of Solaris_Gets_C11 fix
  */
-tSCC zSolaris_Longjmp_NoreturnName[] =
-     "solaris_longjmp_noreturn";
+tSCC zSolaris_Gets_C11Name[] =
+     "solaris_gets_c11";
 
 /*
  *  File name selection pattern
  */
-tSCC zSolaris_Longjmp_NoreturnList[] =
-  "iso/setjmp_iso.h\0";
+tSCC zSolaris_Gets_C11List[] =
+  "iso/stdio_iso.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzSolaris_Longjmp_NoreturnMachs[] = {
+tSCC* apzSolaris_Gets_C11Machs[] = {
         "*-*-solaris2*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zSolaris_Longjmp_NoreturnSelect0[] =
-       "(.*longjmp\\(jmp_buf.*[^)]+\\));";
+tSCC zSolaris_Gets_C11Select0[] =
+       "(extern char[ \t]*\\*gets\\(char \\*\\));";
+
+#define    SOLARIS_GETS_C11_TEST_CT  1
+static tTestDesc aSolaris_Gets_C11Tests[] = {
+  { TT_EGREP,    zSolaris_Gets_C11Select0, (regex_t*)NULL }, };
 
 /*
- *  content bypass pattern - skip fix if pattern found
+ *  Fix Command Arguments for Solaris_Gets_C11
  */
-tSCC zSolaris_Longjmp_NoreturnBypass0[] =
-       "__NORETURN";
+static const char* apzSolaris_Gets_C11Patch[] = {
+    "format",
+    "#if __STDC_VERSION__ < 201112L && __cplusplus < 201402L\n\
+%1 __attribute__((__deprecated__));\n\
+#endif",
+    (char*)NULL };
 
-#define    SOLARIS_LONGJMP_NORETURN_TEST_CT  2
-static tTestDesc aSolaris_Longjmp_NoreturnTests[] = {
-  { TT_NEGREP,   zSolaris_Longjmp_NoreturnBypass0, (regex_t*)NULL },
-  { TT_EGREP,    zSolaris_Longjmp_NoreturnSelect0, (regex_t*)NULL }, };
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Solaris_Gets_Cxx14 fix
+ */
+tSCC zSolaris_Gets_Cxx14Name[] =
+     "solaris_gets_cxx14";
 
 /*
- *  Fix Command Arguments for Solaris_Longjmp_Noreturn
+ *  File name selection pattern
  */
-static const char* apzSolaris_Longjmp_NoreturnPatch[] = {
+tSCC zSolaris_Gets_Cxx14List[] =
+  "iso/stdio_iso.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzSolaris_Gets_Cxx14Machs[] = {
+        "*-*-solaris2*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zSolaris_Gets_Cxx14Select0[] =
+       "(#if __STDC_VERSION__ < 201112L)\n\
+(extern char\t\\*gets\\(char \\*\\) __ATTR_DEPRECATED;)";
+
+#define    SOLARIS_GETS_CXX14_TEST_CT  1
+static tTestDesc aSolaris_Gets_Cxx14Tests[] = {
+  { TT_EGREP,    zSolaris_Gets_Cxx14Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Solaris_Gets_Cxx14
+ */
+static const char* apzSolaris_Gets_Cxx14Patch[] = {
     "format",
-    "%1 __attribute__ ((__noreturn__));",
+    "%1 && __cplusplus < 201402L\n\
+%2",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Solaris_Int_Const fix
+ */
+tSCC zSolaris_Int_ConstName[] =
+     "solaris_int_const";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zSolaris_Int_ConstList[] =
+  "sys/int_const.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzSolaris_Int_ConstMachs[] = {
+        "*-*-solaris2*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zSolaris_Int_ConstSelect0[] =
+       "^#define[ \t]+UINT8_C\\(c\\)[ \t]+__CONCAT__.*\n\
+(/*.**/)\n\
+#define[ \t]+UINT16_C\\(c\\)[ \t]+__CONCAT__.*";
+
+#define    SOLARIS_INT_CONST_TEST_CT  1
+static tTestDesc aSolaris_Int_ConstTests[] = {
+  { TT_EGREP,    zSolaris_Int_ConstSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Solaris_Int_Const
+ */
+static const char* apzSolaris_Int_ConstPatch[] = {
+    "format",
+    "#define\tUINT8_C(c)\t(c)\n\
+%1\n\
+#define\tUINT16_C(c)\t(c)",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Solaris_Int_Limits_1 fix
+ */
+tSCC zSolaris_Int_Limits_1Name[] =
+     "solaris_int_limits_1";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zSolaris_Int_Limits_1List[] =
+  "sys/int_limits.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzSolaris_Int_Limits_1Machs[] = {
+        "*-*-solaris2*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zSolaris_Int_Limits_1Select0[] =
+       "^#define[ \t]+UINT8_MAX[ \t]+\\(255U\\)\n\
+#define[ \t]+UINT16_MAX[ \t]+\\(65535U\\)";
+
+#define    SOLARIS_INT_LIMITS_1_TEST_CT  1
+static tTestDesc aSolaris_Int_Limits_1Tests[] = {
+  { TT_EGREP,    zSolaris_Int_Limits_1Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Solaris_Int_Limits_1
+ */
+static const char* apzSolaris_Int_Limits_1Patch[] = {
+    "format",
+    "#define\tUINT8_MAX\t(255)\n\
+#define\tUINT16_MAX\t(65535)",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Solaris_Int_Limits_2 fix
+ */
+tSCC zSolaris_Int_Limits_2Name[] =
+     "solaris_int_limits_2";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zSolaris_Int_Limits_2List[] =
+  "sys/int_limits.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzSolaris_Int_Limits_2Machs[] = {
+        "*-*-solaris2*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zSolaris_Int_Limits_2Select0[] =
+       "^#define[ \t]+(INT|UINT)_FAST16_(MAX|MIN)[ \t](INT|UINT)16.*";
+
+#define    SOLARIS_INT_LIMITS_2_TEST_CT  1
+static tTestDesc aSolaris_Int_Limits_2Tests[] = {
+  { TT_EGREP,    zSolaris_Int_Limits_2Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Solaris_Int_Limits_2
+ */
+static const char* apzSolaris_Int_Limits_2Patch[] = {
+    "format",
+    "#define\t%1_FAST16_%2 %132_%2",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Solaris_Int_Limits_3 fix
+ */
+tSCC zSolaris_Int_Limits_3Name[] =
+     "solaris_int_limits_3";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zSolaris_Int_Limits_3List[] =
+  "sys/int_limits.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzSolaris_Int_Limits_3Machs[] = {
+        "*-*-solaris2*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zSolaris_Int_Limits_3Select0[] =
+       "^#define[ \t]+SIZE_MAX[ \t]+4294967295UL";
+
+#define    SOLARIS_INT_LIMITS_3_TEST_CT  1
+static tTestDesc aSolaris_Int_Limits_3Tests[] = {
+  { TT_EGREP,    zSolaris_Int_Limits_3Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Solaris_Int_Limits_3
+ */
+static const char* apzSolaris_Int_Limits_3Patch[] = {
+    "format",
+    "#define\tSIZE_MAX\t4294967295U",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -6327,6 +7784,45 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Solaris_Math_10 fix
+ */
+tSCC zSolaris_Math_10Name[] =
+     "solaris_math_10";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zSolaris_Math_10List[] =
+  "iso/math_c99.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+#define apzSolaris_Math_10Machs (const char**)NULL
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zSolaris_Math_10Select0[] =
+       "@\\(#\\)math_c99.h[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
+
+#define    SOLARIS_MATH_10_TEST_CT  1
+static tTestDesc aSolaris_Math_10Tests[] = {
+  { TT_EGREP,    zSolaris_Math_10Select0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Solaris_Math_10
+ */
+static const char* apzSolaris_Math_10Patch[] = {
+    "format",
+    "#define\tisinf(x) __builtin_isinf(x)",
+    "^#define[ \t]+isinf\\(x\\)[ \t]+__extension__\\([ \t]*\\\\\n\
+[ \t]*\\{[ \t]*__typeof\\(x\\)[ \t]*__x_i[ \t]*=[ \t]*\\(x\\);[ \t]*\\\\\n\
+[ \t]*__x_i[ \t]*==[ \t]*\\(__typeof\\(__x_i\\)\\)[ \t]*INFINITY[ \t]*\\|\\|[ \t]*\\\\\n\
+[ \t]*__x_i[ \t]*==[ \t]*\\(__typeof\\(__x_i\\)\\)[ \t]*\\(-INFINITY\\);[ \t]*\\}\\)",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Solaris_Math_2 fix
  */
 tSCC zSolaris_Math_2Name[] =
@@ -6547,167 +8043,92 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Solaris_Math_10 fix
+ *  Description of Solaris_Math_11 fix
  */
-tSCC zSolaris_Math_10Name[] =
-     "solaris_math_10";
+tSCC zSolaris_Math_11Name[] =
+     "solaris_math_11";
 
 /*
  *  File name selection pattern
  */
-tSCC zSolaris_Math_10List[] =
+tSCC zSolaris_Math_11List[] =
   "iso/math_c99.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-#define apzSolaris_Math_10Machs (const char**)NULL
+#define apzSolaris_Math_11Machs (const char**)NULL
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zSolaris_Math_10Select0[] =
-       "@\\(#\\)math_c99.h[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
+tSCC zSolaris_Math_11Select0[] =
+       "@\\(#\\)math_c99\\.h[ \t]+1\\.[0-9]+[ \t]+[0-9/]+ ";
 
-#define    SOLARIS_MATH_10_TEST_CT  1
-static tTestDesc aSolaris_Math_10Tests[] = {
-  { TT_EGREP,    zSolaris_Math_10Select0, (regex_t*)NULL }, };
+#define    SOLARIS_MATH_11_TEST_CT  1
+static tTestDesc aSolaris_Math_11Tests[] = {
+  { TT_EGREP,    zSolaris_Math_11Select0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Solaris_Math_10
+ *  Fix Command Arguments for Solaris_Math_11
  */
-static const char* apzSolaris_Math_10Patch[] = {
+static const char* apzSolaris_Math_11Patch[] = {
     "format",
-    "#define\tisinf(x) __builtin_isinf(x)",
-    "^#define[ \t]+isinf\\(x\\)[ \t]+__extension__\\([ \t]*\\\\\n\
-[ \t]*\\{[ \t]*__typeof\\(x\\)[ \t]*__x_i[ \t]*=[ \t]*\\(x\\);[ \t]*\\\\\n\
-[ \t]*__x_i[ \t]*==[ \t]*\\(__typeof\\(__x_i\\)\\)[ \t]*INFINITY[ \t]*\\|\\|[ \t]*\\\\\n\
-[ \t]*__x_i[ \t]*==[ \t]*\\(__typeof\\(__x_i\\)\\)[ \t]*\\(-INFINITY\\);[ \t]*\\}\\)",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
- *  Description of Solaris_Mutex_Init_2 fix
- */
-tSCC zSolaris_Mutex_Init_2Name[] =
-     "solaris_mutex_init_2";
-
-/*
- *  File name selection pattern
- */
-tSCC zSolaris_Mutex_Init_2List[] =
-  "pthread.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-tSCC* apzSolaris_Mutex_Init_2Machs[] = {
-        "*-*-solaris2.[0-9]",
-        "*-*-solaris2.[0-9][!0-9]*",
-        (const char*)NULL };
-
-/*
- *  content selection pattern - do fix if pattern found
- */
-tSCC zSolaris_Mutex_Init_2Select0[] =
-       "@\\(#\\)pthread.h[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
-
-#define    SOLARIS_MUTEX_INIT_2_TEST_CT  1
-static tTestDesc aSolaris_Mutex_Init_2Tests[] = {
-  { TT_EGREP,    zSolaris_Mutex_Init_2Select0, (regex_t*)NULL }, };
-
-/*
- *  Fix Command Arguments for Solaris_Mutex_Init_2
- */
-static const char* apzSolaris_Mutex_Init_2Patch[] = {
-    "format",
-    "#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n\
-%0\n\
-#else\n\
-%1, {0}}%4\n\
+    "#undef\tsignbit\n\
+#define\tsignbit(x)\t(sizeof(x) == sizeof(float) \\\n\
+\t\t\t   ? __builtin_signbitf(x) \\\n\
+\t\t\t   : sizeof(x) == sizeof(long double) \\\n\
+\t\t\t     ? __builtin_signbitl(x) \\\n\
+\t\t\t     : __builtin_signbit(x))",
+    "^#undef[ \t]+signbit\n\
+#if defined\\(__sparc\\)\n\
+#define[ \t]+signbit\\(x\\)[ \t]+__extension__\\( \\\\\n\
+[ \t]+\\{[ \t]*__typeof\\(x\\)[ \t]*__x_s[ \t]*=[ \t]*\\(x\\);[ \t]*\\\\\n\
+[ \t]+\\(int\\)[ \t]*\\(\\*\\(unsigned[ \t]*\\*\\)[ \t]*\\&__x_s[ \t]*>>[ \t]*31\\);[ \t]*\\}\\)\n\
+#elif defined\\(__i386\\) \\|\\| defined\\(__amd64\\)\n\
+#define[ \t]+signbit\\(x\\)[ \t]+__extension__\\( \\\\\n\
+[ \t]+\\{ __typeof\\(x\\) __x_s = \\(x\\); \\\\\n\
+[ \t]+\\(sizeof \\(__x_s\\) == sizeof \\(float\\) \\? \\\\\n\
+[ \t]+\\(int\\) \\(\\*\\(unsigned \\*\\) \\&__x_s >> 31\\) : \\\\\n\
+[ \t]+sizeof \\(__x_s\\) == sizeof \\(double\\) \\? \\\\\n\
+[ \t]+\\(int\\) \\(\\(\\(unsigned \\*\\) \\&__x_s\\)\\[1\\] >> 31\\) : \\\\\n\
+[ \t]+\\(int\\) \\(\\(\\(unsigned short \\*\\) \\&__x_s\\)\\[4\\] >> 15\\)\\); \\}\\)\n\
 #endif",
-    "(^#define[ \t]+PTHREAD_(MUTEX|COND)_INITIALIZER[ \t]+(|/*.**/[ \t]*\\\\\n\
-[ \t]*)\\{.*),[ \t]*0\\}(|[ \t].*)$",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Solaris_Pow_Int_Overload fix
+ *  Description of Solaris_Math_12 fix
  */
-tSCC zSolaris_Pow_Int_OverloadName[] =
-     "solaris_pow_int_overload";
+tSCC zSolaris_Math_12Name[] =
+     "solaris_math_12";
 
 /*
  *  File name selection pattern
  */
-tSCC zSolaris_Pow_Int_OverloadList[] =
-  "iso/math_iso.h\0";
+tSCC zSolaris_Math_12List[] =
+  "math.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzSolaris_Pow_Int_OverloadMachs[] = {
+tSCC* apzSolaris_Math_12Machs[] = {
         "*-*-solaris2*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zSolaris_Pow_Int_OverloadSelect0[] =
-       "^[ \t]*inline [a-z ]* pow\\([^()]*, int [^()]*\\) *\\{[^{}]*\n\
-[^{}]*\\}";
+tSCC zSolaris_Math_12Select0[] =
+       "#undef.*_GLIBCXX_USE_C99_MATH";
 
-#define    SOLARIS_POW_INT_OVERLOAD_TEST_CT  1
-static tTestDesc aSolaris_Pow_Int_OverloadTests[] = {
-  { TT_EGREP,    zSolaris_Pow_Int_OverloadSelect0, (regex_t*)NULL }, };
+#define    SOLARIS_MATH_12_TEST_CT  1
+static tTestDesc aSolaris_Math_12Tests[] = {
+  { TT_EGREP,    zSolaris_Math_12Select0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Solaris_Pow_Int_Overload
+ *  Fix Command Arguments for Solaris_Math_12
  */
-static const char* apzSolaris_Pow_Int_OverloadPatch[] = {
-    "format",
-    "#if __cplusplus < 201103L\n\
-%0\n\
-#endif",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
- *  Description of Solaris_Rwlock_Init_1 fix
- */
-tSCC zSolaris_Rwlock_Init_1Name[] =
-     "solaris_rwlock_init_1";
-
-/*
- *  File name selection pattern
- */
-tSCC zSolaris_Rwlock_Init_1List[] =
-  "pthread.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-tSCC* apzSolaris_Rwlock_Init_1Machs[] = {
-        "*-*-solaris*",
-        (const char*)NULL };
-
-/*
- *  content selection pattern - do fix if pattern found
- */
-tSCC zSolaris_Rwlock_Init_1Select0[] =
-       "@\\(#\\)pthread.h[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
-
-#define    SOLARIS_RWLOCK_INIT_1_TEST_CT  1
-static tTestDesc aSolaris_Rwlock_Init_1Tests[] = {
-  { TT_EGREP,    zSolaris_Rwlock_Init_1Select0, (regex_t*)NULL }, };
-
-/*
- *  Fix Command Arguments for Solaris_Rwlock_Init_1
- */
-static const char* apzSolaris_Rwlock_Init_1Patch[] = {
-    "format",
-    "#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n\
-%0\n\
-#else\n\
-%1{0, 0, 0, {{0}, {0}, {0}}, {{0}, {0}}, {{0}, {0}}}\n\
-#endif",
-    "(^#define[ \t]+PTHREAD_RWLOCK_INITIALIZER[ \t]+)\\{0, 0, 0, \\{0, 0, 0\\}, \\{0, 0\\}, \\{0, 0\\}\\}[ \t]*$",
+static const char* apzSolaris_Math_12Patch[] = { sed_cmd_z,
+    "-e", "/#undef[ \t]*_GLIBCXX_USE_C99_MATH/d",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -6750,327 +8171,209 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Solaris_Once_Init_2 fix
- */
-tSCC zSolaris_Once_Init_2Name[] =
-     "solaris_once_init_2";
-
-/*
- *  File name selection pattern
- */
-tSCC zSolaris_Once_Init_2List[] =
-  "pthread.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-tSCC* apzSolaris_Once_Init_2Machs[] = {
-        "*-*-solaris2.[0-9]",
-        "*-*-solaris2.[0-9][!0-9]*",
-        (const char*)NULL };
-
-/*
- *  content selection pattern - do fix if pattern found
- */
-tSCC zSolaris_Once_Init_2Select0[] =
-       "@\\(#\\)pthread.h[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
-
-#define    SOLARIS_ONCE_INIT_2_TEST_CT  1
-static tTestDesc aSolaris_Once_Init_2Tests[] = {
-  { TT_EGREP,    zSolaris_Once_Init_2Select0, (regex_t*)NULL }, };
-
-/*
- *  Fix Command Arguments for Solaris_Once_Init_2
- */
-static const char* apzSolaris_Once_Init_2Patch[] = {
-    "format",
-    "#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n\
-%0\n\
-#else\n\
-%1{0}, {0}, {0}, {%3}%4\n\
-#endif",
-    "(^#define[ \t]+PTHREAD_ONCE_INIT[ \t]+\\{\\{)(0, 0, 0, )(PTHREAD_[A-Z_]+)(\\}\\})[ \t]*$",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
- *  Description of Solaris_Int_Const fix
+ *  Description of Solaris_Posix_Spawn_Restrict fix
  */
-tSCC zSolaris_Int_ConstName[] =
-     "solaris_int_const";
+tSCC zSolaris_Posix_Spawn_RestrictName[] =
+     "solaris_posix_spawn_restrict";
 
 /*
  *  File name selection pattern
  */
-tSCC zSolaris_Int_ConstList[] =
-  "sys/int_const.h\0";
+tSCC zSolaris_Posix_Spawn_RestrictList[] =
+  "spawn.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzSolaris_Int_ConstMachs[] = {
+tSCC* apzSolaris_Posix_Spawn_RestrictMachs[] = {
         "*-*-solaris2*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zSolaris_Int_ConstSelect0[] =
-       "^#define[ \t]+UINT8_C\\(c\\)[ \t]+__CONCAT__.*\n\
-(/*.**/)\n\
-#define[ \t]+UINT16_C\\(c\\)[ \t]+__CONCAT__.*";
+tSCC zSolaris_Posix_Spawn_RestrictSelect0[] =
+       "(.*[ \t]+)([a-z]+)\\[_RESTRICT_KYWD\\](.*)";
 
-#define    SOLARIS_INT_CONST_TEST_CT  1
-static tTestDesc aSolaris_Int_ConstTests[] = {
-  { TT_EGREP,    zSolaris_Int_ConstSelect0, (regex_t*)NULL }, };
+#define    SOLARIS_POSIX_SPAWN_RESTRICT_TEST_CT  1
+static tTestDesc aSolaris_Posix_Spawn_RestrictTests[] = {
+  { TT_EGREP,    zSolaris_Posix_Spawn_RestrictSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Solaris_Int_Const
+ *  Fix Command Arguments for Solaris_Posix_Spawn_Restrict
  */
-static const char* apzSolaris_Int_ConstPatch[] = {
+static const char* apzSolaris_Posix_Spawn_RestrictPatch[] = {
     "format",
-    "#define\tUINT8_C(c)\t(c)\n\
-%1\n\
-#define\tUINT16_C(c)\t(c)",
+    "%1*_RESTRICT_KYWD %2%3",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Solaris_Int_Limits_1 fix
+ *  Description of Solaris_Pow_Int_Overload fix
  */
-tSCC zSolaris_Int_Limits_1Name[] =
-     "solaris_int_limits_1";
+tSCC zSolaris_Pow_Int_OverloadName[] =
+     "solaris_pow_int_overload";
 
 /*
  *  File name selection pattern
  */
-tSCC zSolaris_Int_Limits_1List[] =
-  "sys/int_limits.h\0";
+tSCC zSolaris_Pow_Int_OverloadList[] =
+  "iso/math_iso.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzSolaris_Int_Limits_1Machs[] = {
+tSCC* apzSolaris_Pow_Int_OverloadMachs[] = {
         "*-*-solaris2*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zSolaris_Int_Limits_1Select0[] =
-       "^#define[ \t]+UINT8_MAX[ \t]+\\(255U\\)\n\
-#define[ \t]+UINT16_MAX[ \t]+\\(65535U\\)";
+tSCC zSolaris_Pow_Int_OverloadSelect0[] =
+       "^[ \t]*inline [a-z ]* pow\\([^()]*, int [^()]*\\) *\\{[^{}]*\n\
+[^{}]*\\}";
 
-#define    SOLARIS_INT_LIMITS_1_TEST_CT  1
-static tTestDesc aSolaris_Int_Limits_1Tests[] = {
-  { TT_EGREP,    zSolaris_Int_Limits_1Select0, (regex_t*)NULL }, };
+#define    SOLARIS_POW_INT_OVERLOAD_TEST_CT  1
+static tTestDesc aSolaris_Pow_Int_OverloadTests[] = {
+  { TT_EGREP,    zSolaris_Pow_Int_OverloadSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Solaris_Int_Limits_1
+ *  Fix Command Arguments for Solaris_Pow_Int_Overload
  */
-static const char* apzSolaris_Int_Limits_1Patch[] = {
+static const char* apzSolaris_Pow_Int_OverloadPatch[] = {
     "format",
-    "#define\tUINT8_MAX\t(255)\n\
-#define\tUINT16_MAX\t(65535)",
+    "#if __cplusplus < 201103L\n\
+%0\n\
+#endif",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Solaris_Int_Limits_2 fix
+ *  Description of Solaris_Rwlock_Init_1 fix
  */
-tSCC zSolaris_Int_Limits_2Name[] =
-     "solaris_int_limits_2";
+tSCC zSolaris_Rwlock_Init_1Name[] =
+     "solaris_rwlock_init_1";
 
 /*
  *  File name selection pattern
  */
-tSCC zSolaris_Int_Limits_2List[] =
-  "sys/int_limits.h\0";
+tSCC zSolaris_Rwlock_Init_1List[] =
+  "pthread.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzSolaris_Int_Limits_2Machs[] = {
-        "*-*-solaris2*",
+tSCC* apzSolaris_Rwlock_Init_1Machs[] = {
+        "*-*-solaris*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zSolaris_Int_Limits_2Select0[] =
-       "^#define[ \t]+(INT|UINT)_FAST16_(MAX|MIN)[ \t](INT|UINT)16.*";
+tSCC zSolaris_Rwlock_Init_1Select0[] =
+       "@\\(#\\)pthread.h[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
 
-#define    SOLARIS_INT_LIMITS_2_TEST_CT  1
-static tTestDesc aSolaris_Int_Limits_2Tests[] = {
-  { TT_EGREP,    zSolaris_Int_Limits_2Select0, (regex_t*)NULL }, };
+#define    SOLARIS_RWLOCK_INIT_1_TEST_CT  1
+static tTestDesc aSolaris_Rwlock_Init_1Tests[] = {
+  { TT_EGREP,    zSolaris_Rwlock_Init_1Select0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Solaris_Int_Limits_2
+ *  Fix Command Arguments for Solaris_Rwlock_Init_1
  */
-static const char* apzSolaris_Int_Limits_2Patch[] = {
+static const char* apzSolaris_Rwlock_Init_1Patch[] = {
     "format",
-    "#define\t%1_FAST16_%2 %132_%2",
+    "#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n\
+%0\n\
+#else\n\
+%1{0, 0, 0, {{0}, {0}, {0}}, {{0}, {0}}, {{0}, {0}}}\n\
+#endif",
+    "(^#define[ \t]+PTHREAD_RWLOCK_INITIALIZER[ \t]+)\\{0, 0, 0, \\{0, 0, 0\\}, \\{0, 0\\}, \\{0, 0\\}\\}[ \t]*$",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Solaris_Int_Limits_3 fix
+ *  Description of Solaris_Std___Filbuf fix
  */
-tSCC zSolaris_Int_Limits_3Name[] =
-     "solaris_int_limits_3";
+tSCC zSolaris_Std___FilbufName[] =
+     "solaris_std___filbuf";
 
 /*
  *  File name selection pattern
  */
-tSCC zSolaris_Int_Limits_3List[] =
-  "sys/int_limits.h\0";
+tSCC zSolaris_Std___FilbufList[] =
+  "stdio.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzSolaris_Int_Limits_3Machs[] = {
+tSCC* apzSolaris_Std___FilbufMachs[] = {
         "*-*-solaris2*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zSolaris_Int_Limits_3Select0[] =
-       "^#define[ \t]+SIZE_MAX[ \t]+4294967295UL";
-
-#define    SOLARIS_INT_LIMITS_3_TEST_CT  1
-static tTestDesc aSolaris_Int_Limits_3Tests[] = {
-  { TT_EGREP,    zSolaris_Int_Limits_3Select0, (regex_t*)NULL }, };
-
-/*
- *  Fix Command Arguments for Solaris_Int_Limits_3
- */
-static const char* apzSolaris_Int_Limits_3Patch[] = {
-    "format",
-    "#define\tSIZE_MAX\t4294967295U",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
- *  Description of Solaris_Int_Types fix
- */
-tSCC zSolaris_Int_TypesName[] =
-     "solaris_int_types";
-
-/*
- *  File name selection pattern
- */
-tSCC zSolaris_Int_TypesList[] =
-  "sys/int_types.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-#define apzSolaris_Int_TypesMachs (const char**)NULL
-
-/*
- *  content selection pattern - do fix if pattern found
- */
-tSCC zSolaris_Int_TypesSelect0[] =
-       "__STDC__ - 0 == 0";
+tSCC zSolaris_Std___FilbufSelect0[] =
+       "(using std::perror;\n\
+)(#endif)";
 
 /*
  *  content bypass pattern - skip fix if pattern found
  */
-tSCC zSolaris_Int_TypesBypass0[] =
-       "_LONGLONG_TYPE";
-
-#define    SOLARIS_INT_TYPES_TEST_CT  2
-static tTestDesc aSolaris_Int_TypesTests[] = {
-  { TT_NEGREP,   zSolaris_Int_TypesBypass0, (regex_t*)NULL },
-  { TT_EGREP,    zSolaris_Int_TypesSelect0, (regex_t*)NULL }, };
-
-/*
- *  Fix Command Arguments for Solaris_Int_Types
- */
-static const char* apzSolaris_Int_TypesPatch[] = {
-    "format",
-    "(defined(_STDC_C99) || !defined(_STRICT_STDC) || defined(__GNUC__))",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
- *  Description of Solaris_Posix_Spawn_Restrict fix
- */
-tSCC zSolaris_Posix_Spawn_RestrictName[] =
-     "solaris_posix_spawn_restrict";
-
-/*
- *  File name selection pattern
- */
-tSCC zSolaris_Posix_Spawn_RestrictList[] =
-  "spawn.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-tSCC* apzSolaris_Posix_Spawn_RestrictMachs[] = {
-        "*-*-solaris2*",
-        (const char*)NULL };
-
-/*
- *  content selection pattern - do fix if pattern found
- */
-tSCC zSolaris_Posix_Spawn_RestrictSelect0[] =
-       "(.*[ \t]+)([a-z]+)\\[_RESTRICT_KYWD\\](.*)";
+tSCC zSolaris_Std___FilbufBypass0[] =
+       "using std::__filbuf";
 
-#define    SOLARIS_POSIX_SPAWN_RESTRICT_TEST_CT  1
-static tTestDesc aSolaris_Posix_Spawn_RestrictTests[] = {
-  { TT_EGREP,    zSolaris_Posix_Spawn_RestrictSelect0, (regex_t*)NULL }, };
+#define    SOLARIS_STD___FILBUF_TEST_CT  2
+static tTestDesc aSolaris_Std___FilbufTests[] = {
+  { TT_NEGREP,   zSolaris_Std___FilbufBypass0, (regex_t*)NULL },
+  { TT_EGREP,    zSolaris_Std___FilbufSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Solaris_Posix_Spawn_Restrict
+ *  Fix Command Arguments for Solaris_Std___Filbuf
  */
-static const char* apzSolaris_Posix_Spawn_RestrictPatch[] = {
+static const char* apzSolaris_Std___FilbufPatch[] = {
     "format",
-    "%1*_RESTRICT_KYWD %2%3",
+    "%1#ifndef _LP64\n\
+using std::__filbuf;\n\
+using std::__flsbuf;\n\
+#endif\n\
+%2",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Solaris_Std___Filbuf fix
+ *  Description of Solaris_Std_Gets_Cxx14 fix
  */
-tSCC zSolaris_Std___FilbufName[] =
-     "solaris_std___filbuf";
+tSCC zSolaris_Std_Gets_Cxx14Name[] =
+     "solaris_std_gets_cxx14";
 
 /*
  *  File name selection pattern
  */
-tSCC zSolaris_Std___FilbufList[] =
+tSCC zSolaris_Std_Gets_Cxx14List[] =
   "stdio.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzSolaris_Std___FilbufMachs[] = {
+tSCC* apzSolaris_Std_Gets_Cxx14Machs[] = {
         "*-*-solaris2*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zSolaris_Std___FilbufSelect0[] =
-       "(using std::perror;\n\
-)(#endif)";
-
-/*
- *  content bypass pattern - skip fix if pattern found
- */
-tSCC zSolaris_Std___FilbufBypass0[] =
-       "using std::__filbuf";
+tSCC zSolaris_Std_Gets_Cxx14Select0[] =
+       "using std::gets;";
 
-#define    SOLARIS_STD___FILBUF_TEST_CT  2
-static tTestDesc aSolaris_Std___FilbufTests[] = {
-  { TT_NEGREP,   zSolaris_Std___FilbufBypass0, (regex_t*)NULL },
-  { TT_EGREP,    zSolaris_Std___FilbufSelect0, (regex_t*)NULL }, };
+#define    SOLARIS_STD_GETS_CXX14_TEST_CT  1
+static tTestDesc aSolaris_Std_Gets_Cxx14Tests[] = {
+  { TT_EGREP,    zSolaris_Std_Gets_Cxx14Select0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Solaris_Std___Filbuf
+ *  Fix Command Arguments for Solaris_Std_Gets_Cxx14
  */
-static const char* apzSolaris_Std___FilbufPatch[] = {
+static const char* apzSolaris_Std_Gets_Cxx14Patch[] = {
     "format",
-    "%1#ifndef _LP64\n\
-using std::__filbuf;\n\
-using std::__flsbuf;\n\
-#endif\n\
-%2",
+    "#if __cplusplus < 201402L\n\
+%0\n\
+#endif",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -7116,47 +8419,39 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Solaris_Sys_Va_List fix
+ *  Description of Solaris_Stdlib_Noreturn fix
  */
-tSCC zSolaris_Sys_Va_ListName[] =
-     "solaris_sys_va_list";
+tSCC zSolaris_Stdlib_NoreturnName[] =
+     "solaris_stdlib_noreturn";
 
 /*
  *  File name selection pattern
  */
-tSCC zSolaris_Sys_Va_ListList[] =
-  "sys/va_list.h\0";
+tSCC zSolaris_Stdlib_NoreturnList[] =
+  "iso/stdlib_c99.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzSolaris_Sys_Va_ListMachs[] = {
-        "*-*-solaris2.9",
+tSCC* apzSolaris_Stdlib_NoreturnMachs[] = {
+        "*-*-solaris2*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zSolaris_Sys_Va_ListSelect0[] =
-       "#if.*__STDC__.*\n\
-typedef void \\*__va_list;\n\
-#else\n\
-typedef char \\*__va_list;\n\
-#endif";
+tSCC zSolaris_Stdlib_NoreturnSelect0[] =
+       "(extern) _Noreturn (void quick_exit\\(int\\));";
 
-#define    SOLARIS_SYS_VA_LIST_TEST_CT  1
-static tTestDesc aSolaris_Sys_Va_ListTests[] = {
-  { TT_EGREP,    zSolaris_Sys_Va_ListSelect0, (regex_t*)NULL }, };
+#define    SOLARIS_STDLIB_NORETURN_TEST_CT  1
+static tTestDesc aSolaris_Stdlib_NoreturnTests[] = {
+  { TT_EGREP,    zSolaris_Stdlib_NoreturnSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Solaris_Sys_Va_List
+ *  Fix Command Arguments for Solaris_Stdlib_Noreturn
  */
-static const char* apzSolaris_Sys_Va_ListPatch[] = {
+static const char* apzSolaris_Stdlib_NoreturnPatch[] = {
     "format",
-    "#ifdef __GNUC__\n\
-typedef __builtin_va_list __va_list;\n\
-#else\n\
-%0\n\
-#endif",
+    "%1 %2 __attribute__((__noreturn__));",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -7813,6 +9108,41 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
+ *  Description of Suse_Linux_Vt_Cxx fix
+ */
+tSCC zSuse_Linux_Vt_CxxName[] =
+     "suse_linux_vt_cxx";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zSuse_Linux_Vt_CxxList[] =
+  "linux/vt.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+#define apzSuse_Linux_Vt_CxxMachs (const char**)NULL
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zSuse_Linux_Vt_CxxSelect0[] =
+       "^[ \t]*unsigned int new;";
+
+#define    SUSE_LINUX_VT_CXX_TEST_CT  1
+static tTestDesc aSuse_Linux_Vt_CxxTests[] = {
+  { TT_EGREP,    zSuse_Linux_Vt_CxxSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Suse_Linux_Vt_Cxx
+ */
+static const char* apzSuse_Linux_Vt_CxxPatch[] = {
+    "format",
+    "unsigned int newev;",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
  *  Description of Svr4_Disable_Opt fix
  */
 tSCC zSvr4_Disable_OptName[] =
@@ -8091,7 +9421,7 @@
  *  File name selection pattern
  */
 tSCC zThread_KeywordList[] =
-  "pthread.h\0bits/sigthread.h\0";
+  "pthread.h\0bits/sigthread.h\0*/bits/sigthread.h\0";
 /*
  *  Machine/OS name selection pattern
  */
@@ -8259,191 +9589,156 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Vms_Define_Can_Use_Extern_Prefix fix
- */
-tSCC zVms_Define_Can_Use_Extern_PrefixName[] =
-     "vms_define_can_use_extern_prefix";
-
-/*
- *  File name selection pattern
- */
-tSCC zVms_Define_Can_Use_Extern_PrefixList[] =
-  "rtldef/decc$types.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-tSCC* apzVms_Define_Can_Use_Extern_PrefixMachs[] = {
-        "*-*-*vms*",
-        (const char*)NULL };
-
-/*
- *  content selection pattern - do fix if pattern found
- */
-tSCC zVms_Define_Can_Use_Extern_PrefixSelect0[] =
-       "#[ \t]*else\n\
-#[ \t]*if defined\\(__DECCXX\\)\n\
-#[ \t]*define __CAN_USE_EXTERN_PREFIX 1\n";
-
-#define    VMS_DEFINE_CAN_USE_EXTERN_PREFIX_TEST_CT  1
-static tTestDesc aVms_Define_Can_Use_Extern_PrefixTests[] = {
-  { TT_EGREP,    zVms_Define_Can_Use_Extern_PrefixSelect0, (regex_t*)NULL }, };
-
-/*
- *  Fix Command Arguments for Vms_Define_Can_Use_Extern_Prefix
- */
-static const char* apzVms_Define_Can_Use_Extern_PrefixPatch[] = {
-    "format",
-    "%0#    elif defined (__GNUC__)\n\
-#\tdefine __CAN_USE_EXTERN_PREFIX 1\n",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
- *  Description of Vms_Use_Pragma_Extern_Model fix
+ *  Description of Vms_Add_Missing_Braces fix
  */
-tSCC zVms_Use_Pragma_Extern_ModelName[] =
-     "vms_use_pragma_extern_model";
+tSCC zVms_Add_Missing_BracesName[] =
+     "vms_add_missing_braces";
 
 /*
  *  File name selection pattern
  */
-#define zVms_Use_Pragma_Extern_ModelList (char*)NULL
+tSCC zVms_Add_Missing_BracesList[] =
+  "rtldef/signal.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzVms_Use_Pragma_Extern_ModelMachs[] = {
+tSCC* apzVms_Add_Missing_BracesMachs[] = {
         "*-*-*vms*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zVms_Use_Pragma_Extern_ModelSelect0[] =
-       "#if defined\\(__DECC\\) \\|\\| defined\\(__DECCXX\\)\n\
-# pragma extern_model __save\n";
+tSCC zVms_Add_Missing_BracesSelect0[] =
+       "(_SIG_[A-Z]+_SET[ \t]+= \\{)(0x[0F]+, 0x[0F]+)";
 
-#define    VMS_USE_PRAGMA_EXTERN_MODEL_TEST_CT  1
-static tTestDesc aVms_Use_Pragma_Extern_ModelTests[] = {
-  { TT_EGREP,    zVms_Use_Pragma_Extern_ModelSelect0, (regex_t*)NULL }, };
+#define    VMS_ADD_MISSING_BRACES_TEST_CT  1
+static tTestDesc aVms_Add_Missing_BracesTests[] = {
+  { TT_EGREP,    zVms_Add_Missing_BracesSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Vms_Use_Pragma_Extern_Model
+ *  Fix Command Arguments for Vms_Add_Missing_Braces
  */
-static const char* apzVms_Use_Pragma_Extern_ModelPatch[] = {
+static const char* apzVms_Add_Missing_BracesPatch[] = {
     "format",
-    "#if defined(__DECC) || defined(__DECCXX) || defined(__GNUC__)\n\
-# pragma extern_model __save\n",
+    "%1 {%2} ",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Vms_Disable_Decc_String_Builtins fix
+ *  Description of Vms_Decc_Builtin fix
  */
-tSCC zVms_Disable_Decc_String_BuiltinsName[] =
-     "vms_disable_decc_string_builtins";
+tSCC zVms_Decc_BuiltinName[] =
+     "vms_decc_builtin";
 
 /*
  *  File name selection pattern
  */
-tSCC zVms_Disable_Decc_String_BuiltinsList[] =
-  "rtldef/string.h\0";
+tSCC zVms_Decc_BuiltinList[] =
+  "rtldef/string.h\0rtldef/time.h\0rtldef/strings.h\0rtldef/socket.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzVms_Disable_Decc_String_BuiltinsMachs[] = {
+tSCC* apzVms_Decc_BuiltinMachs[] = {
         "*-*-*vms*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zVms_Disable_Decc_String_BuiltinsSelect0[] =
-       "#if !defined\\(__VAX\\)\n";
+tSCC zVms_Decc_BuiltinSelect0[] =
+       "(__MEMSET|__MEMMOVE|__MEMCPY|__STRLEN|__STRCPY)";
 
-#define    VMS_DISABLE_DECC_STRING_BUILTINS_TEST_CT  1
-static tTestDesc aVms_Disable_Decc_String_BuiltinsTests[] = {
-  { TT_EGREP,    zVms_Disable_Decc_String_BuiltinsSelect0, (regex_t*)NULL }, };
+#define    VMS_DECC_BUILTIN_TEST_CT  1
+static tTestDesc aVms_Decc_BuiltinTests[] = {
+  { TT_EGREP,    zVms_Decc_BuiltinSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Vms_Disable_Decc_String_Builtins
+ *  Fix Command Arguments for Vms_Decc_Builtin
  */
-static const char* apzVms_Disable_Decc_String_BuiltinsPatch[] = {
-    "format",
-    "#if !defined(__VAX) && !defined(__GNUC__)\n",
+static const char* apzVms_Decc_BuiltinPatch[] = { sed_cmd_z,
+    "-e", "s@__MEMSET@memset@",
+    "-e", "s@__MEMMOVE@memmove@",
+    "-e", "s@__MEMCPY@memcpy@",
+    "-e", "s@__STRLEN@strlen@",
+    "-e", "s@__STRCPY@strcpy@",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Vms_Use_Quoted_Include fix
+ *  Description of Vms_Define_Can_Use_Extern_Prefix fix
  */
-tSCC zVms_Use_Quoted_IncludeName[] =
-     "vms_use_quoted_include";
+tSCC zVms_Define_Can_Use_Extern_PrefixName[] =
+     "vms_define_can_use_extern_prefix";
 
 /*
  *  File name selection pattern
  */
-tSCC zVms_Use_Quoted_IncludeList[] =
-  "rtldef/wait.h\0starlet_c/pthread.h\0";
+tSCC zVms_Define_Can_Use_Extern_PrefixList[] =
+  "rtldef/decc$types.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzVms_Use_Quoted_IncludeMachs[] = {
+tSCC* apzVms_Define_Can_Use_Extern_PrefixMachs[] = {
         "*-*-*vms*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zVms_Use_Quoted_IncludeSelect0[] =
-       "(#[ \t]*include[ \t]+)<(resource|builtins)\\.h>";
+tSCC zVms_Define_Can_Use_Extern_PrefixSelect0[] =
+       "#[ \t]*else\n\
+#[ \t]*if defined\\(__DECCXX\\)\n\
+#[ \t]*define __CAN_USE_EXTERN_PREFIX 1\n";
 
-#define    VMS_USE_QUOTED_INCLUDE_TEST_CT  1
-static tTestDesc aVms_Use_Quoted_IncludeTests[] = {
-  { TT_EGREP,    zVms_Use_Quoted_IncludeSelect0, (regex_t*)NULL }, };
+#define    VMS_DEFINE_CAN_USE_EXTERN_PREFIX_TEST_CT  1
+static tTestDesc aVms_Define_Can_Use_Extern_PrefixTests[] = {
+  { TT_EGREP,    zVms_Define_Can_Use_Extern_PrefixSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Vms_Use_Quoted_Include
+ *  Fix Command Arguments for Vms_Define_Can_Use_Extern_Prefix
  */
-static const char* apzVms_Use_Quoted_IncludePatch[] = {
+static const char* apzVms_Define_Can_Use_Extern_PrefixPatch[] = {
     "format",
-    "%1<sys/%2.h>",
+    "%0#    elif defined (__GNUC__)\n\
+#\tdefine __CAN_USE_EXTERN_PREFIX 1\n",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Vms_Add_Missing_Braces fix
+ *  Description of Vms_Disable_Decc_String_Builtins fix
  */
-tSCC zVms_Add_Missing_BracesName[] =
-     "vms_add_missing_braces";
+tSCC zVms_Disable_Decc_String_BuiltinsName[] =
+     "vms_disable_decc_string_builtins";
 
 /*
  *  File name selection pattern
  */
-tSCC zVms_Add_Missing_BracesList[] =
-  "rtldef/signal.h\0";
+tSCC zVms_Disable_Decc_String_BuiltinsList[] =
+  "rtldef/string.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzVms_Add_Missing_BracesMachs[] = {
+tSCC* apzVms_Disable_Decc_String_BuiltinsMachs[] = {
         "*-*-*vms*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zVms_Add_Missing_BracesSelect0[] =
-       "(_SIG_[A-Z]+_SET[ \t]+= \\{)(0x[0F]+, 0x[0F]+)";
+tSCC zVms_Disable_Decc_String_BuiltinsSelect0[] =
+       "#if !defined\\(__VAX\\)\n";
 
-#define    VMS_ADD_MISSING_BRACES_TEST_CT  1
-static tTestDesc aVms_Add_Missing_BracesTests[] = {
-  { TT_EGREP,    zVms_Add_Missing_BracesSelect0, (regex_t*)NULL }, };
+#define    VMS_DISABLE_DECC_STRING_BUILTINS_TEST_CT  1
+static tTestDesc aVms_Disable_Decc_String_BuiltinsTests[] = {
+  { TT_EGREP,    zVms_Disable_Decc_String_BuiltinsSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Vms_Add_Missing_Braces
+ *  Fix Command Arguments for Vms_Disable_Decc_String_Builtins
  */
-static const char* apzVms_Add_Missing_BracesPatch[] = {
+static const char* apzVms_Disable_Decc_String_BuiltinsPatch[] = {
     "format",
-    "%1 {%2} ",
+    "#if !defined(__VAX) && !defined(__GNUC__)\n",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -8487,42 +9782,40 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Vms_Decc_Builtin fix
+ *  Description of Vms_Forward_Declare_Struct fix
  */
-tSCC zVms_Decc_BuiltinName[] =
-     "vms_decc_builtin";
+tSCC zVms_Forward_Declare_StructName[] =
+     "vms_forward_declare_struct";
 
 /*
  *  File name selection pattern
  */
-tSCC zVms_Decc_BuiltinList[] =
-  "rtldef/string.h\0rtldef/time.h\0rtldef/strings.h\0rtldef/socket.h\0";
+tSCC zVms_Forward_Declare_StructList[] =
+  "rtldef/if.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzVms_Decc_BuiltinMachs[] = {
+tSCC* apzVms_Forward_Declare_StructMachs[] = {
         "*-*-*vms*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zVms_Decc_BuiltinSelect0[] =
-       "(__MEMSET|__MEMMOVE|__MEMCPY|__STRLEN|__STRCPY)";
+tSCC zVms_Forward_Declare_StructSelect0[] =
+       "(/\\* forward decls for C\\+\\+ \\*/\n\
+)#ifdef __cplusplus\n";
 
-#define    VMS_DECC_BUILTIN_TEST_CT  1
-static tTestDesc aVms_Decc_BuiltinTests[] = {
-  { TT_EGREP,    zVms_Decc_BuiltinSelect0, (regex_t*)NULL }, };
+#define    VMS_FORWARD_DECLARE_STRUCT_TEST_CT  1
+static tTestDesc aVms_Forward_Declare_StructTests[] = {
+  { TT_EGREP,    zVms_Forward_Declare_StructSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Vms_Decc_Builtin
+ *  Fix Command Arguments for Vms_Forward_Declare_Struct
  */
-static const char* apzVms_Decc_BuiltinPatch[] = { sed_cmd_z,
-    "-e", "s@__MEMSET@memset@",
-    "-e", "s@__MEMMOVE@memmove@",
-    "-e", "s@__MEMCPY@memcpy@",
-    "-e", "s@__STRLEN@strlen@",
-    "-e", "s@__STRCPY@strcpy@",
+static const char* apzVms_Forward_Declare_StructPatch[] = {
+    "format",
+    "%1#if defined (__cplusplus) || defined (__GNUC__)\n",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -8565,77 +9858,114 @@
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Vms_Forward_Declare_Struct fix
+ *  Description of Vms_Use_Fast_Setjmp fix
  */
-tSCC zVms_Forward_Declare_StructName[] =
-     "vms_forward_declare_struct";
+tSCC zVms_Use_Fast_SetjmpName[] =
+     "vms_use_fast_setjmp";
 
 /*
  *  File name selection pattern
  */
-tSCC zVms_Forward_Declare_StructList[] =
-  "rtldef/if.h\0";
+tSCC zVms_Use_Fast_SetjmpList[] =
+  "rtldef/setjmp.h\0";
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzVms_Forward_Declare_StructMachs[] = {
+tSCC* apzVms_Use_Fast_SetjmpMachs[] = {
         "*-*-*vms*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zVms_Forward_Declare_StructSelect0[] =
-       "(/\\* forward decls for C\\+\\+ \\*/\n\
-)#ifdef __cplusplus\n";
+tSCC zVms_Use_Fast_SetjmpSelect0[] =
+       "(#[ \t]*if[ \t]*defined\\(__FAST_SETJMP\\)[ \t]*\\|\\|)";
 
-#define    VMS_FORWARD_DECLARE_STRUCT_TEST_CT  1
-static tTestDesc aVms_Forward_Declare_StructTests[] = {
-  { TT_EGREP,    zVms_Forward_Declare_StructSelect0, (regex_t*)NULL }, };
+#define    VMS_USE_FAST_SETJMP_TEST_CT  1
+static tTestDesc aVms_Use_Fast_SetjmpTests[] = {
+  { TT_EGREP,    zVms_Use_Fast_SetjmpSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Vms_Forward_Declare_Struct
+ *  Fix Command Arguments for Vms_Use_Fast_Setjmp
  */
-static const char* apzVms_Forward_Declare_StructPatch[] = {
+static const char* apzVms_Use_Fast_SetjmpPatch[] = {
     "format",
-    "%1#if defined (__cplusplus) || defined (__GNUC__)\n",
+    "%0 defined (__GNUC__) ||",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
- *  Description of Vms_Use_Fast_Setjmp fix
+ *  Description of Vms_Use_Pragma_Extern_Model fix
  */
-tSCC zVms_Use_Fast_SetjmpName[] =
-     "vms_use_fast_setjmp";
+tSCC zVms_Use_Pragma_Extern_ModelName[] =
+     "vms_use_pragma_extern_model";
 
 /*
  *  File name selection pattern
  */
-tSCC zVms_Use_Fast_SetjmpList[] =
-  "rtldef/setjmp.h\0";
+#define zVms_Use_Pragma_Extern_ModelList (char*)NULL
 /*
  *  Machine/OS name selection pattern
  */
-tSCC* apzVms_Use_Fast_SetjmpMachs[] = {
+tSCC* apzVms_Use_Pragma_Extern_ModelMachs[] = {
         "*-*-*vms*",
         (const char*)NULL };
 
 /*
  *  content selection pattern - do fix if pattern found
  */
-tSCC zVms_Use_Fast_SetjmpSelect0[] =
-       "(#[ \t]*if[ \t]*defined\\(__FAST_SETJMP\\)[ \t]*\\|\\|)";
+tSCC zVms_Use_Pragma_Extern_ModelSelect0[] =
+       "#if defined\\(__DECC\\) \\|\\| defined\\(__DECCXX\\)\n\
+# pragma extern_model __save\n";
 
-#define    VMS_USE_FAST_SETJMP_TEST_CT  1
-static tTestDesc aVms_Use_Fast_SetjmpTests[] = {
-  { TT_EGREP,    zVms_Use_Fast_SetjmpSelect0, (regex_t*)NULL }, };
+#define    VMS_USE_PRAGMA_EXTERN_MODEL_TEST_CT  1
+static tTestDesc aVms_Use_Pragma_Extern_ModelTests[] = {
+  { TT_EGREP,    zVms_Use_Pragma_Extern_ModelSelect0, (regex_t*)NULL }, };
 
 /*
- *  Fix Command Arguments for Vms_Use_Fast_Setjmp
+ *  Fix Command Arguments for Vms_Use_Pragma_Extern_Model
  */
-static const char* apzVms_Use_Fast_SetjmpPatch[] = {
+static const char* apzVms_Use_Pragma_Extern_ModelPatch[] = {
     "format",
-    "%0 defined (__GNUC__) ||",
+    "#if defined(__DECC) || defined(__DECCXX) || defined(__GNUC__)\n\
+# pragma extern_model __save\n",
+    (char*)NULL };
+
+/* * * * * * * * * * * * * * * * * * * * * * * * * *
+ *
+ *  Description of Vms_Use_Quoted_Include fix
+ */
+tSCC zVms_Use_Quoted_IncludeName[] =
+     "vms_use_quoted_include";
+
+/*
+ *  File name selection pattern
+ */
+tSCC zVms_Use_Quoted_IncludeList[] =
+  "rtldef/wait.h\0starlet_c/pthread.h\0";
+/*
+ *  Machine/OS name selection pattern
+ */
+tSCC* apzVms_Use_Quoted_IncludeMachs[] = {
+        "*-*-*vms*",
+        (const char*)NULL };
+
+/*
+ *  content selection pattern - do fix if pattern found
+ */
+tSCC zVms_Use_Quoted_IncludeSelect0[] =
+       "(#[ \t]*include[ \t]+)<(resource|builtins)\\.h>";
+
+#define    VMS_USE_QUOTED_INCLUDE_TEST_CT  1
+static tTestDesc aVms_Use_Quoted_IncludeTests[] = {
+  { TT_EGREP,    zVms_Use_Quoted_IncludeSelect0, (regex_t*)NULL }, };
+
+/*
+ *  Fix Command Arguments for Vms_Use_Quoted_Include
+ */
+static const char* apzVms_Use_Quoted_IncludePatch[] = {
+    "format",
+    "%1<sys/%2.h>",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -8680,7 +10010,17 @@
  */
 static const char* apzVoid_NullPatch[] = {
     "format",
-    "#define NULL 0",
+    "#ifndef NULL\n\
+#ifdef __cplusplus\n\
+#ifdef __GNUG__\n\
+#define NULL __null\n\
+#else /* ! __GNUG__  */\n\
+#define NULL 0L\n\
+#endif /* __GNUG__  */\n\
+#else /* ! __cplusplus  */\n\
+#define NULL ((void *)0)\n\
+#endif /* __cplusplus  */\n\
+#endif /* !NULL  */",
     (char*)NULL };
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
@@ -9158,116 +10498,14 @@
 #endif /* !defined __STDC__ */",
     (char*)NULL };
 
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
- *  Description of Feraiseexcept_Nosse_Invalid fix
- */
-tSCC zFeraiseexcept_Nosse_InvalidName[] =
-     "feraiseexcept_nosse_invalid";
-
-/*
- *  File name selection pattern
- */
-tSCC zFeraiseexcept_Nosse_InvalidList[] =
-  "bits/fenv.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-tSCC* apzFeraiseexcept_Nosse_InvalidMachs[] = {
-        "i[34567]86-*-linux*",
-        "x86*-linux*",
-        "amd64-*-linux*",
-        (const char*)NULL };
-
-/*
- *  content selection pattern - do fix if pattern found
- */
-tSCC zFeraiseexcept_Nosse_InvalidSelect0[] =
-       "^([\t ]*)__asm__ __volatile__ \\(\"divss %0, %0 *\" : : \"x\" \\(__f\\)\\);$";
-
-/*
- *  content bypass pattern - skip fix if pattern found
- */
-tSCC zFeraiseexcept_Nosse_InvalidBypass0[] =
-       "\"fdiv .*; fwait\"";
-
-#define    FERAISEEXCEPT_NOSSE_INVALID_TEST_CT  2
-static tTestDesc aFeraiseexcept_Nosse_InvalidTests[] = {
-  { TT_NEGREP,   zFeraiseexcept_Nosse_InvalidBypass0, (regex_t*)NULL },
-  { TT_EGREP,    zFeraiseexcept_Nosse_InvalidSelect0, (regex_t*)NULL }, };
-
-/*
- *  Fix Command Arguments for Feraiseexcept_Nosse_Invalid
- */
-static const char* apzFeraiseexcept_Nosse_InvalidPatch[] = {
-    "format",
-    "# ifdef __SSE_MATH__\n\
-%0\n\
-# else\n\
-%1__asm__ __volatile__ (\"fdiv %%%%st, %%%%st(0); fwait\"\n\
-%1\t\t\t: \"=t\" (__f) : \"0\" (__f));\n\
-# endif",
-    (char*)NULL };
-
-/* * * * * * * * * * * * * * * * * * * * * * * * * *
- *
- *  Description of Feraiseexcept_Nosse_Divbyzero fix
- */
-tSCC zFeraiseexcept_Nosse_DivbyzeroName[] =
-     "feraiseexcept_nosse_divbyzero";
-
-/*
- *  File name selection pattern
- */
-tSCC zFeraiseexcept_Nosse_DivbyzeroList[] =
-  "bits/fenv.h\0";
-/*
- *  Machine/OS name selection pattern
- */
-tSCC* apzFeraiseexcept_Nosse_DivbyzeroMachs[] = {
-        "i[34567]86-*-linux*",
-        "x86*-linux*",
-        "amd64-*-linux*",
-        (const char*)NULL };
-
-/*
- *  content selection pattern - do fix if pattern found
- */
-tSCC zFeraiseexcept_Nosse_DivbyzeroSelect0[] =
-       "^([\t ]*)__asm__ __volatile__ \\(\"divss %1, %0 *\" : : \"x\" \\(__f\\), \"x\" \\(__g\\)\\);$";
-
-/*
- *  content bypass pattern - skip fix if pattern found
- */
-tSCC zFeraiseexcept_Nosse_DivbyzeroBypass0[] =
-       "\"fdivp .*; fwait\"";
-
-#define    FERAISEEXCEPT_NOSSE_DIVBYZERO_TEST_CT  2
-static tTestDesc aFeraiseexcept_Nosse_DivbyzeroTests[] = {
-  { TT_NEGREP,   zFeraiseexcept_Nosse_DivbyzeroBypass0, (regex_t*)NULL },
-  { TT_EGREP,    zFeraiseexcept_Nosse_DivbyzeroSelect0, (regex_t*)NULL }, };
-
-/*
- *  Fix Command Arguments for Feraiseexcept_Nosse_Divbyzero
- */
-static const char* apzFeraiseexcept_Nosse_DivbyzeroPatch[] = {
-    "format",
-    "# ifdef __SSE_MATH__\n\
-%0\n\
-# else\n\
-%1__asm__ __volatile__ (\"fdivp %%%%st, %%%%st(1); fwait\"\n\
-%1\t\t\t: \"=t\" (__f) : \"0\" (__f), \"u\" (__g) : \"st(1)\");\n\
-# endif",
-    (char*)NULL };
-
 
 /* * * * * * * * * * * * * * * * * * * * * * * * * *
  *
  *  List of all fixes
  */
-#define REGEX_COUNT          264
+#define REGEX_COUNT          295
 #define MACH_LIST_SIZE_LIMIT 187
-#define FIX_COUNT            226
+#define FIX_COUNT            259
 
 /*
  *  Enumerate the fixes
@@ -9283,11 +10521,15 @@
     AAB_SUN_MEMCPY_FIXIDX,
     AAB_VXWORKS_ASSERT_FIXIDX,
     AAB_VXWORKS_REGS_VXTYPES_FIXIDX,
-    AAB_VXWORKS_STDINT_FIXIDX,
     AAB_VXWORKS_UNISTD_FIXIDX,
+    AIX_ASSERT_FIXIDX,
     AIX_COMPLEX_FIXIDX,
+    AIX_EXTERNC_FIXIDX,
+    AIX_EXTERNCPP1_FIXIDX,
+    AIX_EXTERNCPP2_FIXIDX,
     AIX_MALLOC_FIXIDX,
     AIX_NET_IF_ARP_FIXIDX,
+    AIX_NULL_FIXIDX,
     AIX_ONCE_INIT_1_FIXIDX,
     AIX_ONCE_INIT_2_FIXIDX,
     AIX_MUTEX_INITIALIZER_1_FIXIDX,
@@ -9299,6 +10541,14 @@
     AIX_STDINT_3_FIXIDX,
     AIX_STDINT_4_FIXIDX,
     AIX_STDINT_5_FIXIDX,
+    AIX_STDIO_INLINE_FIXIDX,
+    AIX_STDLIB_MALLOC_FIXIDX,
+    AIX_STDLIB_REALLOC_FIXIDX,
+    AIX_STDLIB_CALLOC_FIXIDX,
+    AIX_STDLIB_VALLOC_FIXIDX,
+    AIX_STDLIB_VEC_MALLOC_FIXIDX,
+    AIX_STDLIB_VEC_CALLOC_FIXIDX,
+    AIX_STRTOF_CONST_FIXIDX,
     AIX_SYSMACHINE_FIXIDX,
     AIX_SYSWAIT_2_FIXIDX,
     AIX_VOLATILE_FIXIDX,
@@ -9318,13 +10568,17 @@
     BROKEN_CABS_FIXIDX,
     BROKEN_NAN_FIXIDX,
     BSD_STDIO_ATTRS_CONFLICT_FIXIDX,
-    CDEF_CPLUSPLUS_FIXIDX,
     CTRL_QUOTES_DEF_FIXIDX,
     CTRL_QUOTES_USE_FIXIDX,
     CXX_UNREADY_FIXIDX,
+    DARWIN_AVAILABILITYINTERNAL_FIXIDX,
     DARWIN_9_LONG_DOUBLE_FUNCS_2_FIXIDX,
     DARWIN_EXTERNC_FIXIDX,
     DARWIN_GCC4_BREAKAGE_FIXIDX,
+    DARWIN_LONGJMP_NORETURN_FIXIDX,
+    DARWIN_OS_TRACE_1_FIXIDX,
+    DARWIN_OS_TRACE_2_FIXIDX,
+    DARWIN_OS_TRACE_3_FIXIDX,
     DARWIN_PRIVATE_EXTERN_FIXIDX,
     DARWIN_STDINT_1_FIXIDX,
     DARWIN_STDINT_2_FIXIDX,
@@ -9336,6 +10590,8 @@
     DEC_INTERN_ASM_FIXIDX,
     DJGPP_WCHAR_H_FIXIDX,
     ECD_CURSOR_FIXIDX,
+    FERAISEEXCEPT_NOSSE_DIVBYZERO_FIXIDX,
+    FERAISEEXCEPT_NOSSE_INVALID_FIXIDX,
     FREEBSD_GCC3_BREAKAGE_FIXIDX,
     FREEBSD_GCC4_BREAKAGE_FIXIDX,
     GLIBC_C99_INLINE_1_FIXIDX,
@@ -9356,29 +10612,34 @@
     HPUX10_CTYPE_DECLARATIONS1_FIXIDX,
     HPUX10_CTYPE_DECLARATIONS2_FIXIDX,
     HPUX10_STDIO_DECLARATIONS_FIXIDX,
+    HPPA_HPUX11_ALLOCA_FIXIDX,
     HPUX11_ABS_FIXIDX,
+    HPUX11_LWP_RWLOCK_VALID_FIXIDX,
+    HPUX11_EXTERN_SENDFILE_FIXIDX,
+    HPUX11_EXTERN_SENDPATH_FIXIDX,
     HPUX11_FABSF_FIXIDX,
+    HPUX11_PTHREAD_POINTER_FIXIDX,
     HPUX11_PTHREAD_CONST_FIXIDX,
     HPUX11_SIZE_T_FIXIDX,
     HPUX11_SNPRINTF_FIXIDX,
     HPUX11_VSNPRINTF_FIXIDX,
+    HPUX_VSSCANF_FIXIDX,
     HPUX8_BOGUS_INLINES_FIXIDX,
+    HPUX_C99_INTPTR_FIXIDX,
+    HPUX_C99_INTTYPES_FIXIDX,
+    HPUX_C99_INTTYPES2_FIXIDX,
     HPUX_CTYPE_MACROS_FIXIDX,
+    HPUX_EXTERN_ERRNO_FIXIDX,
     HPUX_HTONL_FIXIDX,
+    HPUX_IMAGINARY_I_FIXIDX,
+    HPUX_INTTYPE_INT8_T_FIXIDX,
     HPUX_LONG_DOUBLE_FIXIDX,
     HPUX_LONG_DOUBLE_2_FIXIDX,
-    HPUX_SYSTIME_FIXIDX,
-    HPUX_SPU_INFO_FIXIDX,
-    HPUX11_EXTERN_SENDFILE_FIXIDX,
-    HPUX11_EXTERN_SENDPATH_FIXIDX,
-    HPUX_EXTERN_ERRNO_FIXIDX,
     HPUX_PTHREAD_INITIALIZERS_FIXIDX,
-    HPUX_C99_INTPTR_FIXIDX,
-    HPUX_C99_INTTYPES_FIXIDX,
-    HPUX_C99_INTTYPES2_FIXIDX,
+    HPUX_SPU_INFO_FIXIDX,
     HPUX_STDINT_LEAST_FAST_FIXIDX,
-    HPUX_INTTYPE_INT8_T_FIXIDX,
-    HPUX_IMAGINARY_I_FIXIDX,
+    HPUX_LONGJMP_FIXIDX,
+    HPUX_SYSTIME_FIXIDX,
     HUGE_VAL_HEX_FIXIDX,
     HUGE_VALF_HEX_FIXIDX,
     HUGE_VALL_HEX_FIXIDX,
@@ -9386,8 +10647,18 @@
     IO_QUOTES_DEF_FIXIDX,
     IO_QUOTES_USE_FIXIDX,
     IP_MISSING_SEMI_FIXIDX,
-    IRIX_LIMITS_CONST_FIXIDX,
     IRIX_STDIO_VA_LIST_FIXIDX,
+    IRIX___RESTRICT_FIXIDX,
+    IRIX___GENERIC1_FIXIDX,
+    IRIX___GENERIC2_FIXIDX,
+    IRIX_COMPLEX_FIXIDX,
+    IRIX_LIMITS_CONST_FIXIDX,
+    IRIX_PTHREAD_INIT_FIXIDX,
+    IRIX_SOCKLEN_T_FIXIDX,
+    IRIX_STDINT_C99_MODE_FIXIDX,
+    IRIX_STDINT_C99_TYPES_FIXIDX,
+    IRIX_STDINT_C99_MACROS_FIXIDX,
+    IRIX_WCSFTIME_FIXIDX,
     KANDR_CONCAT_FIXIDX,
     LINUX_IA64_UCONTEXT_FIXIDX,
     LYNXOS_NO_WARNING_IN_SYS_TIME_H_FIXIDX,
@@ -9424,28 +10695,29 @@
     SOLARIS_COMPLEX_CXX_FIXIDX,
     SOLARIS_CXX_LINKAGE_FIXIDX,
     SOLARIS_GETC_STRICT_STDC_FIXIDX,
-    SOLARIS_LONGJMP_NORETURN_FIXIDX,
+    SOLARIS_GETS_C11_FIXIDX,
+    SOLARIS_GETS_CXX14_FIXIDX,
+    SOLARIS_INT_CONST_FIXIDX,
+    SOLARIS_INT_LIMITS_1_FIXIDX,
+    SOLARIS_INT_LIMITS_2_FIXIDX,
+    SOLARIS_INT_LIMITS_3_FIXIDX,
     SOLARIS_MATH_1_FIXIDX,
+    SOLARIS_MATH_10_FIXIDX,
     SOLARIS_MATH_2_FIXIDX,
     SOLARIS_MATH_3_FIXIDX,
     SOLARIS_MATH_4_FIXIDX,
     SOLARIS_MATH_8_FIXIDX,
     SOLARIS_MATH_9_FIXIDX,
-    SOLARIS_MATH_10_FIXIDX,
-    SOLARIS_MUTEX_INIT_2_FIXIDX,
-    SOLARIS_POW_INT_OVERLOAD_FIXIDX,
-    SOLARIS_RWLOCK_INIT_1_FIXIDX,
+    SOLARIS_MATH_11_FIXIDX,
+    SOLARIS_MATH_12_FIXIDX,
     SOLARIS_ONCE_INIT_1_FIXIDX,
-    SOLARIS_ONCE_INIT_2_FIXIDX,
-    SOLARIS_INT_CONST_FIXIDX,
-    SOLARIS_INT_LIMITS_1_FIXIDX,
-    SOLARIS_INT_LIMITS_2_FIXIDX,
-    SOLARIS_INT_LIMITS_3_FIXIDX,
-    SOLARIS_INT_TYPES_FIXIDX,
     SOLARIS_POSIX_SPAWN_RESTRICT_FIXIDX,
+    SOLARIS_POW_INT_OVERLOAD_FIXIDX,
+    SOLARIS_RWLOCK_INIT_1_FIXIDX,
     SOLARIS_STD___FILBUF_FIXIDX,
+    SOLARIS_STD_GETS_CXX14_FIXIDX,
     SOLARIS_STDIO_TAG_FIXIDX,
-    SOLARIS_SYS_VA_LIST_FIXIDX,
+    SOLARIS_STDLIB_NORETURN_FIXIDX,
     STATSSWTCH_FIXIDX,
     STDIO_STDARG_H_FIXIDX,
     STDIO_VA_LIST_FIXIDX,
@@ -9462,6 +10734,7 @@
     SUN_RUSERS_SEMI_FIXIDX,
     SUN_SIGNAL_FIXIDX,
     SUNOS_STRLEN_FIXIDX,
+    SUSE_LINUX_VT_CXX_FIXIDX,
     SVR4_DISABLE_OPT_FIXIDX,
     SVR4_GETCWD_FIXIDX,
     SVR4_PROFIL_FIXIDX,
@@ -9474,16 +10747,16 @@
     ULTRIX_CONST_FIXIDX,
     ULTRIX_CONST2_FIXIDX,
     VA_I960_MACRO_FIXIDX,
+    VMS_ADD_MISSING_BRACES_FIXIDX,
+    VMS_DECC_BUILTIN_FIXIDX,
     VMS_DEFINE_CAN_USE_EXTERN_PREFIX_FIXIDX,
-    VMS_USE_PRAGMA_EXTERN_MODEL_FIXIDX,
     VMS_DISABLE_DECC_STRING_BUILTINS_FIXIDX,
-    VMS_USE_QUOTED_INCLUDE_FIXIDX,
-    VMS_ADD_MISSING_BRACES_FIXIDX,
     VMS_DO_NOT_REDECLARE_HOSTALIAS_FIXIDX,
-    VMS_DECC_BUILTIN_FIXIDX,
-    VMS_NO_64BIT_GETOPT_FIXIDX,
     VMS_FORWARD_DECLARE_STRUCT_FIXIDX,
+    VMS_NO_64BIT_GETOPT_FIXIDX,
     VMS_USE_FAST_SETJMP_FIXIDX,
+    VMS_USE_PRAGMA_EXTERN_MODEL_FIXIDX,
+    VMS_USE_QUOTED_INCLUDE_FIXIDX,
     VOID_NULL_FIXIDX,
     VXWORKS_GCC_PROBLEM_FIXIDX,
     VXWORKS_IOCTL_MACRO_FIXIDX,
@@ -9496,9 +10769,7 @@
     X11_CLASS_FIXIDX,
     X11_CLASS_USAGE_FIXIDX,
     X11_NEW_FIXIDX,
-    X11_SPRINTF_FIXIDX,
-    FERAISEEXCEPT_NOSSE_INVALID_FIXIDX,
-    FERAISEEXCEPT_NOSSE_DIVBYZERO_FIXIDX
+    X11_SPRINTF_FIXIDX
 } t_fixinc_idx;
 
 tFixDesc fixDescList[ FIX_COUNT ] = {
@@ -9552,21 +10823,36 @@
      AAB_VXWORKS_REGS_VXTYPES_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
      aAab_Vxworks_Regs_VxtypesTests,   apzAab_Vxworks_Regs_VxtypesPatch, 0 },
 
-  {  zAab_Vxworks_StdintName,    zAab_Vxworks_StdintList,
-     apzAab_Vxworks_StdintMachs,
-     AAB_VXWORKS_STDINT_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
-     aAab_Vxworks_StdintTests,   apzAab_Vxworks_StdintPatch, 0 },
-
   {  zAab_Vxworks_UnistdName,    zAab_Vxworks_UnistdList,
      apzAab_Vxworks_UnistdMachs,
      AAB_VXWORKS_UNISTD_TEST_CT, FD_MACH_ONLY | FD_REPLACEMENT,
      aAab_Vxworks_UnistdTests,   apzAab_Vxworks_UnistdPatch, 0 },
 
+  {  zAix_AssertName,    zAix_AssertList,
+     apzAix_AssertMachs,
+     AIX_ASSERT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_AssertTests,   apzAix_AssertPatch, 0 },
+
   {  zAix_ComplexName,    zAix_ComplexList,
      apzAix_ComplexMachs,
      AIX_COMPLEX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aAix_ComplexTests,   apzAix_ComplexPatch, 0 },
 
+  {  zAix_ExterncName,    zAix_ExterncList,
+     apzAix_ExterncMachs,
+     AIX_EXTERNC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_ExterncTests,   apzAix_ExterncPatch, 0 },
+
+  {  zAix_Externcpp1Name,    zAix_Externcpp1List,
+     apzAix_Externcpp1Machs,
+     AIX_EXTERNCPP1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_Externcpp1Tests,   apzAix_Externcpp1Patch, 0 },
+
+  {  zAix_Externcpp2Name,    zAix_Externcpp2List,
+     apzAix_Externcpp2Machs,
+     AIX_EXTERNCPP2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_Externcpp2Tests,   apzAix_Externcpp2Patch, 0 },
+
   {  zAix_MallocName,    zAix_MallocList,
      apzAix_MallocMachs,
      AIX_MALLOC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
@@ -9577,6 +10863,11 @@
      AIX_NET_IF_ARP_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aAix_Net_If_ArpTests,   apzAix_Net_If_ArpPatch, 0 },
 
+  {  zAix_NullName,    zAix_NullList,
+     apzAix_NullMachs,
+     AIX_NULL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_NullTests,   apzAix_NullPatch, 0 },
+
   {  zAix_Once_Init_1Name,    zAix_Once_Init_1List,
      apzAix_Once_Init_1Machs,
      AIX_ONCE_INIT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
@@ -9632,6 +10923,46 @@
      AIX_STDINT_5_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aAix_Stdint_5Tests,   apzAix_Stdint_5Patch, 0 },
 
+  {  zAix_Stdio_InlineName,    zAix_Stdio_InlineList,
+     apzAix_Stdio_InlineMachs,
+     AIX_STDIO_INLINE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_Stdio_InlineTests,   apzAix_Stdio_InlinePatch, 0 },
+
+  {  zAix_Stdlib_MallocName,    zAix_Stdlib_MallocList,
+     apzAix_Stdlib_MallocMachs,
+     AIX_STDLIB_MALLOC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_Stdlib_MallocTests,   apzAix_Stdlib_MallocPatch, 0 },
+
+  {  zAix_Stdlib_ReallocName,    zAix_Stdlib_ReallocList,
+     apzAix_Stdlib_ReallocMachs,
+     AIX_STDLIB_REALLOC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_Stdlib_ReallocTests,   apzAix_Stdlib_ReallocPatch, 0 },
+
+  {  zAix_Stdlib_CallocName,    zAix_Stdlib_CallocList,
+     apzAix_Stdlib_CallocMachs,
+     AIX_STDLIB_CALLOC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_Stdlib_CallocTests,   apzAix_Stdlib_CallocPatch, 0 },
+
+  {  zAix_Stdlib_VallocName,    zAix_Stdlib_VallocList,
+     apzAix_Stdlib_VallocMachs,
+     AIX_STDLIB_VALLOC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_Stdlib_VallocTests,   apzAix_Stdlib_VallocPatch, 0 },
+
+  {  zAix_Stdlib_Vec_MallocName,    zAix_Stdlib_Vec_MallocList,
+     apzAix_Stdlib_Vec_MallocMachs,
+     AIX_STDLIB_VEC_MALLOC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_Stdlib_Vec_MallocTests,   apzAix_Stdlib_Vec_MallocPatch, 0 },
+
+  {  zAix_Stdlib_Vec_CallocName,    zAix_Stdlib_Vec_CallocList,
+     apzAix_Stdlib_Vec_CallocMachs,
+     AIX_STDLIB_VEC_CALLOC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_Stdlib_Vec_CallocTests,   apzAix_Stdlib_Vec_CallocPatch, 0 },
+
+  {  zAix_Strtof_ConstName,    zAix_Strtof_ConstList,
+     apzAix_Strtof_ConstMachs,
+     AIX_STRTOF_CONST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aAix_Strtof_ConstTests,   apzAix_Strtof_ConstPatch, 0 },
+
   {  zAix_SysmachineName,    zAix_SysmachineList,
      apzAix_SysmachineMachs,
      AIX_SYSMACHINE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
@@ -9727,11 +11058,6 @@
      BSD_STDIO_ATTRS_CONFLICT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aBsd_Stdio_Attrs_ConflictTests,   apzBsd_Stdio_Attrs_ConflictPatch, 0 },
 
-  {  zCdef_CplusplusName,    zCdef_CplusplusList,
-     apzCdef_CplusplusMachs,
-     CDEF_CPLUSPLUS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aCdef_CplusplusTests,   apzCdef_CplusplusPatch, 0 },
-
   {  zCtrl_Quotes_DefName,    zCtrl_Quotes_DefList,
      apzCtrl_Quotes_DefMachs,
      CTRL_QUOTES_DEF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
@@ -9747,6 +11073,11 @@
      CXX_UNREADY_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aCxx_UnreadyTests,   apzCxx_UnreadyPatch, 0 },
 
+  {  zDarwin_AvailabilityinternalName,    zDarwin_AvailabilityinternalList,
+     apzDarwin_AvailabilityinternalMachs,
+     DARWIN_AVAILABILITYINTERNAL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aDarwin_AvailabilityinternalTests,   apzDarwin_AvailabilityinternalPatch, 0 },
+
   {  zDarwin_9_Long_Double_Funcs_2Name,    zDarwin_9_Long_Double_Funcs_2List,
      apzDarwin_9_Long_Double_Funcs_2Machs,
      DARWIN_9_LONG_DOUBLE_FUNCS_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
@@ -9762,6 +11093,26 @@
      DARWIN_GCC4_BREAKAGE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aDarwin_Gcc4_BreakageTests,   apzDarwin_Gcc4_BreakagePatch, 0 },
 
+  {  zDarwin_Longjmp_NoreturnName,    zDarwin_Longjmp_NoreturnList,
+     apzDarwin_Longjmp_NoreturnMachs,
+     DARWIN_LONGJMP_NORETURN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aDarwin_Longjmp_NoreturnTests,   apzDarwin_Longjmp_NoreturnPatch, 0 },
+
+  {  zDarwin_Os_Trace_1Name,    zDarwin_Os_Trace_1List,
+     apzDarwin_Os_Trace_1Machs,
+     DARWIN_OS_TRACE_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aDarwin_Os_Trace_1Tests,   apzDarwin_Os_Trace_1Patch, 0 },
+
+  {  zDarwin_Os_Trace_2Name,    zDarwin_Os_Trace_2List,
+     apzDarwin_Os_Trace_2Machs,
+     DARWIN_OS_TRACE_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aDarwin_Os_Trace_2Tests,   apzDarwin_Os_Trace_2Patch, 0 },
+
+  {  zDarwin_Os_Trace_3Name,    zDarwin_Os_Trace_3List,
+     apzDarwin_Os_Trace_3Machs,
+     DARWIN_OS_TRACE_3_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aDarwin_Os_Trace_3Tests,   apzDarwin_Os_Trace_3Patch, 0 },
+
   {  zDarwin_Private_ExternName,    zDarwin_Private_ExternList,
      apzDarwin_Private_ExternMachs,
      DARWIN_PRIVATE_EXTERN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
@@ -9817,6 +11168,16 @@
      ECD_CURSOR_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aEcd_CursorTests,   apzEcd_CursorPatch, 0 },
 
+  {  zFeraiseexcept_Nosse_DivbyzeroName,    zFeraiseexcept_Nosse_DivbyzeroList,
+     apzFeraiseexcept_Nosse_DivbyzeroMachs,
+     FERAISEEXCEPT_NOSSE_DIVBYZERO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aFeraiseexcept_Nosse_DivbyzeroTests,   apzFeraiseexcept_Nosse_DivbyzeroPatch, 0 },
+
+  {  zFeraiseexcept_Nosse_InvalidName,    zFeraiseexcept_Nosse_InvalidList,
+     apzFeraiseexcept_Nosse_InvalidMachs,
+     FERAISEEXCEPT_NOSSE_INVALID_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aFeraiseexcept_Nosse_InvalidTests,   apzFeraiseexcept_Nosse_InvalidPatch, 0 },
+
   {  zFreebsd_Gcc3_BreakageName,    zFreebsd_Gcc3_BreakageList,
      apzFreebsd_Gcc3_BreakageMachs,
      FREEBSD_GCC3_BREAKAGE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
@@ -9917,16 +11278,41 @@
      HPUX10_STDIO_DECLARATIONS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aHpux10_Stdio_DeclarationsTests,   apzHpux10_Stdio_DeclarationsPatch, 0 },
 
+  {  zHppa_Hpux11_AllocaName,    zHppa_Hpux11_AllocaList,
+     apzHppa_Hpux11_AllocaMachs,
+     HPPA_HPUX11_ALLOCA_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHppa_Hpux11_AllocaTests,   apzHppa_Hpux11_AllocaPatch, 0 },
+
   {  zHpux11_AbsName,    zHpux11_AbsList,
      apzHpux11_AbsMachs,
      HPUX11_ABS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aHpux11_AbsTests,   apzHpux11_AbsPatch, 0 },
 
+  {  zHpux11_Lwp_Rwlock_ValidName,    zHpux11_Lwp_Rwlock_ValidList,
+     apzHpux11_Lwp_Rwlock_ValidMachs,
+     HPUX11_LWP_RWLOCK_VALID_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux11_Lwp_Rwlock_ValidTests,   apzHpux11_Lwp_Rwlock_ValidPatch, 0 },
+
+  {  zHpux11_Extern_SendfileName,    zHpux11_Extern_SendfileList,
+     apzHpux11_Extern_SendfileMachs,
+     HPUX11_EXTERN_SENDFILE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux11_Extern_SendfileTests,   apzHpux11_Extern_SendfilePatch, 0 },
+
+  {  zHpux11_Extern_SendpathName,    zHpux11_Extern_SendpathList,
+     apzHpux11_Extern_SendpathMachs,
+     HPUX11_EXTERN_SENDPATH_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux11_Extern_SendpathTests,   apzHpux11_Extern_SendpathPatch, 0 },
+
   {  zHpux11_FabsfName,    zHpux11_FabsfList,
      apzHpux11_FabsfMachs,
      HPUX11_FABSF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aHpux11_FabsfTests,   apzHpux11_FabsfPatch, 0 },
 
+  {  zHpux11_Pthread_PointerName,    zHpux11_Pthread_PointerList,
+     apzHpux11_Pthread_PointerMachs,
+     HPUX11_PTHREAD_POINTER_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux11_Pthread_PointerTests,   apzHpux11_Pthread_PointerPatch, 0 },
+
   {  zHpux11_Pthread_ConstName,    zHpux11_Pthread_ConstList,
      apzHpux11_Pthread_ConstMachs,
      HPUX11_PTHREAD_CONST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
@@ -9947,21 +11333,56 @@
      HPUX11_VSNPRINTF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aHpux11_VsnprintfTests,   apzHpux11_VsnprintfPatch, 0 },
 
+  {  zHpux_VsscanfName,    zHpux_VsscanfList,
+     apzHpux_VsscanfMachs,
+     HPUX_VSSCANF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux_VsscanfTests,   apzHpux_VsscanfPatch, 0 },
+
   {  zHpux8_Bogus_InlinesName,    zHpux8_Bogus_InlinesList,
      apzHpux8_Bogus_InlinesMachs,
      HPUX8_BOGUS_INLINES_TEST_CT, FD_MACH_ONLY,
      aHpux8_Bogus_InlinesTests,   apzHpux8_Bogus_InlinesPatch, 0 },
 
+  {  zHpux_C99_IntptrName,    zHpux_C99_IntptrList,
+     apzHpux_C99_IntptrMachs,
+     HPUX_C99_INTPTR_TEST_CT, FD_MACH_ONLY,
+     aHpux_C99_IntptrTests,   apzHpux_C99_IntptrPatch, 0 },
+
+  {  zHpux_C99_InttypesName,    zHpux_C99_InttypesList,
+     apzHpux_C99_InttypesMachs,
+     HPUX_C99_INTTYPES_TEST_CT, FD_MACH_ONLY,
+     aHpux_C99_InttypesTests,   apzHpux_C99_InttypesPatch, 0 },
+
+  {  zHpux_C99_Inttypes2Name,    zHpux_C99_Inttypes2List,
+     apzHpux_C99_Inttypes2Machs,
+     HPUX_C99_INTTYPES2_TEST_CT, FD_MACH_ONLY,
+     aHpux_C99_Inttypes2Tests,   apzHpux_C99_Inttypes2Patch, 0 },
+
   {  zHpux_Ctype_MacrosName,    zHpux_Ctype_MacrosList,
      apzHpux_Ctype_MacrosMachs,
      HPUX_CTYPE_MACROS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aHpux_Ctype_MacrosTests,   apzHpux_Ctype_MacrosPatch, 0 },
 
+  {  zHpux_Extern_ErrnoName,    zHpux_Extern_ErrnoList,
+     apzHpux_Extern_ErrnoMachs,
+     HPUX_EXTERN_ERRNO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux_Extern_ErrnoTests,   apzHpux_Extern_ErrnoPatch, 0 },
+
   {  zHpux_HtonlName,    zHpux_HtonlList,
      apzHpux_HtonlMachs,
      HPUX_HTONL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aHpux_HtonlTests,   apzHpux_HtonlPatch, 0 },
 
+  {  zHpux_Imaginary_IName,    zHpux_Imaginary_IList,
+     apzHpux_Imaginary_IMachs,
+     HPUX_IMAGINARY_I_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux_Imaginary_ITests,   apzHpux_Imaginary_IPatch, 0 },
+
+  {  zHpux_Inttype_Int8_TName,    zHpux_Inttype_Int8_TList,
+     apzHpux_Inttype_Int8_TMachs,
+     HPUX_INTTYPE_INT8_T_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux_Inttype_Int8_TTests,   apzHpux_Inttype_Int8_TPatch, 0 },
+
   {  zHpux_Long_DoubleName,    zHpux_Long_DoubleList,
      apzHpux_Long_DoubleMachs,
      HPUX_LONG_DOUBLE_TEST_CT, FD_MACH_ONLY,
@@ -9972,65 +11393,30 @@
      HPUX_LONG_DOUBLE_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aHpux_Long_Double_2Tests,   apzHpux_Long_Double_2Patch, 0 },
 
-  {  zHpux_SystimeName,    zHpux_SystimeList,
-     apzHpux_SystimeMachs,
-     HPUX_SYSTIME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aHpux_SystimeTests,   apzHpux_SystimePatch, 0 },
-
-  {  zHpux_Spu_InfoName,    zHpux_Spu_InfoList,
-     apzHpux_Spu_InfoMachs,
-     HPUX_SPU_INFO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aHpux_Spu_InfoTests,   apzHpux_Spu_InfoPatch, 0 },
-
-  {  zHpux11_Extern_SendfileName,    zHpux11_Extern_SendfileList,
-     apzHpux11_Extern_SendfileMachs,
-     HPUX11_EXTERN_SENDFILE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aHpux11_Extern_SendfileTests,   apzHpux11_Extern_SendfilePatch, 0 },
-
-  {  zHpux11_Extern_SendpathName,    zHpux11_Extern_SendpathList,
-     apzHpux11_Extern_SendpathMachs,
-     HPUX11_EXTERN_SENDPATH_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aHpux11_Extern_SendpathTests,   apzHpux11_Extern_SendpathPatch, 0 },
-
-  {  zHpux_Extern_ErrnoName,    zHpux_Extern_ErrnoList,
-     apzHpux_Extern_ErrnoMachs,
-     HPUX_EXTERN_ERRNO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aHpux_Extern_ErrnoTests,   apzHpux_Extern_ErrnoPatch, 0 },
-
   {  zHpux_Pthread_InitializersName,    zHpux_Pthread_InitializersList,
      apzHpux_Pthread_InitializersMachs,
      HPUX_PTHREAD_INITIALIZERS_TEST_CT, FD_MACH_ONLY,
      aHpux_Pthread_InitializersTests,   apzHpux_Pthread_InitializersPatch, 0 },
 
-  {  zHpux_C99_IntptrName,    zHpux_C99_IntptrList,
-     apzHpux_C99_IntptrMachs,
-     HPUX_C99_INTPTR_TEST_CT, FD_MACH_ONLY,
-     aHpux_C99_IntptrTests,   apzHpux_C99_IntptrPatch, 0 },
-
-  {  zHpux_C99_InttypesName,    zHpux_C99_InttypesList,
-     apzHpux_C99_InttypesMachs,
-     HPUX_C99_INTTYPES_TEST_CT, FD_MACH_ONLY,
-     aHpux_C99_InttypesTests,   apzHpux_C99_InttypesPatch, 0 },
-
-  {  zHpux_C99_Inttypes2Name,    zHpux_C99_Inttypes2List,
-     apzHpux_C99_Inttypes2Machs,
-     HPUX_C99_INTTYPES2_TEST_CT, FD_MACH_ONLY,
-     aHpux_C99_Inttypes2Tests,   apzHpux_C99_Inttypes2Patch, 0 },
+  {  zHpux_Spu_InfoName,    zHpux_Spu_InfoList,
+     apzHpux_Spu_InfoMachs,
+     HPUX_SPU_INFO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux_Spu_InfoTests,   apzHpux_Spu_InfoPatch, 0 },
 
   {  zHpux_Stdint_Least_FastName,    zHpux_Stdint_Least_FastList,
      apzHpux_Stdint_Least_FastMachs,
      HPUX_STDINT_LEAST_FAST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aHpux_Stdint_Least_FastTests,   apzHpux_Stdint_Least_FastPatch, 0 },
 
-  {  zHpux_Inttype_Int8_TName,    zHpux_Inttype_Int8_TList,
-     apzHpux_Inttype_Int8_TMachs,
-     HPUX_INTTYPE_INT8_T_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aHpux_Inttype_Int8_TTests,   apzHpux_Inttype_Int8_TPatch, 0 },
+  {  zHpux_LongjmpName,    zHpux_LongjmpList,
+     apzHpux_LongjmpMachs,
+     HPUX_LONGJMP_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux_LongjmpTests,   apzHpux_LongjmpPatch, 0 },
 
-  {  zHpux_Imaginary_IName,    zHpux_Imaginary_IList,
-     apzHpux_Imaginary_IMachs,
-     HPUX_IMAGINARY_I_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aHpux_Imaginary_ITests,   apzHpux_Imaginary_IPatch, 0 },
+  {  zHpux_SystimeName,    zHpux_SystimeList,
+     apzHpux_SystimeMachs,
+     HPUX_SYSTIME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aHpux_SystimeTests,   apzHpux_SystimePatch, 0 },
 
   {  zHuge_Val_HexName,    zHuge_Val_HexList,
      apzHuge_Val_HexMachs,
@@ -10067,15 +11453,65 @@
      IP_MISSING_SEMI_TEST_CT, FD_MACH_ONLY,
      aIp_Missing_SemiTests,   apzIp_Missing_SemiPatch, 0 },
 
+  {  zIrix_Stdio_Va_ListName,    zIrix_Stdio_Va_ListList,
+     apzIrix_Stdio_Va_ListMachs,
+     IRIX_STDIO_VA_LIST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aIrix_Stdio_Va_ListTests,   apzIrix_Stdio_Va_ListPatch, 0 },
+
+  {  zIrix___RestrictName,    zIrix___RestrictList,
+     apzIrix___RestrictMachs,
+     IRIX___RESTRICT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aIrix___RestrictTests,   apzIrix___RestrictPatch, 0 },
+
+  {  zIrix___Generic1Name,    zIrix___Generic1List,
+     apzIrix___Generic1Machs,
+     IRIX___GENERIC1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aIrix___Generic1Tests,   apzIrix___Generic1Patch, 0 },
+
+  {  zIrix___Generic2Name,    zIrix___Generic2List,
+     apzIrix___Generic2Machs,
+     IRIX___GENERIC2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aIrix___Generic2Tests,   apzIrix___Generic2Patch, 0 },
+
+  {  zIrix_ComplexName,    zIrix_ComplexList,
+     apzIrix_ComplexMachs,
+     IRIX_COMPLEX_TEST_CT, FD_MACH_ONLY,
+     aIrix_ComplexTests,   apzIrix_ComplexPatch, 0 },
+
   {  zIrix_Limits_ConstName,    zIrix_Limits_ConstList,
      apzIrix_Limits_ConstMachs,
      IRIX_LIMITS_CONST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aIrix_Limits_ConstTests,   apzIrix_Limits_ConstPatch, 0 },
 
-  {  zIrix_Stdio_Va_ListName,    zIrix_Stdio_Va_ListList,
-     apzIrix_Stdio_Va_ListMachs,
-     IRIX_STDIO_VA_LIST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aIrix_Stdio_Va_ListTests,   apzIrix_Stdio_Va_ListPatch, 0 },
+  {  zIrix_Pthread_InitName,    zIrix_Pthread_InitList,
+     apzIrix_Pthread_InitMachs,
+     IRIX_PTHREAD_INIT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aIrix_Pthread_InitTests,   apzIrix_Pthread_InitPatch, 0 },
+
+  {  zIrix_Socklen_TName,    zIrix_Socklen_TList,
+     apzIrix_Socklen_TMachs,
+     IRIX_SOCKLEN_T_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aIrix_Socklen_TTests,   apzIrix_Socklen_TPatch, 0 },
+
+  {  zIrix_Stdint_C99_ModeName,    zIrix_Stdint_C99_ModeList,
+     apzIrix_Stdint_C99_ModeMachs,
+     IRIX_STDINT_C99_MODE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aIrix_Stdint_C99_ModeTests,   apzIrix_Stdint_C99_ModePatch, 0 },
+
+  {  zIrix_Stdint_C99_TypesName,    zIrix_Stdint_C99_TypesList,
+     apzIrix_Stdint_C99_TypesMachs,
+     IRIX_STDINT_C99_TYPES_TEST_CT, FD_MACH_ONLY,
+     aIrix_Stdint_C99_TypesTests,   apzIrix_Stdint_C99_TypesPatch, 0 },
+
+  {  zIrix_Stdint_C99_MacrosName,    zIrix_Stdint_C99_MacrosList,
+     apzIrix_Stdint_C99_MacrosMachs,
+     IRIX_STDINT_C99_MACROS_TEST_CT, FD_MACH_ONLY,
+     aIrix_Stdint_C99_MacrosTests,   apzIrix_Stdint_C99_MacrosPatch, 0 },
+
+  {  zIrix_WcsftimeName,    zIrix_WcsftimeList,
+     apzIrix_WcsftimeMachs,
+     IRIX_WCSFTIME_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aIrix_WcsftimeTests,   apzIrix_WcsftimePatch, 0 },
 
   {  zKandr_ConcatName,    zKandr_ConcatList,
      apzKandr_ConcatMachs,
@@ -10109,7 +11545,7 @@
 
   {  zMath_ExceptionName,    zMath_ExceptionList,
      apzMath_ExceptionMachs,
-     MATH_EXCEPTION_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     MATH_EXCEPTION_TEST_CT, FD_MACH_IFNOT | FD_SUBROUTINE,
      aMath_ExceptionTests,   apzMath_ExceptionPatch, 0 },
 
   {  zMath_Huge_Val_From_Dbl_MaxName,    zMath_Huge_Val_From_Dbl_MaxList,
@@ -10257,16 +11693,46 @@
      SOLARIS_GETC_STRICT_STDC_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aSolaris_Getc_Strict_StdcTests,   apzSolaris_Getc_Strict_StdcPatch, 0 },
 
-  {  zSolaris_Longjmp_NoreturnName,    zSolaris_Longjmp_NoreturnList,
-     apzSolaris_Longjmp_NoreturnMachs,
-     SOLARIS_LONGJMP_NORETURN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Longjmp_NoreturnTests,   apzSolaris_Longjmp_NoreturnPatch, 0 },
+  {  zSolaris_Gets_C11Name,    zSolaris_Gets_C11List,
+     apzSolaris_Gets_C11Machs,
+     SOLARIS_GETS_C11_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Gets_C11Tests,   apzSolaris_Gets_C11Patch, 0 },
+
+  {  zSolaris_Gets_Cxx14Name,    zSolaris_Gets_Cxx14List,
+     apzSolaris_Gets_Cxx14Machs,
+     SOLARIS_GETS_CXX14_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Gets_Cxx14Tests,   apzSolaris_Gets_Cxx14Patch, 0 },
+
+  {  zSolaris_Int_ConstName,    zSolaris_Int_ConstList,
+     apzSolaris_Int_ConstMachs,
+     SOLARIS_INT_CONST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Int_ConstTests,   apzSolaris_Int_ConstPatch, 0 },
+
+  {  zSolaris_Int_Limits_1Name,    zSolaris_Int_Limits_1List,
+     apzSolaris_Int_Limits_1Machs,
+     SOLARIS_INT_LIMITS_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Int_Limits_1Tests,   apzSolaris_Int_Limits_1Patch, 0 },
+
+  {  zSolaris_Int_Limits_2Name,    zSolaris_Int_Limits_2List,
+     apzSolaris_Int_Limits_2Machs,
+     SOLARIS_INT_LIMITS_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Int_Limits_2Tests,   apzSolaris_Int_Limits_2Patch, 0 },
+
+  {  zSolaris_Int_Limits_3Name,    zSolaris_Int_Limits_3List,
+     apzSolaris_Int_Limits_3Machs,
+     SOLARIS_INT_LIMITS_3_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Int_Limits_3Tests,   apzSolaris_Int_Limits_3Patch, 0 },
 
   {  zSolaris_Math_1Name,    zSolaris_Math_1List,
      apzSolaris_Math_1Machs,
      SOLARIS_MATH_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aSolaris_Math_1Tests,   apzSolaris_Math_1Patch, 0 },
 
+  {  zSolaris_Math_10Name,    zSolaris_Math_10List,
+     apzSolaris_Math_10Machs,
+     SOLARIS_MATH_10_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Math_10Tests,   apzSolaris_Math_10Patch, 0 },
+
   {  zSolaris_Math_2Name,    zSolaris_Math_2List,
      apzSolaris_Math_2Machs,
      SOLARIS_MATH_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
@@ -10292,15 +11758,25 @@
      SOLARIS_MATH_9_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aSolaris_Math_9Tests,   apzSolaris_Math_9Patch, 0 },
 
-  {  zSolaris_Math_10Name,    zSolaris_Math_10List,
-     apzSolaris_Math_10Machs,
-     SOLARIS_MATH_10_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Math_10Tests,   apzSolaris_Math_10Patch, 0 },
+  {  zSolaris_Math_11Name,    zSolaris_Math_11List,
+     apzSolaris_Math_11Machs,
+     SOLARIS_MATH_11_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Math_11Tests,   apzSolaris_Math_11Patch, 0 },
+
+  {  zSolaris_Math_12Name,    zSolaris_Math_12List,
+     apzSolaris_Math_12Machs,
+     SOLARIS_MATH_12_TEST_CT, FD_MACH_ONLY,
+     aSolaris_Math_12Tests,   apzSolaris_Math_12Patch, 0 },
+
+  {  zSolaris_Once_Init_1Name,    zSolaris_Once_Init_1List,
+     apzSolaris_Once_Init_1Machs,
+     SOLARIS_ONCE_INIT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Once_Init_1Tests,   apzSolaris_Once_Init_1Patch, 0 },
 
-  {  zSolaris_Mutex_Init_2Name,    zSolaris_Mutex_Init_2List,
-     apzSolaris_Mutex_Init_2Machs,
-     SOLARIS_MUTEX_INIT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Mutex_Init_2Tests,   apzSolaris_Mutex_Init_2Patch, 0 },
+  {  zSolaris_Posix_Spawn_RestrictName,    zSolaris_Posix_Spawn_RestrictList,
+     apzSolaris_Posix_Spawn_RestrictMachs,
+     SOLARIS_POSIX_SPAWN_RESTRICT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Posix_Spawn_RestrictTests,   apzSolaris_Posix_Spawn_RestrictPatch, 0 },
 
   {  zSolaris_Pow_Int_OverloadName,    zSolaris_Pow_Int_OverloadList,
      apzSolaris_Pow_Int_OverloadMachs,
@@ -10312,60 +11788,25 @@
      SOLARIS_RWLOCK_INIT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aSolaris_Rwlock_Init_1Tests,   apzSolaris_Rwlock_Init_1Patch, 0 },
 
-  {  zSolaris_Once_Init_1Name,    zSolaris_Once_Init_1List,
-     apzSolaris_Once_Init_1Machs,
-     SOLARIS_ONCE_INIT_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Once_Init_1Tests,   apzSolaris_Once_Init_1Patch, 0 },
-
-  {  zSolaris_Once_Init_2Name,    zSolaris_Once_Init_2List,
-     apzSolaris_Once_Init_2Machs,
-     SOLARIS_ONCE_INIT_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Once_Init_2Tests,   apzSolaris_Once_Init_2Patch, 0 },
-
-  {  zSolaris_Int_ConstName,    zSolaris_Int_ConstList,
-     apzSolaris_Int_ConstMachs,
-     SOLARIS_INT_CONST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Int_ConstTests,   apzSolaris_Int_ConstPatch, 0 },
-
-  {  zSolaris_Int_Limits_1Name,    zSolaris_Int_Limits_1List,
-     apzSolaris_Int_Limits_1Machs,
-     SOLARIS_INT_LIMITS_1_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Int_Limits_1Tests,   apzSolaris_Int_Limits_1Patch, 0 },
-
-  {  zSolaris_Int_Limits_2Name,    zSolaris_Int_Limits_2List,
-     apzSolaris_Int_Limits_2Machs,
-     SOLARIS_INT_LIMITS_2_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Int_Limits_2Tests,   apzSolaris_Int_Limits_2Patch, 0 },
-
-  {  zSolaris_Int_Limits_3Name,    zSolaris_Int_Limits_3List,
-     apzSolaris_Int_Limits_3Machs,
-     SOLARIS_INT_LIMITS_3_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Int_Limits_3Tests,   apzSolaris_Int_Limits_3Patch, 0 },
-
-  {  zSolaris_Int_TypesName,    zSolaris_Int_TypesList,
-     apzSolaris_Int_TypesMachs,
-     SOLARIS_INT_TYPES_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Int_TypesTests,   apzSolaris_Int_TypesPatch, 0 },
-
-  {  zSolaris_Posix_Spawn_RestrictName,    zSolaris_Posix_Spawn_RestrictList,
-     apzSolaris_Posix_Spawn_RestrictMachs,
-     SOLARIS_POSIX_SPAWN_RESTRICT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Posix_Spawn_RestrictTests,   apzSolaris_Posix_Spawn_RestrictPatch, 0 },
-
   {  zSolaris_Std___FilbufName,    zSolaris_Std___FilbufList,
      apzSolaris_Std___FilbufMachs,
      SOLARIS_STD___FILBUF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aSolaris_Std___FilbufTests,   apzSolaris_Std___FilbufPatch, 0 },
 
+  {  zSolaris_Std_Gets_Cxx14Name,    zSolaris_Std_Gets_Cxx14List,
+     apzSolaris_Std_Gets_Cxx14Machs,
+     SOLARIS_STD_GETS_CXX14_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Std_Gets_Cxx14Tests,   apzSolaris_Std_Gets_Cxx14Patch, 0 },
+
   {  zSolaris_Stdio_TagName,    zSolaris_Stdio_TagList,
      apzSolaris_Stdio_TagMachs,
      SOLARIS_STDIO_TAG_TEST_CT, FD_MACH_ONLY,
      aSolaris_Stdio_TagTests,   apzSolaris_Stdio_TagPatch, 0 },
 
-  {  zSolaris_Sys_Va_ListName,    zSolaris_Sys_Va_ListList,
-     apzSolaris_Sys_Va_ListMachs,
-     SOLARIS_SYS_VA_LIST_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aSolaris_Sys_Va_ListTests,   apzSolaris_Sys_Va_ListPatch, 0 },
+  {  zSolaris_Stdlib_NoreturnName,    zSolaris_Stdlib_NoreturnList,
+     apzSolaris_Stdlib_NoreturnMachs,
+     SOLARIS_STDLIB_NORETURN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSolaris_Stdlib_NoreturnTests,   apzSolaris_Stdlib_NoreturnPatch, 0 },
 
   {  zStatsswtchName,    zStatsswtchList,
      apzStatsswtchMachs,
@@ -10447,6 +11888,11 @@
      SUNOS_STRLEN_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aSunos_StrlenTests,   apzSunos_StrlenPatch, 0 },
 
+  {  zSuse_Linux_Vt_CxxName,    zSuse_Linux_Vt_CxxList,
+     apzSuse_Linux_Vt_CxxMachs,
+     SUSE_LINUX_VT_CXX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aSuse_Linux_Vt_CxxTests,   apzSuse_Linux_Vt_CxxPatch, 0 },
+
   {  zSvr4_Disable_OptName,    zSvr4_Disable_OptList,
      apzSvr4_Disable_OptMachs,
      SVR4_DISABLE_OPT_TEST_CT, FD_MACH_ONLY,
@@ -10507,56 +11953,56 @@
      VA_I960_MACRO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aVa_I960_MacroTests,   apzVa_I960_MacroPatch, 0 },
 
+  {  zVms_Add_Missing_BracesName,    zVms_Add_Missing_BracesList,
+     apzVms_Add_Missing_BracesMachs,
+     VMS_ADD_MISSING_BRACES_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aVms_Add_Missing_BracesTests,   apzVms_Add_Missing_BracesPatch, 0 },
+
+  {  zVms_Decc_BuiltinName,    zVms_Decc_BuiltinList,
+     apzVms_Decc_BuiltinMachs,
+     VMS_DECC_BUILTIN_TEST_CT, FD_MACH_ONLY,
+     aVms_Decc_BuiltinTests,   apzVms_Decc_BuiltinPatch, 0 },
+
   {  zVms_Define_Can_Use_Extern_PrefixName,    zVms_Define_Can_Use_Extern_PrefixList,
      apzVms_Define_Can_Use_Extern_PrefixMachs,
      VMS_DEFINE_CAN_USE_EXTERN_PREFIX_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aVms_Define_Can_Use_Extern_PrefixTests,   apzVms_Define_Can_Use_Extern_PrefixPatch, 0 },
 
-  {  zVms_Use_Pragma_Extern_ModelName,    zVms_Use_Pragma_Extern_ModelList,
-     apzVms_Use_Pragma_Extern_ModelMachs,
-     VMS_USE_PRAGMA_EXTERN_MODEL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aVms_Use_Pragma_Extern_ModelTests,   apzVms_Use_Pragma_Extern_ModelPatch, 0 },
-
   {  zVms_Disable_Decc_String_BuiltinsName,    zVms_Disable_Decc_String_BuiltinsList,
      apzVms_Disable_Decc_String_BuiltinsMachs,
      VMS_DISABLE_DECC_STRING_BUILTINS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aVms_Disable_Decc_String_BuiltinsTests,   apzVms_Disable_Decc_String_BuiltinsPatch, 0 },
 
-  {  zVms_Use_Quoted_IncludeName,    zVms_Use_Quoted_IncludeList,
-     apzVms_Use_Quoted_IncludeMachs,
-     VMS_USE_QUOTED_INCLUDE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aVms_Use_Quoted_IncludeTests,   apzVms_Use_Quoted_IncludePatch, 0 },
-
-  {  zVms_Add_Missing_BracesName,    zVms_Add_Missing_BracesList,
-     apzVms_Add_Missing_BracesMachs,
-     VMS_ADD_MISSING_BRACES_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aVms_Add_Missing_BracesTests,   apzVms_Add_Missing_BracesPatch, 0 },
-
   {  zVms_Do_Not_Redeclare_HostaliasName,    zVms_Do_Not_Redeclare_HostaliasList,
      apzVms_Do_Not_Redeclare_HostaliasMachs,
      VMS_DO_NOT_REDECLARE_HOSTALIAS_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aVms_Do_Not_Redeclare_HostaliasTests,   apzVms_Do_Not_Redeclare_HostaliasPatch, 0 },
 
-  {  zVms_Decc_BuiltinName,    zVms_Decc_BuiltinList,
-     apzVms_Decc_BuiltinMachs,
-     VMS_DECC_BUILTIN_TEST_CT, FD_MACH_ONLY,
-     aVms_Decc_BuiltinTests,   apzVms_Decc_BuiltinPatch, 0 },
+  {  zVms_Forward_Declare_StructName,    zVms_Forward_Declare_StructList,
+     apzVms_Forward_Declare_StructMachs,
+     VMS_FORWARD_DECLARE_STRUCT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aVms_Forward_Declare_StructTests,   apzVms_Forward_Declare_StructPatch, 0 },
 
   {  zVms_No_64bit_GetoptName,    zVms_No_64bit_GetoptList,
      apzVms_No_64bit_GetoptMachs,
      VMS_NO_64BIT_GETOPT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aVms_No_64bit_GetoptTests,   apzVms_No_64bit_GetoptPatch, 0 },
 
-  {  zVms_Forward_Declare_StructName,    zVms_Forward_Declare_StructList,
-     apzVms_Forward_Declare_StructMachs,
-     VMS_FORWARD_DECLARE_STRUCT_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aVms_Forward_Declare_StructTests,   apzVms_Forward_Declare_StructPatch, 0 },
-
   {  zVms_Use_Fast_SetjmpName,    zVms_Use_Fast_SetjmpList,
      apzVms_Use_Fast_SetjmpMachs,
      VMS_USE_FAST_SETJMP_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
      aVms_Use_Fast_SetjmpTests,   apzVms_Use_Fast_SetjmpPatch, 0 },
 
+  {  zVms_Use_Pragma_Extern_ModelName,    zVms_Use_Pragma_Extern_ModelList,
+     apzVms_Use_Pragma_Extern_ModelMachs,
+     VMS_USE_PRAGMA_EXTERN_MODEL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aVms_Use_Pragma_Extern_ModelTests,   apzVms_Use_Pragma_Extern_ModelPatch, 0 },
+
+  {  zVms_Use_Quoted_IncludeName,    zVms_Use_Quoted_IncludeList,
+     apzVms_Use_Quoted_IncludeMachs,
+     VMS_USE_QUOTED_INCLUDE_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
+     aVms_Use_Quoted_IncludeTests,   apzVms_Use_Quoted_IncludePatch, 0 },
+
   {  zVoid_NullName,    zVoid_NullList,
      apzVoid_NullMachs,
      VOID_NULL_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
@@ -10620,15 +12066,5 @@
   {  zX11_SprintfName,    zX11_SprintfList,
      apzX11_SprintfMachs,
      X11_SPRINTF_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aX11_SprintfTests,   apzX11_SprintfPatch, 0 },
-
-  {  zFeraiseexcept_Nosse_InvalidName,    zFeraiseexcept_Nosse_InvalidList,
-     apzFeraiseexcept_Nosse_InvalidMachs,
-     FERAISEEXCEPT_NOSSE_INVALID_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aFeraiseexcept_Nosse_InvalidTests,   apzFeraiseexcept_Nosse_InvalidPatch, 0 },
-
-  {  zFeraiseexcept_Nosse_DivbyzeroName,    zFeraiseexcept_Nosse_DivbyzeroList,
-     apzFeraiseexcept_Nosse_DivbyzeroMachs,
-     FERAISEEXCEPT_NOSSE_DIVBYZERO_TEST_CT, FD_MACH_ONLY | FD_SUBROUTINE,
-     aFeraiseexcept_Nosse_DivbyzeroTests,   apzFeraiseexcept_Nosse_DivbyzeroPatch, 0 }
+     aX11_SprintfTests,   apzX11_SprintfPatch, 0 }
 };
diff -N -u -r -w gcc-4.8.2/fixincludes/fixlib.c gcc-4.8.2-patched/fixincludes/fixlib.c
--- gcc-4.8.2/fixincludes/fixlib.c	2009-04-09 16:00:19.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/fixlib.c	2019-08-09 16:06:37.209728360 +0000
@@ -278,3 +278,141 @@
 }
 
 #endif
+
+#if defined(__MINGW32__)
+void
+fix_path_separators (char* p)
+{
+    while (p != NULL)
+      {
+        p = strchr (p, '\\');
+        if (p != NULL)
+          {
+            *p = '/';
+            ++p;
+          }
+      }
+}
+
+/* Count number of needle character ocurrences in str */
+static int
+count_occurrences_of_char (char* str, char needle)
+{
+  int cnt = 0;
+
+  while (str)
+    {
+       str = strchr (str, needle);
+       if (str)
+         {
+           ++str;
+           ++cnt;
+         }
+    }
+
+  return cnt;
+}
+
+/* On Mingw32, system function will just start cmd by default.
+   Call system function, but prepend ${CONFIG_SHELL} or ${SHELL} -c to the command,
+   replace newlines with '$'\n'', enclose command with double quotes
+   and escape special characters which were originally enclosed in single quotes.
+ */
+int
+system_with_shell (char* s)
+{
+  static const char z_shell_start_args[] = " -c \"";
+  static const char z_shell_end_args[] = "\"";
+  static const char z_shell_newline[] = "'$'\\n''";
+
+  /* Use configured shell if present */
+  char *env_shell = getenv ("CONFIG_SHELL");
+  int newline_cnt = count_occurrences_of_char (s, '\n');
+  int escapes_cnt  = count_occurrences_of_char( s, '\\')
+                      + count_occurrences_of_char (s, '"')
+                      + count_occurrences_of_char (s, '`');
+  char *long_cmd;
+  char *cmd_endp;
+  int sys_result;
+  char *s_scan;
+  int in_quotes;
+
+  if (env_shell == NULL)
+    env_shell = getenv ("SHELL");
+
+  /* If neither CONFIGURED_SHELL nor SHELL is set, just call standard system function */
+  if (env_shell == NULL)
+    return system (s);
+
+  /* Allocate enough memory to fit newly created command string */
+  long_cmd = XNEWVEC (char, strlen (env_shell)
+                      + strlen (z_shell_start_args)
+                      + strlen (s)
+                      + newline_cnt * (strlen (z_shell_newline) - 1)
+                      + escapes_cnt
+                      + strlen (z_shell_end_args)
+                      + 1);
+
+  /* Start with ${SHELL} */
+  strcpy (long_cmd, env_shell);
+  cmd_endp = long_cmd + strlen (long_cmd);
+
+  /* Opening quote */
+  strcpy (cmd_endp, z_shell_start_args);
+  cmd_endp += strlen (z_shell_start_args);
+
+  /* Replace newlines and escape special chars */
+  in_quotes = 0;
+  for (s_scan = s; *s_scan; ++s_scan)
+    {
+      switch (*s_scan)
+        {
+          case '\n':
+            if (in_quotes)
+              {
+                /* Replace newline inside quotes with '$'\n'' */
+                strcpy (cmd_endp, z_shell_newline);
+                cmd_endp += strlen (z_shell_newline);
+              }
+            else
+              {
+                /* Replace newlines outside quotes with ; and merge subsequent newlines */
+                *(cmd_endp++) = ';';
+                *(cmd_endp++) = ' ';
+                while (*(s_scan + 1) == '\n' || *(s_scan + 1) == ' ' || *(s_scan + 1) == '\t')
+                  ++s_scan;
+              }
+            break;
+          case '\'':
+            /* Escape single quote and toggle in_quotes flag */
+            in_quotes = !in_quotes;
+            *(cmd_endp++) = *s_scan;
+            break;
+          case '\\':
+          case '`':
+            /* Escape backslash and backtick inside quotes */
+            if (in_quotes)
+               *(cmd_endp++) = '\\';
+            *(cmd_endp++) = *s_scan;
+            break;
+          case '"':
+            /* Escape double quotes always */
+            *(cmd_endp++) = '\\';
+            *(cmd_endp++) = *s_scan;
+            break;
+          default:
+            *(cmd_endp++) = *s_scan;
+        }
+    }
+
+  /* Closing quote */
+  strcpy (cmd_endp, z_shell_end_args);
+
+  sys_result = system (long_cmd);
+
+  free (long_cmd);
+
+  return sys_result;
+}
+
+#endif /* defined(__MINGW32__) */
diff -N -u -r -w gcc-4.8.2/fixincludes/fixlib.h gcc-4.8.2-patched/fixincludes/fixlib.h
--- gcc-4.8.2/fixincludes/fixlib.h	2013-01-14 11:13:09.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/fixlib.h	2019-08-09 16:06:37.234166040 +0000
@@ -161,7 +161,7 @@
     */
 typedef enum
 {
-  TT_TEST, TT_EGREP, TT_NEGREP, TT_FUNCTION
+  TT_TEST, TT_EGREP, TT_NEGREP, TT_FUNCTION, TT_CKSUM
 } te_test_type;
 
 typedef struct test_desc tTestDesc;
@@ -269,4 +269,19 @@
 t_bool mn_get_regexps ( regex_t** label_re, regex_t** name_re, tCC *who );
 
 void   initialize_opts ( void );
+
+#if defined(__MINGW32__)
+
+void   fix_path_separators ( char* p );
+
+/* prepend shell name to command passed to system call */
+int    system_with_shell ( char* s );
+
+#else
+
+/* normal call */
+#define system_with_shell system
+
+#endif /* defined(__MINGW32__) */
+
 #endif /* ! GCC_FIXLIB_H */
diff -N -u -r -w gcc-4.8.2/fixincludes/inclhack.def gcc-4.8.2-patched/fixincludes/inclhack.def
--- gcc-4.8.2/fixincludes/inclhack.def	2013-05-31 12:43:36.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/inclhack.def	2019-08-09 16:06:37.351362360 +0000
@@ -11,7 +11,7 @@
           pattern='^/\*$' \
           trailer='^/\*EOF\*[/]' \
           input=inclhack.def \
-          key='hackname[ 	]*=[ 	]*(.*);'
+          key=$'hackname[ \t]*=[ \t]*(.*);'
 
    Set up a debug test so we can make the templates emit special
    code while debugging these fixes:  */
@@ -64,7 +64,6 @@
 	_EOArg_;
 };
 
-
 /* On AIX when _LARGE_FILES is defined fcntl.h defines open to
  * open64 and creat to creat64.  This fixes fcntl.h to
  * undef those defines and use __asm__ to alias the symbols if
@@ -103,7 +102,6 @@
 	_EOArg_;
 };
 
-
 /*
  *  On Mac OS 10.3.9, the 'long double' functions are available in
  *  libSystem, but are not prototyped in math.h.
@@ -237,7 +235,6 @@
 	_EndOfHeader_;
 };
 
-
 /*
  *  This fixes __FD_ZERO bug for glibc-1.x
  */
@@ -275,7 +272,6 @@
 	_EndOfHeader_;
 };
 
-
 /*
  *  This fixes __FD_ZERO bug for glibc-2.0.x
  */
@@ -317,7 +313,6 @@
 	_EndOfHeader_;
 };
 
-
 /*
  * Solaris <sys/varargs.h> is a DDK (aka kernel-land) header providing
  * the same interface as <stdarg.h>.  No idea why they couldn't have just
@@ -336,7 +331,6 @@
 	_EndOfHeader_;
 };
 
-
 /*
  *  Fix non-ANSI memcpy declaration that conflicts with gcc's builtin
  *  declaration on Sun OS 4.x.  We must only fix this on Sun OS 4.x, because
@@ -433,122 +427,6 @@
 };
 
 /*
- * Make VxWorks stdint.h a bit more compliant - add typedefs
- */
-fix = {
-    hackname    = AAB_vxworks_stdint;
-    files       = stdint.h;
-    mach        = "*-*-vxworks*";
-        
-    replace     = <<- _EndOfHeader_
-	#ifndef _STDINT_H
-	#define _STDINT_H
-	/* get int*_t, uint*_t */
-	#include <types/vxTypes.h>
-	
-	/* get legacy vxworks types for compatibility */
-	#include <types/vxTypesOld.h>
-	
-	typedef long intptr_t;
-	typedef unsigned long uintptr_t;
-	
-	typedef int64_t intmax_t;
-	typedef uint64_t uintmax_t;
-	
-	typedef int8_t int_least8_t;
-	typedef int16_t int_least16_t;
-	typedef int32_t int_least32_t;
-	typedef int64_t int_least64_t;
-	
-	typedef uint8_t uint_least8_t;
-	typedef uint16_t uint_least16_t;
-	typedef uint32_t uint_least32_t;
-	typedef uint64_t uint_least64_t;
-	
-	typedef int8_t int_fast8_t;
-	typedef int int_fast16_t;
-	typedef int32_t int_fast32_t;
-	typedef int64_t int_fast64_t;
-	
-	typedef uint8_t uint_fast8_t;
-	typedef unsigned int uint_fast16_t;
-	typedef uint32_t uint_fast32_t;
-	typedef uint64_t uint_fast64_t;
-	
-	/* Ranges */
-	#define UINT8_MAX (~(uint8_t)0)
-	#define UINT8_MIN 0
-	#define UINT16_MAX (~(uint16_t)0)
-	#define UINT16_MIN 0
-	#define UINT32_MAX (~(uint32_t)0)
-	#define UINT32_MIN 0
-	#define UINT64_MAX (~(uint64_t)0)
-	#define UINT64_MIN 0
-	
-	#define UINTPTR_MAX (~(uintptr_t)0)
-	#define UINTPTR_MIN 0
-	
-	/* Need to do int_fast16_t as well, as type
-	   size may be architecture dependent */
-	#define UINT_FAST16_MAX (~(uint_fast16_t)0)
-	#define UINT_FAST16_MAX 0
-	
-	#define INT8_MAX (UINT8_MAX>>1)
-	#define INT8_MIN (INT8_MAX+1)
-	#define INT16_MAX (UINT16_MAX>>1)
-	#define INT16_MIN (INT16_MAX+1)
-	#define INT32_MAX (UINT32_MAX>>1)
-	#define INT32_MIN (INT32_MAX+1)
-	#define INT64_MAX (UINT64_MAX>>1)
-	#define INT64_MIN (INT64_MAX+1)
-	
-	#define INTPTR_MAX (UINTPTR_MAX>>1)
-	#define INTPTR_MIN (INTPTR_MAX+1)	
-	
-	#define INT_FAST16_MAX (UINT_FAST16_MAX>>1)
-	#define INT_FAST16_MIN (INT_FAST16_MAX+1)
-	
-	/* now define equiv. constants */
-	#define UINT_FAST8_MAX UINT8_MAX
-	#define UINT_FAST8_MIN UINT_FAST8_MIN
-	#define INT_FAST8_MAX INT8_MAX
-	#define INT_FAST8_MIN INT8_MIN
-	#define UINT_FAST32_MAX UINT32_MAX
-	#define UINT_FAST32_MIN UINT32_MIN
-	#define INT_FAST32_MAX INT32_MAX
-	#define INT_FAST32_MIN INT32_MIN
-	#define UINT_FAST64_MAX UINT64_MAX
-	#define UINT_FAST64_MIN UINT64_MIN
-	#define INT_FAST64_MAX INT64_MAX
-	#define INT_FAST64_MIN INT64_MIN
-	
-	#define UINT_LEAST8_MAX UINT8_MAX
-	#define UINT_LEAST8_MIN UINT8_MIN
-	#define INT_LEAST8_MAX INT8_MAX
-	#define INT_LEAST8_MIN INT8_MIN
-	#define UINT_LEAST16_MAX UINT16_MAX
-	#define UINT_LEAST16_MIN UINT16_MIN
-	#define INT_LEAST16_MAX INT16_MAX
-	#define INT_LEAST16_MIN INT16_MIN
-	#define UINT_LEAST32_MAX UINT32_MAX
-	#define UINT_LEAST32_MIN UINT32_MIN
-	#define INT_LEAST32_MAX INT32_MAX
-	#define INT_LEAST32_MIN INT32_MIN
-	#define UINT_LEAST64_MAX UINT64_MAX
-	#define UINT_LEAST64_MIN UINT64_MIN
-	#define INT_LEAST64_MAX INT64_MAX
-	#define INT_LEAST64_MIN INT64_MIN
-	
-	#define UINTMAX_MAX UINT64_MAX
-	#define UINTMAX_MIN UINT64_MIN
-	#define INTMAX_MAX INT64_MAX
-	#define INTMAX_MIN INT64_MIN
-	
-	#endif
-	_EndOfHeader_;
-};
-
-/*
  *  This hack makes makes unistd.h more POSIX-compliant on VxWorks
  */
 fix = {
@@ -574,6 +452,19 @@
 	_EndOfHeader_;
 };
 
+/*
+ * assert.h on AIX 7 redefines static_assert as _Static_assert without
+ * protecting C++.
+ */
+fix = {
+    hackname  = aix_assert;
+    mach      = "*-*-aix*";
+    files     = assert.h;
+    select    = "#define[ \t]static_assert[ \t]_Static_assert";
+    c_fix     = format;
+    c_fix_arg = "#ifndef __cplusplus\n%0\n#endif";
+    test_text = "#define static_assert _Static_assert";
+};
 
 /*
  * complex.h on AIX 5 and AIX 6 define _Complex_I and I in terms of __I,
@@ -590,6 +481,56 @@
 };
 
 /*
+ *  On AIX some headers are not properly guarded by 'extern "C"'.
+ */
+fix = {
+  hackname  = aix_externc;
+  mach      = "*-*-aix*";
+  files     = ctype.h;
+  files     = fcntl.h;
+  files     = langinfo.h;
+  files     = ldfcn.h;
+  files     = sys/localedef.h;
+  files     = sys/times.h;
+  bypass    = "extern \"C\"";
+  c_fix     = wrap;
+  c_fix_arg = "#ifdef __cplusplus\n"
+              "extern \"C\" {\n"
+              "#endif\n";
+  c_fix_arg = "#ifdef __cplusplus\n"
+              "}\n"
+              "#endif\n";
+  test_text = "extern int __n_pthreads;\n";
+};
+
+/*
+ *  On AIX sys/socket.h assumes C++.
+ */
+fix = {
+  hackname  = aix_externcpp1;
+  mach      = "*-*-aix*";
+  files     = "sys/socket.h";
+  select    = "#ifdef __cplusplus";
+  c_fix     = format;
+  c_fix_arg = "#ifdef __cplusplus\n"
+              "extern \"C++\" {";
+  test_text = "#ifdef __cplusplus";
+
+};
+
+fix = {
+  hackname  = aix_externcpp2;
+  mach      = "*-*-aix*";
+  files     = "sys/socket.h";
+  select    = "#else  /\\* __cplusplus \\*/";
+  c_fix     = format;
+  c_fix_arg = "} /* extern \"C++\" */\n"
+              "#else  /* __cplusplus */";
+  test_text = "#else  /* __cplusplus */";
+
+};
+
+/*
  *  malloc.h on AIX6 uses XLC++ specific builtin syntax
  */
 fix = {
@@ -617,6 +558,33 @@
 };
 
 /*
+ *  Fix AIX definition of NULL for G++.
+ */
+fix = {
+    hackname  = aix_null;
+    mach      = "*-*-aix*";
+    files     = curses.h, dbm.h, locale.h, stdio.h, stdlib.h, string.h,
+    time.h, unistd.h, wchar.h, sys/dir.h, sys/param.h, sys/types.h;
+    bypass    = __null;
+    select    = "#define[ \t]+NULL[ \t]+\\(*0L*\\)*";
+    c_fix     = format;
+    c_fix_arg = <<- _EOFix_
+	#ifndef NULL
+	#ifdef __cplusplus
+	#ifdef __GNUG__
+	#define NULL __null
+	#else /* ! __GNUG__  */
+	#define NULL 0L
+	#endif /* __GNUG__  */
+	#else /* ! __cplusplus  */
+	#define NULL ((void *)0)
+	#endif /* __cplusplus  */
+	#endif /* !NULL  */
+	_EOFix_;
+    test_text = "# define\tNULL \t(0L)  /* typed NULL */";
+};
+
+/*
  *  pthread.h on AIX defines PTHREAD_ONCE_INIT, PTHREAD_MUTEX_INITIALIZER,
  *  PTHREAD_COND_INITIALIZER and PTHREAD_RWLOCK_INITIALIZER without enough
  *  braces.
@@ -693,14 +661,13 @@
 fix = {
     hackname  = aix_pthread;
     files     = "pthread.h";
-    select    = "(#define [A-Za-z_0-9]+)(\\\\\n[^A-Za-z_0-9 \t\n(])";
+    select    = "(#define[\t ][A-Za-z_0-9]+)(\\\\\n[^A-Za-z_0-9 \t\n(])";
     c_fix     = format;
     c_fix_arg = "%1 %2";
     test_text = "#define PTHREAD_MUTEX_INITIALIZER\\\\\n"
                 "{...init stuff...}";
 };
 
-
 /*
  *  AIX stdint.h fixes.
  */
@@ -717,7 +684,9 @@
 		"#define UINT16_MAX	(65535U)";
 };
 
-
+/*
+ * aix_stdint_2
+ */
 fix = {
     hackname  = aix_stdint_2;
     mach      = "*-*-aix*";
@@ -746,7 +715,9 @@
 		"#define UINTPTR_MAX	UINT32_MAX";
 };
 
-
+/*
+ * aix_stdint_3
+ */
 fix = {
     hackname  = aix_stdint_3;
     mach      = "*-*-aix*";
@@ -769,7 +740,9 @@
 		"#define PTRDIFF_MAX	INT32_MAX";
 };
 
-
+/*
+ * aix_stdint_4
+ */
 fix = {
     hackname  = aix_stdint_4;
     mach      = "*-*-aix*";
@@ -786,7 +759,9 @@
 		"#define SIZE_MAX        UINT32_MAX";
 };
 
-
+/*
+ * aix_stdint_5
+ */
 fix = {
     hackname  = aix_stdint_5;
     mach      = "*-*-aix*";
@@ -800,6 +775,101 @@
 		"#define UINT16_C(c)	__CONCAT__(c,U)";
 };
 
+/*
+ * stdio.h on AIX defines ferror, clearerr and feof as C++ inline, which
+   produces wrong code with G++.
+ */
+fix = {
+    hackname  = aix_stdio_inline;
+    mach      = "*-*-aix*";
+    files     = stdio.h;
+    select    = "#ifdef __cplusplus\\\n"
+                "}\\\n\\\n"
+                "#ifdef ferror\\\n";
+    c_fix     = format;
+    c_fix_arg = "#ifdef __cplusplus\n"
+                "}\n"
+                "#endif\n\n"
+                "#if (defined(__cplusplus) && defined(__IBMCPP__))\n"
+                "#ifdef ferror\n";
+    test_text = "#ifdef __cplusplus\n}\n\n#ifdef ferror";
+};
+
+/*
+ * stdlib.h on AIX uses #define on malloc and friends.
+ */
+fix = {
+    hackname  = aix_stdlib_malloc;
+    mach      = "*-*-aix*";
+    files     = stdlib.h;
+    select    = "#define[ \t]+malloc[ \t]+__linux_malloc";
+    c_fix     = format;
+    c_fix_arg = "extern void *malloc(size_t) __asm__(\"__linux_malloc\");";
+    test_text = "#define malloc __linux_malloc";
+};
+
+fix = {
+    hackname  = aix_stdlib_realloc;
+    mach      = "*-*-aix*";
+    files     = stdlib.h;
+    select    = "#define[ \t]+realloc[ \t]+__linux_realloc";
+    c_fix     = format;
+    c_fix_arg = "extern void *realloc(void *, size_t) __asm__(\"__linux_realloc\");";
+    test_text = "#define realloc __linux_realloc";
+};
+
+fix = {
+    hackname  = aix_stdlib_calloc;
+    mach      = "*-*-aix*";
+    files     = stdlib.h;
+    select    = "#define[ \t]+calloc[ \t]+__linux_calloc";
+    c_fix     = format;
+    c_fix_arg = "extern void *calloc(size_t, size_t) __asm__(\"__linux_calloc\");";
+    test_text = "#define calloc __linux_calloc";
+};
+
+fix = {
+    hackname  = aix_stdlib_valloc;
+    mach      = "*-*-aix*";
+    files     = stdlib.h;
+    select    = "#define[ \t]+valloc[ \t]+__linux_valloc";
+    c_fix     = format;
+    c_fix_arg = "extern void *valloc(size_t) __asm__(\"__linux_valloc\");";
+    test_text = "#define valloc __linux_valloc";
+};
+
+fix = {
+    hackname  = aix_stdlib_vec_malloc;
+    mach      = "*-*-aix*";
+    files     = stdlib.h;
+    select    = "#define[ \t]+malloc[ \t]+vec_malloc";
+    c_fix     = format;
+    c_fix_arg = "extern void *malloc(size_t) __asm__(\"vec_malloc\");";
+    test_text = "#define malloc vec_malloc";
+};
+
+fix = {
+    hackname  = aix_stdlib_vec_calloc;
+    mach      = "*-*-aix*";
+    files     = stdlib.h;
+    select    = "#define[ \t]+calloc[ \t]+vec_calloc";
+    c_fix     = format;
+    c_fix_arg = "extern void *calloc(size_t, size_t) __asm__(\"vec_calloc\");";
+    test_text = "#define calloc vec_calloc";
+};
+
+/*
+ * stdlib.h on AIX 4.3 declares strtof() with a non-const first argument.
+ */
+fix = {
+    hackname  = aix_strtof_const;
+    mach      = "*-*-aix*";
+    files     = stdlib.h;
+    select    = "((extern[ \t]+)?float[ \t]+strtof)\\(char \\*, char \\*\\*\\);";
+    c_fix     = format;
+    c_fix_arg = "%1(const char *, char **);";
+    test_text = "extern float    strtof(char *, char **);";
+};
 
 /*
  *  sys/machine.h on AIX 4.3.3 puts whitespace between a \ and a newline
@@ -807,6 +877,7 @@
  */
 fix = {
     hackname  = aix_sysmachine;
+    mach      = "*-*-aix*";
     files     = sys/machine.h;
     select    = "\\\\ +\n";
     c_fix     = format;
@@ -815,21 +886,21 @@
     " bar \\ \n baz \\ \n bat";
 };
 
-
 /*
  *  sys/wait.h on AIX 5.2 defines macros that have both signed and
  *  unsigned types in conditional expressions.
  */
 fix = {
     hackname  = aix_syswait_2;
+    mach      = "*-*-aix*";
     files     = sys/wait.h;
     select    = '\? (\(\(\(\(unsigned[^)]*\)[^)]*\) >> [^)]*\) \& 0xff\) : -1)';
     c_fix     = format;
     c_fix_arg = "? (int)%1";
-    test_text = "#define WSTOPSIG(__x)    (int)(WIFSTOPPED(__x) ? ((((unsigned int)__x) >> 8) & 0xff) : -1)";
+    test_text = "#define WSTOPSIG(__x)    "
+        "(int)(WIFSTOPPED(__x) ? ((((unsigned int)__x) >> 8) & 0xff) : -1)";
 };
 
-
 /*
  *  sys/signal.h on some versions of AIX uses volatile in the typedef of
  *  sig_atomic_t, which causes gcc to generate a warning about duplicate
@@ -838,6 +909,7 @@
  */
 fix = {
     hackname  = aix_volatile;
+    mach      = "*-*-aix*";
     files     = sys/signal.h;
     select    = "typedef volatile int sig_atomic_t";
     c_fix     = format;
@@ -845,7 +917,6 @@
     test_text = "typedef volatile int sig_atomic_t;";
 };
 
-
 /*
  *  Fix __assert declaration in assert.h on Alpha OSF/1.
  */
@@ -858,7 +929,6 @@
     test_text = 'extern void __assert(char *, char *, int);';
 };
 
-
 /*
  *  Fix assert macro in assert.h on Alpha OSF/1.
  *  The superfluous int cast breaks C++.
@@ -873,7 +943,6 @@
                 ': __assert(#EX, __FILE__, __LINE__))';
 };
 
-
 /*
  *  Fix getopt declarations in stdio.h and stdlib.h on Alpha OSF/1 and AIX.
  */
@@ -887,7 +956,6 @@
     test_text = 'extern int getopt(int, char *[], char *);';
 };
 
-
 /*
  *  Fix missing semicolon on Alpha OSF/4 in <net/if.h>
  */
@@ -900,7 +968,6 @@
     test_text = '     struct  sockaddr vmif_paddr     /* protocol address */';
 };
 
-
 /*
  * Remove erroneous parentheses in sym.h on Alpha OSF/1.
  */
@@ -913,7 +980,6 @@
     test_text = "#ifndef(__mips64) /* bogus */\nextern int foo;\n#endif";
 };
 
-
 /*
  *  Fix return value of sbrk in unistd.h on Alpha OSF/1 V2.0
  *  And OpenBSD.
@@ -927,7 +993,6 @@
     test_text = "extern char* sbrk(ptrdiff_t increment);";
 };
 
-
 /*
  *  For C++, avoid any typedef or macro definition of bool,
  *  and use the built in type instead.
@@ -950,7 +1015,9 @@
     test_text = "# define bool\t char \n";
 };
 
-
+/*
+ * avoid_bool_type
+ */
 fix = {
     hackname = avoid_bool_type;
     files    = curses.h;
@@ -967,7 +1034,6 @@
     test_text = "typedef unsigned int\tbool \t; /* bool\n type */";
 };
 
-
 /*
  *  For C++, avoid any typedef definition of wchar_t,
  *  and use the built in type instead.
@@ -991,7 +1057,6 @@
     test_text = "typedef unsigned short\twchar_t \t; /* wchar_t\n type */";
 };
 
-
 /*
  *  Fix `typedef struct term;' on hppa1.1-hp-hpux9.
  */
@@ -1005,7 +1070,6 @@
     test_text = 'typedef struct term;';
 };
 
-
 /*
  *  Fix one other error in this file:
  *  a mismatched quote not inside a C comment.
@@ -1020,7 +1084,6 @@
     test_text = "/* doesn't have matched single quotes */";
 };
 
-
 /*
  *  check for broken assert.h that needs stdio.h
  */
@@ -1034,7 +1097,6 @@
     test_text = "extern FILE* stderr;";
 };
 
-
 /*
  *  check for broken assert.h that needs stdlib.h
  */
@@ -1071,7 +1133,6 @@
                 "extern double cabs ( _Complex z );";
 };
 
-
 /*
  * Fixup Darwin's broken check for __builtin_nanf.
  */    
@@ -1092,7 +1153,6 @@
     test_text = "#if defined(__APPLE_CC__) && (__APPLE_CC__ >= 1345)";
 };
 
-
 /*
  *  Various systems derived from BSD4.4 contain a macro definition
  *  for vfscanf that interacts badly with requirements of builtin-attrs.def.
@@ -1113,22 +1173,6 @@
 };
 
 /*
- * 'g++ -std=c++11' defines __cplusplus to 201103L, which suggests
- * that it conforms to ISO/IEC 14882:2011.  It currently does
- * not support the [[noreturn]] procedure attribute.
- * When it does, this hack should be removed.
- * SEE:  gcc.gnu.org/bugzilla/show_bug.cgi?id=51776
- */
-fix = {
-    hackname  = cdef_cplusplus;
-    files     = sys/cdefs.h;
-    select    = '\[\[noreturn\]\]';
-    c_fix     = format;
-    c_fix_arg = '__attribute__((__noreturn__))';
-    test_text = "#define _Noreturn	[[noreturn]]";
-};
-
-/*
  *  Fix various macros used to define ioctl numbers.
  *  The traditional syntax was:
  *
@@ -1170,7 +1214,6 @@
     test_text = "#define TCTRLFOO BSD43_CTRL(T, 1)";
 };
 
-
 /*
  *  sys/mman.h on HP/UX is not C++ ready,
  *  even though NO_IMPLICIT_EXTERN_C is defined on HP/UX.
@@ -1199,6 +1242,32 @@
 };
 
 /*
+ *  macOS 10.12 <AvailabilityInternal.h> uses __attribute__((availability))
+ *  unconditionally.
+ */
+fix = {
+    hackname  = darwin_availabilityinternal;
+    mach      = "*-*-darwin*";
+    files     = AvailabilityInternal.h;
+    select    = "#define[ \t]+(__API_[ADU]\\([^)]*\\)).*";
+    c_fix     = format;
+    c_fix_arg = <<- _EOFix_
+	#if defined(__has_attribute)
+	  #if __has_attribute(availability)
+	%0
+	  #else
+	    #define %1
+	  #endif
+	#else
+	    #define %1
+	#endif
+	_EOFix_;
+
+    test_text = "#define __API_A(x) __attribute__((availability(__API_AVAILABLE_PLATFORM_##x)))\n"
+		"#define __API_D(msg,x) __attribute__((availability(__API_DEPRECATED_PLATFORM_##x,message=msg)))";
+};
+
+/*
  *  For the AAB_darwin7_9_long_double_funcs fix to be useful,
  *  you have to not use "" includes.
  */
@@ -1215,7 +1284,6 @@
     test_text = '#include "architecture/ppc/math.h"';
 };
 
-
 /*
  *  On darwin8 and earlier, mach-o/swap.h isn't properly guarded
  *  by 'extern "C"'.  On darwin7 some mach/ headers aren't properly guarded.
@@ -1241,12 +1309,10 @@
   test_text = "extern void swap_fat_header();\n";
 };
 
-
 /*
  * AvailabilityMacros.h on Darwin breaks with GCC 4.0, because of
  * bad __GNUC__ tests.
  */
-
 fix = {
   hackname  = darwin_gcc4_breakage;
   mach      = "*-*-darwin*";
@@ -1258,6 +1324,76 @@
   	      "(__GNUC_MINOR__ >= 1)\n";
 };
 
+/*
+ *  Before Mac OS X 10.8 <i386/setjmp.h> doesn't mark longjump noreturn.
+ */
+fix = {
+    hackname  = darwin_longjmp_noreturn;
+    mach      = "*-*-darwin*";
+    files     = "i386/setjmp.h";
+    bypass    = "__dead2";
+    select    = "(.*longjmp\\(.*jmp_buf.*[^)]+\\));";
+    c_fix     = format;
+    c_fix_arg = "%1 __attribute__ ((__noreturn__));";
+
+    test_text = "void siglongjmp(sigjmp_buf, int);";
+};
+
+/*
+ *  Mac OS X 10.11 <os/trace.h> uses attribute on function definition.
+ */
+fix = {
+  hackname  = darwin_os_trace_1;
+  mach      = "*-*-darwin*";
+  files     = os/trace.h;
+  select    = "^(_os_trace_verify_printf.*) (__attribute__.*)";
+  c_fix     = format;
+  c_fix_arg = "%1";
+  test_text = "_os_trace_verify_printf(const char *msg, ...) __attribute__((format(printf, 1, 2)))";
+};
+
+/*
+ *  Mac OS X 10.1[012] <os/trace.h> os_trace_payload_t typedef uses Blocks
+ *  extension without guard.
+ */
+fix = {
+  hackname  = darwin_os_trace_2;
+  mach      = "*-*-darwin*";
+  files     = os/trace.h;
+  select    = "typedef.*\\^os_trace_payload_t.*";
+  c_fix     = format;
+  c_fix_arg = "#if __BLOCKS__\n%0\n#endif";
+  test_text = "typedef void (^os_trace_payload_t)(xpc_object_t xdict);";
+};
+
+/*
+ *  In Mac OS X 10.1[012] <os/trace.h>, need to guard users of
+ *  os_trace_payload_t typedef, too.
+ */
+fix = {
+  hackname  = darwin_os_trace_3;
+  mach      = "*-*-darwin*";
+  files     = os/trace.h;
+  select    = <<- _EOSelect_
+	__(API|OSX)_.*
+	OS_EXPORT.*
+	.*
+	_os_trace.*os_trace_payload_t payload);
+	_EOSelect_;
+  c_fix     = format;
+  c_fix_arg = "#if __BLOCKS__\n%0\n#endif";
+  test_text = <<- _EOText_
+	__API_AVAILABLE(macosx(10.10), ios(8.0), watchos(2.0), tvos(8.0))
+	OS_EXPORT OS_NOTHROW OS_NOT_TAIL_CALLED
+	void
+	_os_trace_with_buffer(void *dso, const char *message, uint8_t type, const void *buffer, size_t buffer_size, os_trace_payload_t payload);
+
+	__OSX_AVAILABLE_STARTING(__MAC_10_12, __IPHONE_10_0)
+	OS_EXPORT OS_NOTHROW
+	void
+	_os_trace_internal(void *dso, uint8_t type, const char *format, const uint8_t *buf, size_t buf_size, os_trace_payload_t payload);
+	_EOText_;
+};
 
 /*
  *  __private_extern__ doesn't exist in FSF GCC.  Even if it did,
@@ -1276,7 +1412,6 @@
 	      "unsigned long *address);\n";
 };
 
-
 /*
  * Darwin headers have a stdint.h that defines UINT8_C and UINT16_C to
  * unsigned constants.
@@ -1293,7 +1428,6 @@
 		"#define UINT16_C(v)  (v ## U)";
 };
 
-
 /*
  * Darwin headers have a stdint.h that defines INTPTR_MIN and INTPTR_MAX
  * with wrong types.
@@ -1326,7 +1460,6 @@
 		"#endif";
 };
 
-
 /*
  * Darwin headers have a stdint.h that defines UINTPTR_MAX with a wrong type.
  */
@@ -1352,7 +1485,6 @@
 		"#endif";
 };
 
-
 /*
  * Darwin headers have a stdint.h that defines SIZE_MAX with a wrong type.
  */
@@ -1378,7 +1510,6 @@
 		"#endif";
 };
 
-
 /*
  * Darwin headers have a stdint.h that defines {U,}INTMAX_{MIN,MAX}
  * with a wrong type.
@@ -1407,7 +1538,6 @@
 		"#define UINTMAX_MAX       UINT64_MAX";
 };
 
-
 /*
  * Darwin headers have a stdint.h that defines {U,}INTMAX_C
  * with a wrong type.
@@ -1440,7 +1570,6 @@
 		"#endif";
 };
 
-
 /*
  * Darwin headers have a stdint.h that defines {U,}INTMAX_C
  * with a wrong type.
@@ -1463,7 +1592,6 @@
 		"#define UINTMAX_C(v) (v ## ULL)";
 };
 
-
 /*
  *  Fix <c_asm.h> on Digital UNIX V4.0:
  *  It contains a prototype for a DEC C internal asm() function,
@@ -1481,7 +1609,6 @@
     "};\n#pragma intrinsic( dasm )\n/* END ASM TEST*/";
 };
 
-
 /*
  * Fix typo in <wchar.h> on DJGPP 2.03.
  */
@@ -1497,7 +1624,6 @@
                 "extern __DJ_wint_t x;\n";
 };
 
-
 /*
  * Fix these Sun OS files to avoid an invalid identifier in an #ifdef.
  */
@@ -1512,6 +1638,59 @@
     test_text = "#ifdef ecd.cursor\n#error bogus\n#endif /* ecd+cursor */";
 };
 
+/*
+ *  Incorrect feraiseexcept extern inline in bits/fenv.h on x86_64
+ *  that fails when compiling for SSE-less 32-bit x86.
+ */
+fix = {
+    hackname  = feraiseexcept_nosse_divbyzero;
+    mach      = 'i[34567]86-*-linux*', 'x86*-linux*', 'amd64-*-linux*';
+    files     = bits/fenv.h, '*/bits/fenv.h';
+    select    = "^([\t ]*)__asm__ __volatile__ \\(\"divss %1, %0 *\" : "
+		": \"x\" \\(__f\\), \"x\" \\(__g\\)\\);$";
+    bypass    = "\"fdivp .*; fwait\"";
+    
+    c_fix     = format;
+    c_fix_arg = <<- _EOText_
+	# ifdef __SSE_MATH__
+	%0
+	# else
+	%1__asm__ __volatile__ ("fdivp %%%%st, %%%%st(1); fwait"
+	%1			: "=t" (__f) : "0" (__f), "u" (__g) : "st(1)");
+	# endif
+	_EOText_;
+
+    test_text = <<- _EOText_
+	  __asm__ __volatile__ ("divss %1, %0" : : "x" (__f), "x" (__g));
+	_EOText_;
+};
+
+/*
+ *  Incorrect feraiseexcept extern inline in bits/fenv.h on x86_64
+ *  that fails when compiling for SSE-less 32-bit x86.
+ */
+fix = {
+    hackname  = feraiseexcept_nosse_invalid;
+    mach      = 'i[34567]86-*-linux*', 'x86*-linux*', 'amd64-*-linux*';
+    files     = bits/fenv.h, '*/bits/fenv.h';
+    select    = "^([\t ]*)__asm__ __volatile__ \\(\"divss %0, %0 *\" : "
+		": \"x\" \\(__f\\)\\);$";
+    bypass    = "\"fdiv .*; fwait\"";
+    
+    c_fix     = format;
+    c_fix_arg = <<- _EOText_
+	# ifdef __SSE_MATH__
+	%0
+	# else
+	%1__asm__ __volatile__ ("fdiv %%%%st, %%%%st(0); fwait"
+	%1			: "=t" (__f) : "0" (__f));
+	# endif
+	_EOText_;
+
+    test_text = <<- _EOText_
+	  __asm__ __volatile__ ("divss %0, %0" : : "x" (__f));
+	_EOText_;
+};
 
 /*
  *  Between 8/24/1998 and 2/17/2001, FreeBSD system headers presume
@@ -1529,7 +1708,6 @@
     test_text = '#if __GNUC__ == 2 && __GNUC_MINOR__ >= 7';
 };
 
-
 /*
  *  Some releases of FreeBSD 4 and FreeBSD 5.0 and 5.1 system headers presume
  *  neither the existence of GCC 4 nor its exact feature set yet break
@@ -1545,7 +1723,6 @@
     test_text = '#if __GNUC__ == 2 && __GNUC_MINOR__ >= 7 || __GNUC__ == 3';
 };
 
-
 /*
  *  Some versions of glibc don't expect the C99 inline semantics.
  */
@@ -1563,7 +1740,6 @@
 	EOT;
 };
 
-
 /*
  *  Similar, but a version that didn't have __NO_INLINE__
  */
@@ -1581,7 +1757,6 @@
 	EOT;
 };
 
-
 /*
  * The glibc_c99_inline_1 fix should have fixed everything.  Unfortunately
  * there are many glibc headers which do not respect __USE_EXTERN_INLINES.
@@ -1617,7 +1792,9 @@
 	EOT;
 };
 
-
+/*
+ * glibc_c99_inline_3
+ */
 fix = {
     hackname  = glibc_c99_inline_3;
     files     = bits/string2.h, '*/bits/string2.h';
@@ -1635,10 +1812,13 @@
 	EOT;
 };
 
-
+/*
+ * glibc_c99_inline_4
+ */
 fix = {
     hackname  = glibc_c99_inline_4;
-    files     = sys/sysmacros.h, '*/sys/sysmacros.h', wchar.h, '*/wchar.h';
+    files     = sys/sysmacros.h, '*/sys/sysmacros.h', wchar.h, '*/wchar.h',
+    pthread.h, '*/pthread.h';
     bypass    = "__extern_inline|__gnu_inline__";
     select    = "(^| )extern __inline";
     c_fix     = format;
@@ -1649,7 +1829,6 @@
 	EOT;
 };
 
-
 /*  glibc-2.3.5 defines pthread mutex initializers incorrectly,
  *  so we replace them with versions that correspond to the
  *  definition.
@@ -1723,7 +1902,6 @@
 	_EOText_;
 };
 
-
 /* glibc versions before 2.5 have a version of stdint.h that defines
    UINT8_C and UINT16_C to produce unsigned constants, as do uClibc
    versions with stdint.h based on those glibc versions.  */
@@ -1734,17 +1912,18 @@
     c_fix     = format;
     c_fix_arg = "# define UINT8_C(c)\tc\n# define UINT16_C(c)\tc";
     c_fix_arg = "# define UINT8_C\\(c\\)\tc ## U\n# define UINT16_C\\(c\\)\tc ## U";
-    test_text = "/* This file is part of the GNU C Library.  */\n# define UINT8_C(c)\tc ## U\n# define UINT16_C(c)\tc ## U";
+    test_text = "/* This file is part of the GNU C Library.  */\n"
+        "# define UINT8_C(c)\tc ## U\n"
+        "# define UINT16_C(c)\tc ## U";
 };
 
-
 /* Some versions of glibc have a version of bits/string2.h that
    produces "value computed is not used" warnings from strncpy; fix
    this definition by using __builtin_strncpy instead as in newer
    versions.  */
 fix = {
     hackname  = glibc_strncpy;
-    files     = bits/string2.h;
+    files     = bits/string2.h, '*/bits/string2.h';
     bypass    = "__builtin_strncpy";
     c_fix     = format;
     c_fix_arg = "#  define strncpy(dest, src, n) __builtin_strncpy (dest, src, n)";
@@ -1769,7 +1948,9 @@
     select    = '\(\(\(type\) 0.25\) && \(\(type\) 0.25 - 1\)\)';
     bypass    = "__floating_type\\(type\\) \\\\\n.*__builtin_classify_type";
     c_fix     = format;
-    c_fix_arg = "(__builtin_classify_type ((type) 0) == 8 || (__builtin_classify_type ((type) 0) == 9 && __builtin_classify_type (__real__ ((type) 0)) == 8))";
+    c_fix_arg = "(__builtin_classify_type ((type) 0) == 8 || "
+        "(__builtin_classify_type ((type) 0) == 9 && "
+            "__builtin_classify_type (__real__ ((type) 0)) == 8))";
     test_text = "# define __floating_type(type) (((type) 0.25) && ((type) 0.25 - 1))";
 };
 
@@ -1801,7 +1982,6 @@
                 "typedef ushort_t wchar_t; /* ushort_t */";
 };
 
-
 /*
  *  Fix HP & Sony's use of "../machine/xxx.h"
  *  to refer to:  <machine/xxx.h>
@@ -1821,7 +2001,6 @@
     test_text = ' # include "../machine/mumble.h"';
 };
 
-
 /*
  *  Check for (...) in C++ code in HP/UX sys/file.h.
  */
@@ -1837,7 +2016,6 @@
     test_text = "extern void foo(...); /* HPUX_SOURCE - bad varargs */";
 };
 
-
 /*
  *  Un-Hide a series of five FP defines from post-1999 compliance GCC:
  *  FP_NORMAL, FP_ZERO, FP_INFINITE, FP_SUBNORMAL and FP_NAN
@@ -1871,7 +2049,6 @@
             "#  define FP_NAN        4\n";
 };
 
-
 /*
  * Delete C++ double pow (double, int) inline function from HP-UX 10 & 11
  * math.h to prevent clash with define in c_std/bits/std_cmath.h.
@@ -1919,7 +2096,6 @@
             "   }\n";
 };
 
-
 /*
  *  Fix hpux 10.X missing ctype declarations 1
  */
@@ -1941,7 +2117,6 @@
     test_text = "#  define _toupper(__c)         __toupper(__c)\n";
 };
 
-
 /*
  *  Fix hpux 10.X missing ctype declarations 2
  */
@@ -1982,7 +2157,6 @@
 		"     extern unsigned int *__SB_masks;\n";
 };
 
-
 /*
  *  Fix hpux 10.X missing stdio declarations
  */
@@ -2004,6 +2178,23 @@
     test_text = "#  define _iob __iob\n";
 };
 
+/*
+ *  The HP-UX stddef.h is replaced by gcc's. It doesn't include sys/stdsyms.h.
+ *  As a result, we need to include sys/stdsyms.h in alloca.h.
+ */
+fix = {
+    hackname  = hppa_hpux11_alloca;
+    mach      = "hppa*-*-hpux11*";
+    files     = alloca.h;
+    select    = "#ifndef _STDDEF_INCLUDED";
+    c_fix     = format;
+    c_fix_arg = "#ifndef _SYS_STDSYMS_INCLUDED\n"
+		"#  include <sys/stdsyms.h>\n"
+		"#endif /* _SYS_STDSYMS_INCLUDED */\n\n"
+		"%0";
+
+    test_text = "#ifndef _STDDEF_INCLUDED";
+};
 
 /*
  *  Make sure hpux defines abs in header.
@@ -2018,6 +2209,46 @@
     test_text = "#ifndef _MATH_INCLUDED";
 };
 
+/*
+ *  Fix hpux11 __LWP_RWLOCK_VALID define
+ */
+fix = {
+    hackname  = hpux11_lwp_rwlock_valid;
+    mach      = "*-hp-hpux11*";
+    files     = sys/pthread.h;
+    select    = "#define __LWP_RWLOCK_VALID[ \t]*0x8c91";
+    c_fix     = format;
+    c_fix_arg = "#define __LWP_RWLOCK_VALID              -29551";
+    test_text = "#define __LWP_RWLOCK_VALID 0x8c91";
+};
+
+/*
+ * hpux sendfile()
+ */
+fix = {
+    hackname  = hpux11_extern_sendfile;
+    mach      = "*-hp-hpux11.[12]*";
+    files     = sys/socket.h;
+    select    = "^[ \t]*extern sbsize_t sendfile.*\n.*, int\\)\\);\n";
+    c_fix     = format;
+    c_fix_arg = "#ifndef _APP32_64BIT_OFF_T\n%0#endif\n";
+    test_text = "   extern sbsize_t sendfile __((int, int, off_t, bsize_t,\n"
+        "                               const struct iovec *, int));\n";
+};
+
+/*
+ * hpux sendpath()
+ */
+fix = {
+    hackname  = hpux11_extern_sendpath;
+    mach      = "*-hp-hpux11.[12]*";
+    files     = sys/socket.h;
+    select    = "^[ \t]*extern sbsize_t sendpath.*\n.*, int\\)\\);\n";
+    c_fix     = format;
+    c_fix_arg = "#ifndef _APP32_64BIT_OFF_T\n%0#endif\n";
+    test_text = "   extern sbsize_t sendpath __((int, int, off_t, bsize_t,\n"
+        "                               const struct iovec *, int));\n";
+};
 
 /*
  *  Keep HP-UX 11 from stomping on C++ math namespace
@@ -2025,9 +2256,9 @@
  */
 fix = {
     hackname  = hpux11_fabsf;
+    mach      = "*-hp-hpux11*";
     files     = math.h;
     select    = "^[ \t]*#[ \t]*define[ \t]+fabsf\\(.*";
-    bypass    = "__cplusplus";
 
     c_fix     = format;
     c_fix_arg = "#ifndef __cplusplus\n%0\n#endif";
@@ -2038,22 +2269,38 @@
     "#endif";
 };
 
+/*
+ *  The definitions for PTHREAD_MUTEX_INITIALIZER and similar initializers
+ *  in pthread.h need to be constant expressions to be standard complient.
+ *  As a result, we need to remove the void * casts in the initializers
+ *  (see hpux11_pthread_const) and to change the __(M|C|RW)POINTER defines
+ *  to use the long type.
+ */
+fix = {
+    hackname  = hpux11_pthread_pointer;
+    mach      = "*-hp-hpux11.[0-3]*";
+    files     = sys/pthread.h;
+    select    = "(void[ \t]*\\*)(m|c|rw)(_ptr)";
+
+    c_fix     = format;
+    c_fix_arg = "long\t%2%3";
+    test_text = "#define __MPOINTER\t\tvoid\t *m_ptr";
+};
 
 /*
- *  Fix C99 constant in __POINTER_SET define.
+ *  Remove void pointer cast and fix C99 constant in __POINTER_SET defines.
  */
 fix = {
     hackname  = hpux11_pthread_const;
     mach      = "*-hp-hpux11.[0-3]*";
     files     = sys/pthread.h;
-    select    = "^#define[ \t]*__POINTER_SET[ \t]*\\(\\(void \\*\\) 1LL\\)";
+    select    = "^(#define[ \t]+__POINTER_SET[ \t0,]*)(.*\\))";
 
     c_fix     = format;
-    c_fix_arg = "#define __POINTER_SET\t\t((void *) 1L)";
+    c_fix_arg = "%11";
     test_text = "#define __POINTER_SET\t\t((void *) 1LL)";
 };
 
-
 /*
  * Prevent HP-UX 11 from defining __size_t and preventing size_t from
  * being defined by having it define _hpux_size_t instead.
@@ -2071,7 +2318,6 @@
     "       extern int getpwuid_r( char *, __size_t, struct passwd **);\n";
 };
 
-
 /*
  *  Fix hpux 11.00 broken snprintf declaration
  *  (third argument is char *, needs to be const char * to prevent
@@ -2105,6 +2351,19 @@
                                      ' __va__list);';
 };
 
+/*
+ *  Fix missing const in hpux vsscanf declaration
+ */
+fix = {
+    hackname = hpux_vsscanf;
+    mach    = "*-*-hpux*";
+    files   = stdio.h;
+    select  = '(extern int vsscanf\()char';
+    c_fix   = format;
+    c_fix_arg = "%1const char";
+
+    test_text = 'extern int vsscanf(char *, const char *, __va_list);';
+};
 
 /*
  *  get rid of bogus inline definitions in HP-UX 8.0
@@ -2123,6 +2382,75 @@
                 "inline double sqr(double v) { return v**0.5; }";
 };
 
+/*
+ * hpux intptr
+ */
+fix = {
+    hackname  = hpux_c99_intptr;
+    mach      = "*-hp-hpux11.3*";
+    files     = stdint-hpux11.h, stdint.h;
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*PTRDIFF_MAX[ \t]*"
+        "INT32_MAX[ \t]*$@#define PTRDIFF_MAX (2147483647l)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*PTRDIFF_MIN[ \t]*"
+        "INT32_MIN[ \t]*$@#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*INTPTR_MAX[ \t]*"
+        "INT32_MAX[ \t]*$@#define INTPTR_MAX (2147483647l)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*INTPTR_MIN[ \t]*"
+        "INT32_MIN[ \t]*$@#define INTPTR_MIN (-INTPTR_MAX - 1)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINTPTR_MAX[ \t]*"
+        "UINT32_MAX[ \t]*$@#define UINTPTR_MAX (4294967295ul)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*SIZE_MAX[ \t]*"
+        "UINT32_MAX[ \t]*$@#define SIZE_MAX (4294967295ul)@";
+    test_text = "#define PTRDIFF_MAX	INT32_MAX\n"
+		"#define PTRDIFF_MIN	INT32_MIN\n"
+		"#define INTPTR_MAX	INT32_MAX\n"
+		"#define INTPTR_MIN	INT32_MIN\n"
+		"#define UINTPTR_MAX	UINT32_MAX\n"
+		"#define SIZE_MAX	UINT32_MAX\n";
+};
+
+/*
+ * These hacks are need in inttypes.h on 11.23 and in stdint.h on 11.31.
+ */
+fix = {
+    hackname  = hpux_c99_inttypes;
+    mach      = "*-hp-hpux11.[23]*";
+    files     = inttypes.h;
+    files     = stdint-hpux11.h, stdint.h;
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINT8_C(__c)[ \t]*"
+        "__CONCAT_U__(__c)[ \t]*$@#define UINT8_C(__c) (__c)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINT16_C(__c)[ \t]*"
+        "__CONCAT_U__(__c)[ \t]*$@#define UINT16_C(__c) (__c)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*INT32_C(__c)[ \t]*"
+        "__CONCAT__(__c,l)[ \t]*$@#define INT32_C(__c) (__c)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINT32_C(__c)[ \t].*$@"
+        "#define UINT32_C(__c) __CONCAT__(__c,u)@";
+    test_text = "#define UINT8_C(__c)     __CONCAT_U__(__c)\n"
+                "#define UINT16_C(__c)    __CONCAT_U__(__c)\n"
+		"#define INT32_C(__c)     __CONCAT__(__c,l)\n"
+		"#define UINT32_C(__c)     __CONCAT__(__c,ul)\n";
+};
+
+/*
+ * These hacks are need in inttypes.h on 11.23 and in stdint.h on 11.31.
+ */
+fix = {
+    hackname  = hpux_c99_inttypes2;
+    mach      = "*-hp-hpux11.2*";
+    files     = stdint-hpux11.h, stdint.h;
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*INT8_C(__c)[ \t]*"
+        "((signed char)(__c))[ \t]*$@#define INT8_C(__c) (__c)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINT8_C(__c)[ \t]*"
+        "((unsigned char)(__c))[ \t]*$@#define UINT8_C(__c) (__c)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*INT16_C(__c)[ \t]*"
+        "((short)(__c))[ \t]*$@#define INT16_C(__c) (__c)@";
+    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINT16_C(__c)[ \t]*"
+        "((unsigned short)(__c))[ \t]*$@#define UINT16_C(__c) (__c)@";
+    test_text = "#  define	INT8_C(__c)	((signed char)(__c))\n"
+                "#  define      UINT8_C(__c)    ((unsigned char)(__c))\n"
+		"#  define      INT16_C(__c)    ((short)(__c))\n"
+		"#  define	UINT16_C(__c)	((unsigned short)(__c))\n";
+};
 
 /*
  *  Fix hpux broken ctype macros
@@ -2139,6 +2467,25 @@
 		"# define isalpha(__c) (__SB_masks ? __SB_masks[__c] & _IS\n";
 };
 
+/*
+ * hpux errno()
+ */
+fix = {
+    hackname  = hpux_extern_errno;
+    mach      = "*-hp-hpux10.*";
+    mach      = "*-hp-hpux11.[0-2]*";
+    files     = errno.h;
+    select    = "^[ \t]*extern int errno;$";
+    c_fix     = format;
+    c_fix_arg = "#ifdef __cplusplus\n"
+        "extern \"C\" {\n"
+        "#endif\n"
+        "%0\n"
+        "#ifdef __cplusplus\n"
+        "}\n"
+        "#endif";
+    test_text = "   extern int errno;\n";
+};
 
 /*
  *  Fix hpux broken #ifndef _XOPEN_SOURCE_EXTENDED conditional on htonl etc.
@@ -2167,6 +2514,32 @@
                 "#endif  /* ! _XOPEN_SOURCE_EXTENDED */";
 };
 
+/*
+ * These hacks are need in inttypes.h on 11.23 and in stdint.h on 11.31.
+ */
+fix = {
+    hackname  = hpux_imaginary_i;
+    mach      = "ia64-hp-hpux11.*";
+    files     = complex.h;
+    select    = "^[ \t]*#[ \t]*define[ \t]*_Complex_I.*";
+    c_fix     = format;
+    c_fix_arg = "#define _Complex_I (__extension__ 1.0iF)";
+    test_text = "#define _Complex_I (0.f+_Imaginary_I)\n";
+};
+
+/*
+ * These hacks are need in inttypes.h on 11.23 and in stdint.h on 11.31.
+ */
+fix = {
+    hackname  = hpux_inttype_int8_t;
+    mach      = "*-hp-hpux1[01].*";
+    files     = sys/_inttypes.h;
+    select    = "^[ \t]*typedef[ \t]*char[ \t]*int(_least){0,1}8_t.*";
+    c_fix     = format;
+    c_fix_arg = "typedef signed char int%18_t;";
+    test_text = "typedef char int_least8_t;\n"
+                "typedef char int8_t;\n";
+};
 
 /*
  * HP-UX long_double
@@ -2198,84 +2571,18 @@
     hackname  = hpux_long_double_2;
     mach      = "hppa*-*-hpux11.3*";
     files     = stdlib.h;
-    select    = "#[ \t]*if[ \t]*!defined\\(__ia64\\) \\|\\| defined\\(_PROTOTYPES\\) \\|\\| defined\\(_LONG_DOUBLE_STRUCT\\)";
+    select    = "#[ \t]*if[ \t]*!defined\\(__ia64\\) \\|\\| "
+        "defined\\(_PROTOTYPES\\) \\|\\| "
+        "defined\\(_LONG_DOUBLE_STRUCT\\)";
     c_fix     = format;
     c_fix_arg = "#  if !defined(_PROTOTYPES) || defined(_LONG_DOUBLE_STRUCT)";
 
-    test_text = "#  if !defined(__ia64) || !defined(_PROTOTYPES) || defined(_LONG_DOUBLE_STRUCT)\n";
+    test_text = "#  if !defined(__ia64) || "
+        "!defined(_PROTOTYPES) || "
+        "defined(_LONG_DOUBLE_STRUCT)\n";
 };
 
 /*
- *  Fix hpux10.20 <sys/time.h> to avoid invalid forward decl
- */
-fix = {
-    hackname = hpux_systime;
-    files    = sys/time.h;
-    select   = "^extern struct sigevent;";
-
-    c_fix     = format;
-    c_fix_arg = "struct sigevent;";
-
-    test_text = 'extern struct sigevent;';
-};
-
-
-/*
- *  Wrap spu_info in ifdef _KERNEL.  GCC cannot handle an array of unknown
- *  type and mpinfou is only defined when _KERNEL is set.
- */
-fix = {
-    hackname = hpux_spu_info;
-    mach     = "*-hp-hpux*";
-    /*
-     *  It is tempting to omit the first "files" entry.  Do not.
-     *  The testing machinery will take the first "files" entry as the name
-     *  of a test file to play with.  It would be a nuisance to have a directory
-     *  with the name "*".
-     */
-    files    = "ia64/sys/getppdp.h";
-    files    = "*/sys/getppdp.h";
-    select   = "^.*extern.*spu_info.*";
-
-    c_fix     = format;
-    c_fix_arg = "#ifdef _KERNEL\n%0\n#endif";
-
-    test_text = "extern union mpinfou spu_info[];";
-};
-
-fix = {
-    hackname  = hpux11_extern_sendfile;
-    mach      = "*-hp-hpux11.[12]*";
-    files     = sys/socket.h;
-    select    = "^[ \t]*extern sbsize_t sendfile.*\n.*, int\\)\\);\n";
-    c_fix     = format;
-    c_fix_arg = "#ifndef _APP32_64BIT_OFF_T\n%0#endif\n";
-    test_text = "   extern sbsize_t sendfile __((int, int, off_t, bsize_t,\n                               const struct iovec *, int));\n";
-};
-
-fix = {
-    hackname  = hpux11_extern_sendpath;
-    mach      = "*-hp-hpux11.[12]*";
-    files     = sys/socket.h;
-    select    = "^[ \t]*extern sbsize_t sendpath.*\n.*, int\\)\\);\n";
-    c_fix     = format;
-    c_fix_arg = "#ifndef _APP32_64BIT_OFF_T\n%0#endif\n";
-    test_text = "   extern sbsize_t sendpath __((int, int, off_t, bsize_t,\n                               const struct iovec *, int));\n";
-};
-
-fix = {
-    hackname  = hpux_extern_errno;
-    mach      = "*-hp-hpux10.*";
-    mach      = "*-hp-hpux11.[0-2]*";
-    files     = errno.h;
-    select    = "^[ \t]*extern int errno;$";
-    c_fix     = format;
-    c_fix_arg = "#ifdef __cplusplus\nextern \"C\" {\n#endif\n%0\n#ifdef __cplusplus\n}\n#endif";
-    test_text = "   extern int errno;\n";
-};
-
-
-/*
  *  Add missing braces to pthread initializer defines.
  */
 fix = {
@@ -2317,57 +2624,32 @@
 		"}\n";
 };
 
+/*
+ *  Wrap spu_info in ifdef _KERNEL.  GCC cannot handle an array of unknown
+ *  type and mpinfou is only defined when _KERNEL is set.
+ */
 fix = {
-    hackname  = hpux_c99_intptr;
-    mach      = "*-hp-hpux11.3*";
-    files     = stdint-hpux11.h, stdint.h;
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*PTRDIFF_MAX[ \t]*INT32_MAX[ \t]*$@#define PTRDIFF_MAX (2147483647l)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*PTRDIFF_MIN[ \t]*INT32_MIN[ \t]*$@#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*INTPTR_MAX[ \t]*INT32_MAX[ \t]*$@#define INTPTR_MAX (2147483647l)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*INTPTR_MIN[ \t]*INT32_MIN[ \t]*$@#define INTPTR_MIN (-INTPTR_MAX - 1)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINTPTR_MAX[ \t]*UINT32_MAX[ \t]*$@#define UINTPTR_MAX (4294967295ul)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*SIZE_MAX[ \t]*UINT32_MAX[ \t]*$@#define SIZE_MAX (4294967295ul)@";
-    test_text = "#define PTRDIFF_MAX	INT32_MAX\n"
-		"#define PTRDIFF_MIN	INT32_MIN\n"
-		"#define INTPTR_MAX	INT32_MAX\n"
-		"#define INTPTR_MIN	INT32_MIN\n"
-		"#define UINTPTR_MAX	UINT32_MAX\n"
-		"#define SIZE_MAX	UINT32_MAX\n";
-};
-
+    hackname = hpux_spu_info;
+    mach     = "*-hp-hpux*";
 /*
- * These hacks are need in inttypes.h on 11.23 and in stdint.h on 11.31.
+     *  It is tempting to omit the first "files" entry.  Do not.
+     *  The testing machinery will take the first "files" entry as the name
+     *  of a test file to play with.  It would be a nuisance to have a directory
+     *  with the name "*".
  */
+    files    = "ia64/sys/getppdp.h";
+    files    = "*/sys/getppdp.h";
+    select   = "^.*extern.*spu_info.*";
 
-fix = {
-    hackname  = hpux_c99_inttypes;
-    mach      = "*-hp-hpux11.[23]*";
-    files     = inttypes.h;
-    files     = stdint-hpux11.h, stdint.h;
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINT8_C(__c)[ \t]*__CONCAT_U__(__c)[ \t]*$@#define UINT8_C(__c) (__c)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINT16_C(__c)[ \t]*__CONCAT_U__(__c)[ \t]*$@#define UINT16_C(__c) (__c)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*INT32_C(__c)[ \t]*__CONCAT__(__c,l)[ \t]*$@#define INT32_C(__c) (__c)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINT32_C(__c)[ \t].*$@#define UINT32_C(__c) __CONCAT__(__c,u)@";
-    test_text = "#define UINT8_C(__c)     __CONCAT_U__(__c)\n"
-                "#define UINT16_C(__c)    __CONCAT_U__(__c)\n"
-		"#define INT32_C(__c)     __CONCAT__(__c,l)\n"
-		"#define UINT32_C(__c)     __CONCAT__(__c,ul)\n";
-};
+    c_fix     = format;
+    c_fix_arg = "#ifdef _KERNEL\n%0\n#endif";
 
-fix = {
-    hackname  = hpux_c99_inttypes2;
-    mach      = "*-hp-hpux11.2*";
-    files     = stdint-hpux11.h, stdint.h;
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*INT8_C(__c)[ \t]*((signed char)(__c))[ \t]*$@#define INT8_C(__c) (__c)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINT8_C(__c)[ \t]*((unsigned char)(__c))[ \t]*$@#define UINT8_C(__c) (__c)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*INT16_C(__c)[ \t]*((short)(__c))[ \t]*$@#define INT16_C(__c) (__c)@";
-    sed       = "s@^[ \t]*#[ \t]*define[ \t]*UINT16_C(__c)[ \t]*((unsigned short)(__c))[ \t]*$@#define UINT16_C(__c) (__c)@";
-    test_text = "#  define	INT8_C(__c)	((signed char)(__c))\n"
-                "#  define      UINT8_C(__c)    ((unsigned char)(__c))\n"
-		"#  define      INT16_C(__c)    ((short)(__c))\n"
-		"#  define	UINT16_C(__c)	((unsigned short)(__c))\n";
+    test_text = "extern union mpinfou spu_info[];";
 };
 
+/*
+ * These hacks are need in inttypes.h on 11.23 and in stdint.h on 11.31.
+ */
 fix = {
     hackname  = hpux_stdint_least_fast;
     mach      = "*-hp-hpux11.2*";
@@ -2378,28 +2660,35 @@
     c-fix-arg = "#  define	UINT_%164_MAX	__UINT64_MAX__";
     test-text = "#  define       UINT_FAST64_MAX        ULLONG_MAX\n"
 		"#  define       UINT_LEAST64_MAX        ULLONG_MAX\n";
-	_EOFix_;
 };
 
+/*
+ *  Add noreturn attribute to longjmp declarations in hpux <setjmp.h>
+ */
 fix = {
-    hackname  = hpux_inttype_int8_t;
-    mach      = "*-hp-hpux1[01].*";
-    files     = sys/_inttypes.h;
-    select    = "^[ \t]*typedef[ \t]*char[ \t]*int(_least){0,1}8_t.*";
+    hackname = hpux_longjmp;
+    mach     = "*-hp-hpux*";
+    files    = setjmp.h;
+    select   = "^[ \t]*extern[ \t]+void[ \t]+.*longjmp[ \t]*\(__\\(\\(.*int\\)\\)|\\(.*int\\)|\\(\\)\)";
+
     c_fix     = format;
-    c_fix_arg = "typedef signed char int%18_t;";
-    test_text = "typedef char int_least8_t;\n"
-                "typedef char int8_t;\n";
+    c_fix_arg = "%0 __attribute__ ((__noreturn__))";
+
+    test_text = 'extern void	longjmp __((jmp_buf, int));';
 };
 
+/*
+ *  Fix hpux10.20 <sys/time.h> to avoid invalid forward decl
+ */
 fix = {
-    hackname  = hpux_imaginary_i;
-    mach      = "ia64-hp-hpux11.*";
-    files     = complex.h;
-    select    = "^[ \t]*#[ \t]*define[ \t]*_Complex_I.*";
+    hackname = hpux_systime;
+    files    = sys/time.h;
+    select   = "^extern struct sigevent;";
+
     c_fix     = format;
-    c_fix_arg = "#define _Complex_I (__extension__ 1.0iF)";
-    test_text = "#define _Complex_I (0.f+_Imaginary_I)\n";
+    c_fix_arg = "struct sigevent;";
+
+    test_text = 'extern struct sigevent;';
 };
 
 /*
@@ -2407,7 +2696,7 @@
  */
 fix = {
     hackname  = huge_val_hex;
-    files     = bits/huge_val.h;
+    files     = bits/huge_val.h, '*/bits/huge_val.h';
     select    = "^#[ \t]*define[ \t]*HUGE_VAL[ \t].*0x1\\.0p.*";
     bypass    = "__builtin_huge_val";
 
@@ -2417,13 +2706,12 @@
     test_text = "# define HUGE_VAL\t(__extension__ 0x1.0p2047)";
 };
 
-
 /*
  *  Fix glibc definition of HUGE_VALF in terms of hex floating point constant
  */
 fix = {
     hackname  = huge_valf_hex;
-    files     = bits/huge_val.h;
+    files     = bits/huge_val.h, '*/bits/huge_val.h';
     select    = "^#[ \t]*define[ \t]*HUGE_VALF[ \t].*0x1\\.0p.*";
     bypass    = "__builtin_huge_valf";
 
@@ -2433,13 +2721,12 @@
     test_text = "#  define HUGE_VALF (__extension__ 0x1.0p255f)";
 };
 
-
 /*
  *  Fix glibc definition of HUGE_VALL in terms of hex floating point constant
  */
 fix = {
     hackname  = huge_vall_hex;
-    files     = bits/huge_val.h;
+    files     = bits/huge_val.h, '*/bits/huge_val.h';
     select    = "^#[ \t]*define[ \t]*HUGE_VALL[ \t].*0x1\\.0p.*";
     bypass    = "__builtin_huge_vall";
 
@@ -2449,7 +2736,6 @@
     test_text = "#  define HUGE_VALL (__extension__ 0x1.0p32767L)";
 };
 
-
 /*
  *  Fix return type of abort and free
  */
@@ -2467,7 +2753,6 @@
                 "extern int exit(void*);";
 };
 
-
 /*
  *  Fix various macros used to define ioctl numbers.
  *  The traditional syntax was:
@@ -2512,7 +2797,6 @@
                 "BSD43__IOWR(T, 1) /* Some are multi-line */";
 };
 
-
 /*
  *  Check for missing ';' in struct
  */
@@ -2529,6 +2813,118 @@
     "}; /* mumbled struct */\n";
 };
 
+/* REINTRODUCE */
+
+/*
+ *  IRIX 5.x's stdio.h and IRIX 6.5's internal/stdio_core.h declare
+ *  some functions that take a va_list as
+ *  taking char *.  However, GCC uses void * for va_list, so
+ *  calling vfprintf with a va_list fails in C++.  */
+fix = {
+    hackname  = irix_stdio_va_list;
+    files     = stdio.h;
+    files     = internal/stdio_core.h;
+
+    select = '/\* va_list \*/ char \*';
+    c_fix  = format;
+    c_fix_arg = "__gnuc_va_list";
+    test_text =
+    "extern int printf( const char *, /* va_list */ char * );";
+};
+
+/*
+ *  IRIX 6.5.1[89] <internal/sgimacros.h> unconditionally defines
+ *  __restrict as restrict iff __c99.  This is wrong for C++, which
+ *  needs many C99 features, but only supports __restrict.
+ */
+fix = {
+    hackname  = irix___restrict;
+    files     = internal/sgimacros.h;
+    select    = "(#ifdef __c99\n)(#[ \t]*define __restrict restrict)";
+
+    mach      = "mips-sgi-irix6.5";
+    c_fix     = format;
+    c_fix_arg = "%1"
+		"#  ifndef __cplusplus\n%2\n#  endif";
+
+    test_text = "#ifdef __c99\n#  define __restrict restrict";
+};
+
+/*
+ * IRIX 6.5.22 <internal/math_core.h> uses the SGI c99 __generic() intrinsic
+ * to define the fpclasify, isfinite, isinf, isnan, isnormal and signbit 
+ * functions.
+ *
+ * This was probably introduced around IRIX 6.5.18
+ */
+fix = {
+    hackname  = irix___generic1;
+    files     = internal/math_core.h;
+    mach      = "mips-sgi-irix6.5";
+    select    = "#define ([a-z]+)\\(x\\) *__generic.*";
+
+    c_fix     = format;
+    c_fix_arg = "extern int %1(double);\n"
+		"extern int %1f(float);\n"
+		"extern int %1l(long double);\n"
+	    "#if !defined(__cplusplus)\n"
+		"#define %1(x) (sizeof(x) == sizeof(double) ? _%1(x) \\\n"
+		"               : sizeof(x) == sizeof(float) ? _%1f(x) \\\n"
+		"               : _%1l(x))\n"
+	    "#else\n"
+	    "namespace std\n"
+	    "{\n"
+	    "    inline int %1(double x) { return _%1(x); };\n"
+	    "    inline int %1f(float x) { return _%1f(x); };\n"
+	    "    inline int %1l(long double x) { return _%1l(x); };\n"
+	    "}\n"
+        "#endif\n";
+
+    test_text = 
+      "#define isnan(x) __generic(x,,, _isnan, _isnanf, _isnanl,,,)(x)\n";
+};
+
+/* Likewise <internal/math_core.h> on IRIX 6.5.19 and later uses the SGI
+   compiler's __generic intrinsic to define isgreater, isgreaterequal,
+   isless, islessequal, islessgreater and isunordered functions.  */
+fix = {
+    hackname  = irix___generic2;
+    files     = internal/math_core.h;
+    mach      = "mips-sgi-irix6.5";
+    select    = "#define ([a-z]+)\\(x,y\\) *__generic.*";
+
+    c_fix     = format;
+    c_fix_arg = "#define %1(x,y) \\\n"
+		"  ((sizeof(x)<=4 && sizeof(y)<=4) ? _%1f(x,y) \\\n"
+		"   : (sizeof(x)<=8 && sizeof(y)<=8) ? _%1(x,y) \\\n"
+		"   : _%1l(x,y))\n";
+
+    test_text = 
+      "#define isless(x,y)         __generic(x,y,, _isless, _islessf, _islessl,,,)(x,y)";
+};
+
+
+/*
+ * IRIX 6.5 complex.h defines _Complex_I and _Imaginary_I in terms of __I__,
+ * which is a MIPSpro compiler builtin.  Remove _Imaginary_I and imaginary
+ * definitions which are not supported by GCC. 
+ */
+fix = {
+    hackname  = irix_complex;
+    mach      = "mips-sgi-irix6.5";
+    files     = complex.h;
+    select    = "#define[ \t]_Complex_I[ \t]\\(\\(float[ \t]_Complex\\)[ \t]\\(__I__\\)\\)";
+    sed	      = "s/#define[ \t]_Complex_I[ \t]((float[ \t]_Complex)[ \t](__I__))/"
+		"#define _Complex_I (__extension__ 1.0iF)/";
+    sed	      = "/#define[ \t]imaginary[ \t]_Imaginary/d";
+    sed	      = "/#define[ \t]_Imaginary_I/d";
+    sed       = "s/#define[ \t]I[ \t]_Imaginary_I/#define I _Complex_I/";
+    test_text = "#define _Complex_I ((float _Complex) (__I__))\n"
+		"#define imaginary _Imaginary\n"
+		"// #define _Imaginary_I ((float _Imaginary) 1)\n"
+		"#define _Imaginary_I __I__\n"
+		"#define I _Imaginary_I";
+};
 
 /*
  *  Non-traditional "const" declaration in Irix's limits.h.
@@ -2542,23 +2938,170 @@
     test_text   = "extern const char limit; /* test limits */";
 };
 
+/*
+ *  IRIX 6.5 PTHREAD_*_INITIALIZER need an additional level of braces in
+ *  <pthread.h>.
+ */
+fix = {
+    hackname    = irix_pthread_init;
+    files       = pthread.h;
+    select      = "^(#define[ \t]+PTHREAD_.*_INITIALIZER[ \t]+)(\\{ 0 \\})";
+
+    mach	= "mips-sgi-irix6.5";
+    c_fix  = format;
+    c_fix_arg   = "%1{ %2 }";
+    test_text   = "#define PTHREAD_MUTEX_INITIALIZER	{ 0 }\n"
+		  "#define PTHREAD_COND_INITIALIZER	{ 0 }\n"
+		  "#define PTHREAD_RWLOCK_INITIALIZER	{ 0 }";
+};
+
 
 /*
- *  IRIX 5.x's stdio.h declares some functions that take a va_list as
- *  taking char *.  However, GCC uses void * for va_list, so
- *  calling vfprintf with a va_list fails in C++.  */
+ *  IRIX 6.5.1[78] <sys/socket.h> has a broken definition of socklen_t.
+ *  Various socket function prototypes use different types instead,
+ *  depending on the API in use (BSD, XPG4/5), but the socklen_t
+ *  definition doesn't reflect this (SGI Bug Id 864477, fixed in
+ *  IRIX 6.5.19).
+ */
 fix = {
-    hackname  = irix_stdio_va_list;
-    files     = stdio.h;
+    hackname  = irix_socklen_t;
+    files     = sys/socket.h;
+    select    = "(#define _SOCKLEN_T\n)(typedef u_int32_t socklen_t;)";
 
-    select = '/\* va_list \*/ char \*';
+    mach      = "mips-sgi-irix6.5";
     c_fix  = format;
-    c_fix_arg = "__gnuc_va_list";
+    c_fix_arg = "%1"
+    		"#if _NO_XOPEN4 && _NO_XOPEN5\n"
+    		"typedef int socklen_t;\n"
+		"#else\n"
+    		"%2\n"
+    		"#endif /* _NO_XOPEN4 && _NO_XOPEN5 */";
+
+    test_text = "#define _SOCKLEN_T\ntypedef u_int32_t socklen_t;";
+};
+
+/*
+ *  IRIX 6.5 <stdint.h> only works with ISO C99 and errors out
+ *  otherwise.
+ */
+fix = {
+    hackname  = irix_stdint_c99_mode;
+    files     = stdint.h;
+    select = "(#ifndef __c99\n)(#error This header file is to be used only for c99 mode compilations)";
+
+    mach      = "mips-sgi-irix6.5";
+    c_fix  = format;
+    c_fix_arg = "#if 0\n"
+	        "%2";
     test_text =
-    "extern int printf( const char *, /* va_list */ char * );";
+    "#ifndef __c99\n#error This header file is to be used only for c99 mode compilations\n#else";
+};
+
+
+/*
+ *  IRIX 6.5 <stdint.h> has some *_MIN/MAX constants whose types don't
+ *  match the corresponding types, as required by ISO C99.
+ */
+fix = {
+    hackname  = irix_stdint_c99_types;
+    files     = stdint-irix65.h, stdint.h;
+    mach      = "mips-sgi-irix6.5";
+    sed       = "s@^#define INT64_MIN.*(-0x7fffffffffffffff - 1)$@"
+                "#define INT64_MIN               (-0x7fffffffffffffffLL - 1)@";
+    sed       = "s@^#define INT64_MAX.*0x7fffffffffffffff$@"
+                "#define INT64_MAX               0x7fffffffffffffffLL@";
+    sed       = "s@^#define UINT32_MAX.*0xffffffff$@"
+                "#define UINT32_MAX              0xffffffffU@";
+    sed       = "s@^#define UINT64_MAX.*0xffffffffffffffff$@"
+                "#define UINT64_MAX              0xffffffffffffffffULL@";
+    sed       = "s@^#define INTPTR_MIN.*INT32_MIN$@"
+                "#define INTPTR_MIN              (-0x7fffffffL - 1)@";
+    sed       = "s@^#define INTPTR_MAX.*INT32_MAX$@"
+                "#define INTPTR_MAX              0x7fffffffL@";
+    sed       = "s@^#define UINTPTR_MAX.*UINT32_MAX$@"
+                "#define UINTPTR_MAX             0xffffffffUL@";
+    sed       = "s@^#define INTPTR_MIN.*INT64_MIN@"
+                "#define INTPTR_MIN              (-0x7fffffffffffffffL - 1)@";
+    sed       = "s@^#define INTPTR_MAX.*INT64_MAX$@"
+                "#define INTPTR_MAX              0x7fffffffffffffffL@";
+    sed       = "s@^#define UINTPTR_MAX.*UINT64_MAX$@"
+                "#define UINTPTR_MAX             0xffffffffffffffffUL@";
+    sed       = "s@^#define PTRDIFF_MIN.*INT64_MIN$@"
+                "#define PTRDIFF_MIN             (-0x7fffffffffffffffL - 1)@";
+    sed       = "s@^#define PTRDIFF_MAX.*INT64_MAX$@"
+                "#define PTRDIFF_MAX             0x7fffffffffffffffL@";
+    sed       = "s@^#define SIZE_MAX.*UINT64_MAX$@"
+                "#define SIZE_MAX                0xffffffffffffffffUL@";
+    test_text = "#define INT64_MIN               (-0x7fffffffffffffff - 1)\n"
+                "#define INT64_MAX               0x7fffffffffffffff\n"
+                "#define UINT32_MAX              0xffffffff\n"
+                "#define UINT64_MAX              0xffffffffffffffff\n"
+                "#define INTPTR_MIN              INT32_MIN\n"
+                "#define INTPTR_MAX              INT32_MAX\n"
+                "#define UINTPTR_MAX             UINT32_MAX\n"
+                "#define INTPTR_MIN              INT64_MIN\n"
+                "#define INTPTR_MAX              INT64_MAX\n"
+                "#define UINTPTR_MAX             UINT64_MAX\n"
+                "#define PTRDIFF_MIN             INT64_MIN\n"
+                "#define PTRDIFF_MAX             INT64_MAX\n"
+                "#define SIZE_MAX                UINT64_MAX";
+};
+
+
+/*
+ *  IRIX 6.5 <stdint.h> uses casts in some macros which cannot thus be used
+ *  in preprocessor tests, although ISO C99 requires this.
+ */
+fix = {
+    hackname  = irix_stdint_c99_macros;
+    files     = stdint-irix65.h, stdint.h;
+    mach      = "mips-sgi-irix6.5";
+    sed       = "s@^#define INT8_C(x).*int.*_t.*$@#define INT8_C(x)               (x)@";
+    sed       = "s@^#define INT16_C(x).*int.*_t.*$@#define INT16_C(x)              (x)@";
+    sed       = "s@^#define INT32_C(x).*int.*_t.*$@#define INT32_C(x)              (x)@";
+    sed       = "s@^#define INT64_C(x).*int.*_t.*$@#define INT64_C(x)              (x ## LL)@";
+    sed       = "s@^#define UINT8_C(x).*int.*_t.*$@#define UINT8_C(x)              (x)@";
+    sed       = "s@^#define UINT16_C(x).*int.*_t.*$@#define UINT16_C(x)             (x)@";
+    sed       = "s@^#define UINT32_C(x).*int.*_t.*$@#define UINT32_C(x)             (x ## U)@";
+    sed       = "s@^#define UINT64_C(x).*int.*_t.*$@#define UINT64_C(x)             (x ## ULL)@";
+    sed       = "s@^#define INTMAX_C(x).*int.*_t.*$@#define INTMAX_C(x)             (x ## LL)@";
+    sed       = "s@^#define UINTMAX_C(x).*int.*_t.*$@#define UINTMAX_C(x)            (x ## ULL)@";
+    test_text = "#define INT8_C(x)               (int_least8_t)(x)\n"
+                "#define INT16_C(x)              (int_least16_t)(x)\n"
+                "#define INT32_C(x)              (int_least32_t)(x)\n"
+                "#define INT64_C(x)              (int_least64_t)(x)\n"
+                "#define UINT8_C(x)              (uint_least8_t)(x)\n"
+                "#define UINT16_C(x)             (uint_least16_t)(x)\n"
+                "#define UINT32_C(x)             (uint_least32_t)(x)\n"
+                "#define UINT64_C(x)             (uint_least64_t)(x)\n"
+                "#define INTMAX_C(x)             (intmax_t)(x)\n"
+                "#define UINTMAX_C(x)            (uintmax_t)(x)";
+};
+
+
+/*
+ *  IRIX 6.5.19 <internal/wchar_core.h> provides the XPG4 variant of
+ *  wcsftime by default.  ISO C99 requires the XPG5 variant instead.
+ */
+fix = {
+    hackname  = irix_wcsftime;
+    files     = internal/wchar_core.h;
+    select    = "#if _NO_XOPEN5\n(extern size_t[ \t]+wcsftime.*const char \*.*)";
+
+    mach      = "mips-sgi-irix6.5";
+    c_fix     = format;
+    c_fix_arg = "#if _NO_XOPEN5 && !defined(__c99)\n%1";
+
+    test_text = "#if _NO_XOPEN5\n"
+		"extern size_t wcsftime(wchar_t *, "
+		"__SGI_LIBC_NAMESPACE_QUALIFIER size_t, const char *, "
+		"const struct tm *);";
 };
 
 
+
+/* END REINTRODUCE */
+
 /*
  * These files in Sun OS 4.x and ARM/RISCiX and BSD4.3
  * use / * * / to concatenate tokens.
@@ -2583,8 +3126,8 @@
     test_text = "#define __CONCAT__(a,b) a/**/b";
 };
 
-
-/* The /usr/include/sys/ucontext.h on ia64-*linux-gnu systems defines
+/*
+ * The /usr/include/sys/ucontext.h on ia64-*linux-gnu systems defines
  * an _SC_GR0_OFFSET macro using an idiom that isn't a compile time
  * constant on recent versions of g++.
  */
@@ -2600,7 +3143,6 @@
 	"\t(((char *) &((struct sigcontext *) 0)->sc_gr[0]) - (char *) 0)\n";
 };
 
-
 /* 
  *  Remove header file warning from sys/time.h.  Autoconf's
  *  AC_HEADER_TIME recommends to include both sys/time.h and time.h
@@ -2615,7 +3157,6 @@
     test_text = "#warning Using <time.h> instead of <sys/time.h>";
 };
 
-
 /* 
  *  Add missing declaration for putenv.
  */
@@ -2632,7 +3173,6 @@
     test_text = "extern char *getenv	_AP((const char *));";
 };
 
-
 /*
  * Fix BSD machine/ansi.h to use __builtin_va_list to define _BSD_VA_LIST_.
  *
@@ -2651,7 +3191,6 @@
     test_text = " # define _BSD_VA_LIST_\tchar**";
 };
 
-
 /*
  *  Fix non-ansi machine name defines
  */
@@ -2665,7 +3204,6 @@
     "\n/* no uniform test, so be careful  :-) */";
 };
 
-
 /*
  *  Some math.h files define struct exception (it's in the System V
  *  Interface Definition), which conflicts with the class exception defined
@@ -2685,6 +3223,9 @@
      */
     bypass    = 'We have a problem when using C\+\+|for C\+\+, '
 		'_[a-z0-9A-Z_]+_exception; for C, exception';
+    /* The Solaris 10 headers already get this right.  */
+    mach   = '*-*-solaris2.1[0-9]*';
+    not_machine = true;
     c_fix     = wrap;
 
     c_fix_arg = "#ifdef __cplusplus\n"
@@ -2698,7 +3239,6 @@
     test_text = "typedef struct exception t_math_exception;";
 };
 
-
 /*
  *  This looks pretty broken to me.  ``dbl_max_def'' will contain
  *  "define DBL_MAX " at the start, when what we really want is just
@@ -2736,7 +3276,6 @@
     "#define HUGE_VAL DBL_MAX";
 };
 
-
 /*
  *  nested comment
  */
@@ -2749,7 +3288,6 @@
     test_text = "/*#include <rpc/auth_des.h> /* skip this */";
 };
 
-
 /*
  *  Some versions of NetBSD don't expect the C99 inline semantics.
  */
@@ -2769,7 +3307,9 @@
     test_text = "extern __inline int\nsigaddset(sigset_t *set, int signo)\n{}";
 };
 
-
+/*
+ * netbsd_c99_inline_2
+ */
 fix = {
     hackname  = netbsd_c99_inline_2;
     mach      = "*-*-netbsd*";
@@ -2788,7 +3328,6 @@
     test_text = "#define _SIGINLINE extern __inline";
 };
 
-
 /*
  * NetBSD has a semicolon after the ending '}' for some extern "C".
  */
@@ -2804,10 +3343,11 @@
     test_text = "#define __END_DECLS };";
 };
 
-
-/* newlib's stdint.h has several failures to conform to C99.  The fix
-   for these removed a comment that can be matched to identify unfixed
-   versions.  */
+/*
+ * newlib's stdint.h has several failures to conform to C99.  The fix
+ *  for these removed a comment that can be matched to identify unfixed
+ *  versions.
+ */
 fix = {
     hackname  = newlib_stdint_1;
     files     = stdint-newlib.h, stdint.h;
@@ -2815,12 +3355,18 @@
     sed       = "s@#define INT32_MIN.*@#define INT32_MIN (-INT32_MAX - 1)@";
     sed       = "s@#define INT32_MAX.*@#define INT32_MAX __INT32_MAX__@";
     sed       = "s@#define UINT32_MAX.*@#define UINT32_MAX __UINT32_MAX__@";
-    sed       = "s@#define INT_LEAST32_MIN.*@#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)@";
-    sed       = "s@#define INT_LEAST32_MAX.*@#define INT_LEAST32_MAX __INT_LEAST32_MAX__@";
-    sed       = "s@#define UINT_LEAST32_MAX.*@#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__@";
-    sed       = 's@#define INT_FAST\([0-9]*\)_MIN.*@#define INT_FAST\1_MIN (-INT_FAST\1_MAX - 1)@';
-    sed       = 's@#define INT_FAST\([0-9]*\)_MAX.*@#define INT_FAST\1_MAX __INT_FAST\1_MAX__@';
-    sed       = 's@#define UINT_FAST\([0-9]*\)_MAX.*@#define UINT_FAST\1_MAX __UINT_FAST\1_MAX__@';
+    sed       = "s@#define INT_LEAST32_MIN.*@"
+                  "#define INT_LEAST32_MIN (-INT_LEAST32_MAX - 1)@";
+    sed       = "s@#define INT_LEAST32_MAX.*@"
+                  "#define INT_LEAST32_MAX __INT_LEAST32_MAX__@";
+    sed       = "s@#define UINT_LEAST32_MAX.*@"
+                  "#define UINT_LEAST32_MAX __UINT_LEAST32_MAX__@";
+    sed       = 's@#define INT_FAST\([0-9]*\)_MIN.*@'
+                  '#define INT_FAST\1_MIN (-INT_FAST\1_MAX - 1)@';
+    sed       = 's@#define INT_FAST\([0-9]*\)_MAX.*@'
+                  '#define INT_FAST\1_MAX __INT_FAST\1_MAX__@';
+    sed       = 's@#define UINT_FAST\([0-9]*\)_MAX.*@'
+                  '#define UINT_FAST\1_MAX __UINT_FAST\1_MAX__@';
     sed       = "s@#define SIZE_MAX.*@#define SIZE_MAX __SIZE_MAX__@";
     sed       = "s@#define PTRDIFF_MIN.*@#define PTRDIFF_MIN (-PTRDIFF_MAX - 1)@";
     sed       = "s@#define PTRDIFF_MAX.*@#define PTRDIFF_MAX __PTRDIFF_MAX__@";
@@ -2843,7 +3389,9 @@
                 "#define UINT16_C(x) x##U";
 };
 
-
+/*
+ * newlib_stdint_2
+ */
 fix = {
     hackname  = newlib_stdint_2;
     files     = stdint-newlib.h, stdint.h;
@@ -2862,7 +3410,6 @@
                 "/** Macros for minimum-width integer constant expressions */";
 };
 
-
 /*
  *  NeXT 3.2 adds const prefix to some math functions.
  *  These conflict with the built-in functions.
@@ -2879,7 +3426,6 @@
     test_text = "extern\tdouble\t__const__\tmumble();";
 };
 
-
 /*
  *  NeXT 3.2 uses the word "template" as a parameter for some
  *  functions. GCC reports an invalid use of a reserved key word
@@ -2896,7 +3442,6 @@
     test_text = "extern mumble( char * template); /* fix */";
 };
 
-
 /*
  *  NeXT 3.2 includes the keyword volatile in the abort() and  exit()
  *  function prototypes. That conflicts with the  built-in functions.
@@ -2913,7 +3458,6 @@
     test_text = "extern\tvolatile\tvoid\tabort();";
 };
 
-
 /*
  *  NeXT 2.0 defines 'int wait(union wait*)', which conflicts with Posix.1.
  *  Note that version 3 of the NeXT system has wait.h in a different directory,
@@ -2930,7 +3474,6 @@
     test_text = "extern pid_d wait(union wait*);";
 };
 
-
 /*
  *  a missing semi-colon at the end of the nodeent structure definition.
  */
@@ -3063,7 +3606,6 @@
     test_text = "#include <reg_types.h>";
 };
 
-
 /*
  * On broken glibc-2.3.3 systems an array of incomplete structures is
  * passed to __sigsetjmp.  Fix that to take a pointer instead.
@@ -3074,8 +3616,10 @@
     select    = "struct __jmp_buf_tag";
     c_fix     = format;
     c_fix_arg = "%1 *%2%3";
-    c_fix_arg = "^(extern int __sigsetjmp \\(struct __jmp_buf_tag) (__env)\\[1\\](.*)$";
-    test_text = "extern int __sigsetjmp (struct __jmp_buf_tag __env[1], int __savemask);";
+    c_fix_arg = "^(extern int __sigsetjmp \\(struct __jmp_buf_tag) "
+        "(__env)\\[1\\](.*)$";
+    test_text = "extern int __sigsetjmp (struct __jmp_buf_tag __env[1], "
+        "int __savemask);";
 };
 
 /*
@@ -3092,7 +3636,6 @@
     test_text = "extern int\tfclose(), fflush(), fread(), fwrite(), foo();";
 };
 
-
 /*
  *  Fix casts as lvalues in glibc's <rpc/xdr.h>.
  */
@@ -3106,7 +3649,9 @@
                 "\t((long)ntohl((u_long)*__extension__((u_int32_t*)(buf))++))";
 };
 
-
+/*
+ * rpc_xdr_lvalue_cast_b
+ */
 fix = {
     hackname  = rpc_xdr_lvalue_cast_b;
     files     = rpc/xdr.h;
@@ -3117,7 +3662,6 @@
                 "\t(*__extension__((u_int32_t*)(buf))++ = (long)htonl((u_long)(v)))";
 };
 
-
 /*
  *  function class(double x) conflicts with C++ keyword on rs/6000
  */
@@ -3133,7 +3677,6 @@
     test_text = "extern int class();";
 };
 
-
 /*
  *  Wrong fchmod prototype on RS/6000.
  */
@@ -3146,7 +3689,6 @@
     test_text = "extern int fchmod(char *, mode_t);";
 };
 
-
 /*
  *  parameters conflict with C++ new on rs/6000
  */
@@ -3162,7 +3704,6 @@
     test_text = 'extern int rename(const char *old, const char *new);';
 };
 
-
 /*
  *  Solaris 10+ <sys/feature_tests.h> defines _RESTRICT_KYWD as restrict
  *  for C99.  This is wrong for C++, which needs many C99 features, but
@@ -3179,7 +3720,6 @@
     test_text = "#define	_RESTRICT_KYWD	restrict";
 };
 
-
 /*
  * Solaris 10+ complex.h defines _Complex_I and _Imaginary_I in terms of
  * themselves, which are Sun Studio compiler intrinsics.  Remove _Imaginary_I
@@ -3203,7 +3743,6 @@
 		"#define	I		_Imaginary_I";
 };
 
-
 /*
  * Solaris 10+ <complex.h> is wrapped in #ifndef __cplusplus.  Wrap in
  * extern "C" instead so libstdc++ can use it.
@@ -3220,7 +3759,6 @@
 		"#endif	/* !defined(__cplusplus) */";
 };
 
-
 /*
  *  g++ rejects functions declared with both C and C++ linkage.
  */
@@ -3240,7 +3778,6 @@
     "	void *bsearch(const void *, const void *, size_t, size_t,";
 };
 
-
 /*
  *  Solaris <iso/stdio_iso.h> doesn't declare getc for C++ with
  *  _STRICT_STDC, but uses it.
@@ -3257,22 +3794,113 @@
     "#if	!defined(_REENTRANT) && !defined(_LP64) && !defined(_STRICT_STDC)";
 };
 
+/*
+ *  Solaris <iso/stdio_iso.h> should deprecate gets before C11.
+ */
+fix = {
+    hackname  = solaris_gets_c11;
+    mach      = "*-*-solaris2*";
+    files     = "iso/stdio_iso.h";
+    select    = "(extern char[ \t]*\\*gets\\(char \\*\\));";
+
+    c_fix     = format;
+    c_fix_arg = "#if __STDC_VERSION__ < 201112L && __cplusplus < 201402L\n"
+    		"%1 __attribute__((__deprecated__));\n"
+		"#endif";
+
+    test_text = "extern char	*gets(char *);";
+};
 
 /*
- *  Before Solaris 10, <iso/setjmp_iso.h> doesn't mark longjump noreturn.
+ *  Solaris <iso/stdio_iso.h> shouldn't declare gets for C++14.
  */
 fix = {
-    hackname  = solaris_longjmp_noreturn;
+    hackname  = solaris_gets_cxx14;
     mach      = "*-*-solaris2*";
-    files     = "iso/setjmp_iso.h";
-    bypass    = "__NORETURN";
-    select    = "(.*longjmp\\(jmp_buf.*[^)]+\\));";
+    files     = "iso/stdio_iso.h";
+    select    = <<- _EOSelect_
+(#if __STDC_VERSION__ < 201112L)
+(extern char	\*gets\(char \*\) __ATTR_DEPRECATED;)
+_EOSelect_;
     c_fix     = format;
-    c_fix_arg = "%1 __attribute__ ((__noreturn__));";
+    c_fix_arg = "%1 && __cplusplus < 201402L\n%2";
+
+    test_text = <<- _EOText_
+#if __STDC_VERSION__ < 201112L
+extern char	*gets(char *) __ATTR_DEPRECATED;
+_EOText_;
+};
+
+/*
+ * Sun Solaris 2 has a version of sys/int_const.h that defines
+ * UINT8_C and UINT16_C to unsigned constants.
+ */
+fix = {
+    hackname  = solaris_int_const;
+    files     = sys/int_const.h;
+    mach      = '*-*-solaris2*';
+    c_fix     = format;
+    c_fix_arg = "#define\tUINT8_C(c)\t(c)\n"
+                "%1\n"
+                "#define\tUINT16_C(c)\t(c)";
+    select    = "^#define[ \t]+UINT8_C\\(c\\)[ \t]+__CONCAT__.*\n"
+                "(/\*.*\*/)\n"
+                "#define[ \t]+UINT16_C\\(c\\)[ \t]+__CONCAT__.*";
+    test_text =
+    "#define	UINT8_C(c)	__CONCAT__(c,u)\n"
+    "/* CSTYLED */\n"
+    "#define	UINT16_C(c)	__CONCAT__(c,u)";
+};
+
+/*
+ * Sun Solaris 2 has a version of sys/int_limits.h that defines
+ * UINT8_MAX and UINT16_MAX to unsigned constants.
+ */
+fix = {
+    hackname  = solaris_int_limits_1;
+    files     = sys/int_limits.h;
+    mach      = '*-*-solaris2*';
+    c_fix     = format;
+    c_fix_arg = "#define\tUINT8_MAX\t(255)\n"
+                "#define\tUINT16_MAX\t(65535)";
+    select    = "^#define[ \t]+UINT8_MAX[ \t]+\\(255U\\)\n"
+                "#define[ \t]+UINT16_MAX[ \t]+\\(65535U\\)";
+    test_text =
+    "#define	UINT8_MAX	(255U)\n"
+    "#define	UINT16_MAX	(65535U)";
+};
 
-    test_text = "extern void longjmp(jmp_buf, int);";
+/*
+ * Sun Solaris 2 has a version of sys/int_limits.h that defines
+ * INT_FAST16 limits to wrong values for sys/int_types.h.
+ */
+fix = {
+    hackname  = solaris_int_limits_2;
+    files     = sys/int_limits.h;
+    mach      = '*-*-solaris2*';
+    c_fix     = format;
+    c_fix_arg = "#define\t%1_FAST16_%2 %132_%2";
+    select    = "^#define[ \t]+(INT|UINT)_FAST16_(MAX|MIN)[ \t](INT|UINT)16.*";
+    test_text =
+    "#define	INT_FAST16_MAX INT16_MAX\n"
+    "#define	UINT_FAST16_MAX UINT16_MAX\n"
+    "#define	INT_FAST16_MIN	INT16_MIN";
 };
 
+/*
+ * Sun Solaris 2 has a version of sys/int_limits.h that defines
+ * SIZE_MAX as unsigned long.
+ */
+fix = {
+    hackname  = solaris_int_limits_3;
+    files     = sys/int_limits.h;
+    mach      = '*-*-solaris2*';
+    c_fix     = format;
+    c_fix_arg = "#define\tSIZE_MAX\t4294967295U";
+    select    = "^#define[ \t]+SIZE_MAX[ \t]+4294967295UL";
+    test_text =
+    "#define	SIZE_MAX	4294967295UL";
+};
 
 /*
  * Sun Solaris 10 defines several C99 math macros in terms of
@@ -3297,6 +3925,35 @@
     "#define	HUGE_VALL	__builtin_huge_vall";
 };
 
+/*
+ * On Solaris 11, if you do isinf(NaN) you'll get a floating point
+ * exception.  Provide an alternative using GCC's builtin.
+ */
+fix = {
+    hackname  = solaris_math_10;
+    select    = '@\(#\)math_c99.h' "[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
+    files     = iso/math_c99.h;
+    c_fix     = format;
+    c_fix_arg = "#define\tisinf(x) __builtin_isinf(x)";
+    c_fix_arg = "^#define[ \t]+isinf\\(x\\)[ \t]+__extension__\\([ \t]*\\\\\n"
+                "[ \t]*\\{[ \t]*__typeof\\(x\\)[ \t]*__x_i[ \t]*=[ \t]*\\(x\\);"
+                    "[ \t]*\\\\\n"
+                "[ \t]*__x_i[ \t]*==[ \t]*\\(__typeof\\(__x_i\\)\\)[ \t]*"
+                    "INFINITY[ \t]*\\|\\|[ \t]*\\\\\n"
+                "[ \t]*__x_i[ \t]*==[ \t]*\\(__typeof\\(__x_i\\)\\)[ \t]*"
+                    "\\(-INFINITY\\);[ \t]*\\}\\)";
+    test_text =
+    '#pragma ident	"@(#)math_c99.h	1.12	07/01/21 SMI"'"\n"
+    "#undef	isinf\n"
+    "#define	isinf(x)	__extension__( \\\\\n"
+    "			{ __typeof(x) __x_i = (x); \\\\\n"
+    "			__x_i == (__typeof(__x_i)) INFINITY || \\\\\n"
+    "			__x_i == (__typeof(__x_i)) (-INFINITY); })";
+};
+
+/*
+ * Solaris math INFINITY
+ */
 fix = {
     hackname = solaris_math_2;
     select = '@\(#\)math_c99.h' "[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
@@ -3311,6 +3968,9 @@
     "#define	INFINITY	__builtin_infinity";
 };
 
+/*
+ * Solaris math NAN
+ */
 fix = {
     hackname = solaris_math_3;
     select = '@\(#\)math_c99.h' "[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
@@ -3325,6 +3985,9 @@
     "#define	NAN	__builtin_nan";
 };
 
+/*
+ * Solaris math fpclassify
+ */
 fix = {
     hackname = solaris_math_4;
     select = '@\(#\)math_c99.h' "[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
@@ -3332,7 +3995,8 @@
     files = iso/math_c99.h;
     c_fix = format;
     c_fix_arg = "#define\tfpclassify(x) \\\n"
-                "  __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL, FP_SUBNORMAL, FP_ZERO, (x))";
+                "  __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL, "
+                    "FP_SUBNORMAL, FP_ZERO, (x))";
     c_fix_arg = "^#define[ \t]+fpclassify\\(x\\)[ \t]+__builtin_fpclassify\\(x\\)";
     test_text =
     '#ident	"@(#)math_c99.h	1.9	04/11/01 SMI"'"\n"
@@ -3340,6 +4004,9 @@
     "#define	fpclassify(x)	__builtin_fpclassify(x)";
 };
 
+/*
+ * Solaris math signbit
+ */
 fix = {
     hackname = solaris_math_8;
     select = '@\(#\)math_c99\.h' "[ \t]+1\\.[0-9]+[ \t]+[0-9/]+ SMI";
@@ -3359,6 +4026,9 @@
 	_EOText_;
 };
 
+/*
+ * Solaris math comparison macros
+ */
 fix = {
     hackname = solaris_math_9;
     select = '@\(#\)math_c99.h' "[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
@@ -3366,7 +4036,8 @@
     files = iso/math_c99.h;
     c_fix = format;
     c_fix_arg = "#define\t%1(x, y)%2__builtin_%1(x, y)";
-    c_fix_arg = "^#define[ \t]+([a-z]+)\\(x, y\\)([ \t]+)\\(\\(x\\) __builtin_[a-z]+\\(y\\)\\)";
+    c_fix_arg = "^#define[ \t]+([a-z]+)\\(x, y\\)([ \t]+)\\(\\(x\\) "
+                    "__builtin_[a-z]+\\(y\\)\\)";
     test_text =
     '#ident	"@(#)math_c99.h	1.9	04/11/01 SMI"'"\n"
     "#undef	isgreater\n"
@@ -3384,68 +4055,108 @@
 };
 
 /*
- * On Solaris 11, if you do isinf(NaN) you'll get a floating point
- * exception.  Provide an alternative using GCC's builtin.
+ * Newer Solaris 10/11 GCC signbit implementations cause strict-aliasing
+ * warnings.
  */
-
 fix = {
-    hackname  = solaris_math_10;
-    select    = '@\(#\)math_c99.h' "[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
+    hackname = solaris_math_11;
+    select = '@\(#\)math_c99\.h' "[ \t]+1\\.[0-9]+[ \t]+[0-9/]+ ";
     files     = iso/math_c99.h;
     c_fix     = format;
-    c_fix_arg = "#define\tisinf(x) __builtin_isinf(x)";
-    c_fix_arg = "^#define[ \t]+isinf\\(x\\)[ \t]+__extension__\\([ \t]*\\\\\n"
-                "[ \t]*\\{[ \t]*__typeof\\(x\\)[ \t]*__x_i[ \t]*=[ \t]*\\(x\\);[ \t]*\\\\\n"
-                "[ \t]*__x_i[ \t]*==[ \t]*\\(__typeof\\(__x_i\\)\\)[ \t]*INFINITY[ \t]*\\|\\|[ \t]*\\\\\n"
-                "[ \t]*__x_i[ \t]*==[ \t]*\\(__typeof\\(__x_i\\)\\)[ \t]*\\(-INFINITY\\);[ \t]*\\}\\)";
-    test_text =
-    '#pragma ident	"@(#)math_c99.h	1.12	07/01/21 SMI"'"\n"
-    "#undef	isinf\n"
-    "#define	isinf(x)	__extension__( \\\\\n"
-    "			{ __typeof(x) __x_i = (x); \\\\\n"
-    "			__x_i == (__typeof(__x_i)) INFINITY || \\\\\n"
-    "			__x_i == (__typeof(__x_i)) (-INFINITY); })";
+    c_fix_arg = << _EOArg_
+#undef	signbit
+#define	signbit(x)	(sizeof(x) == sizeof(float) \
+			   ? __builtin_signbitf(x) \
+			   : sizeof(x) == sizeof(long double) \
+			     ? __builtin_signbitl(x) \
+			     : __builtin_signbit(x))
+_EOArg_;
+    c_fix_arg = << _EOArg_
+^#undef[ 	]+signbit
+#if defined\(__sparc\)
+#define[ 	]+signbit\(x\)[ 	]+__extension__\( \\
+[ 	]+\{[ 	]*__typeof\(x\)[ 	]*__x_s[ 	]*=[ 	]*\(x\);[ 	]*\\
+[ 	]+\(int\)[ 	]*\(\*\(unsigned[ 	]*\*\)[ 	]*\&__x_s[ 	]*>>[ 	]*31\);[ 	]*\}\)
+#elif defined\(__i386\) \|\| defined\(__amd64\)
+#define[ 	]+signbit\(x\)[ 	]+__extension__\( \\
+[ 	]+\{ __typeof\(x\) __x_s = \(x\); \\
+[ 	]+\(sizeof \(__x_s\) == sizeof \(float\) \? \\
+[ 	]+\(int\) \(\*\(unsigned \*\) \&__x_s >> 31\) : \\
+[ 	]+sizeof \(__x_s\) == sizeof \(double\) \? \\
+[ 	]+\(int\) \(\(\(unsigned \*\) \&__x_s\)\[1\] >> 31\) : \\
+[ 	]+\(int\) \(\(\(unsigned short \*\) \&__x_s\)\[4\] >> 15\)\); \}\)
+#endif
+_EOArg_;
+    test_text = << _EOText_
+/* @(#)math_c99.h	1.14	13/03/27 */
+#undef	signbit
+#if defined(__sparc)
+#define	signbit(x)	__extension__( \\
+				{ __typeof(x) __x_s = (x); \\
+				(int) (*(unsigned *) &__x_s >> 31); })
+#elif defined(__i386) || defined(__amd64)
+#define	signbit(x)	__extension__( \\
+			{ __typeof(x) __x_s = (x); \\
+			(sizeof (__x_s) == sizeof (float) ? \\
+			(int) (*(unsigned *) &__x_s >> 31) : \\
+			sizeof (__x_s) == sizeof (double) ? \\
+			(int) (((unsigned *) &__x_s)[1] >> 31) : \\
+			(int) (((unsigned short *) &__x_s)[4] >> 15)); })
+#endif
+_EOText_;
+};
+
+/*
+ * Some versions of Solaris 10+ <math.h> #undef libstdc++-internal macros.
+ */
+fix = {
+    hackname  = solaris_math_12;
+    files     = math.h;
+    mach      = '*-*-solaris2*';
+    select    = '#undef.*_GLIBCXX_USE_C99_MATH';
+    sed       = "/#undef[ \t]*_GLIBCXX_USE_C99_MATH/d";
+    test_text = << _EOText_
+#if __cplusplus >= 201103L
+#undef  _GLIBCXX_USE_C99_MATH
+#undef  _GLIBCXX_USE_C99_MATH_TR1
+#endif
+_EOText_;
 };
 
 /*
- * Sun Solaris defines PTHREAD_MUTEX_INITIALIZER with a trailing
- * "0" for the last field of the pthread_mutex_t structure, which is
- * of type upad64_t, which itself is typedef'd to int64_t, but with
- * __STDC__ defined (e.g. by -ansi) it is a union. So change the
- * initializer to "{0}" instead
+ * Sun Solaris defines PTHREAD_ONCE_INIT as an array containing a
+ * structure.  As such, it need two levels of brackets, but only
+ * contains one.  Wrap the macro definition in an extra layer.
  */
 fix = {
-    hackname = solaris_mutex_init_2;
+    hackname = solaris_once_init_1;
     select = '@\(#\)pthread.h' "[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
     files = pthread.h;
+    mach = '*-*-solaris*';
+    c_fix = format;
+    c_fix_arg = "%1{%2}%3";
+    c_fix_arg = "(^#define[ \t]+PTHREAD_ONCE_INIT[ \t]+\\{)([^}]+)(\\})[ \t]*$";
+    test_text =
+    '#pragma ident	"@(#)pthread.h	1.37	04/09/28 SMI"'"\n"
+    "#define PTHREAD_ONCE_INIT\t{0, 0, 0, PTHREAD_ONCE_NOTDONE}";
+};
+
     /*
-     * On Solaris 10, this fix is unnecessary because upad64_t is
-     * always defined correctly regardless of the definition of the
-     * __STDC__ macro.  The first "mach" pattern matches up to
-     * solaris9.  The second "mach" pattern will not match any two (or
-     * more) digit solaris version, but it will match e.g. 2.5.1.
+ * Solaris 10+ <spawn.h> uses char *const argv[_RESTRICT_KYWD] in the
+ * posix_spawn declarations, which doesn't work with C++.
      */
-    mach = '*-*-solaris2.[0-9]', '*-*-solaris2.[0-9][!0-9]*';
+fix = {
+    hackname  = solaris_posix_spawn_restrict;
+    files     = spawn.h;
+    mach      = '*-*-solaris2*';
     c_fix = format;
-    c_fix_arg = "#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n"
-                "%0\n"
-                "#else\n"
-                "%1, {0}}%4\n"
-                "#endif";
-    c_fix_arg = "(^#define[ \t]+PTHREAD_(MUTEX|COND)_INITIALIZER[ \t]+"
-                "(|/\*.*\*/[ \t]*\\\\\n[ \t]*)\\{.*)"
-                ",[ \t]*0\\}" "(|[ \t].*)$";
+    c_fix_arg = "%1*_RESTRICT_KYWD %2%3";
+    select    = "(.*[ \t]+)([a-z]+)\\[_RESTRICT_KYWD\\](.*)";
     test_text =
-    '#ident "@(#)pthread.h  1.26  98/04/12 SMI"'"\n"
-    "#define PTHREAD_MUTEX_INITIALIZER\t{{{0},0}, {{{0}}}, 0}\n"
-    "#define PTHREAD_COND_INITIALIZER\t{{{0}, 0}, 0}\t/* DEFAULTCV */\n"
-    "#define	PTHREAD_MUTEX_INITIALIZER		/* = DEFAULTMUTEX */	\\\\\n"
-    "	{{0, 0, 0, DEFAULT_TYPE, _MUTEX_MAGIC}, {{{0}}}, 0}\n"
-    "#define	PTHREAD_COND_INITIALIZER		/* = DEFAULTCV */	\\\\\n"
-    "	{{{0, 0, 0, 0}, DEFAULT_TYPE, _COND_MAGIC}, 0}";
+    "char *const argv[_RESTRICT_KYWD],\n"
+    "char *const envp[_RESTRICT_KYWD]);";
 };
 
-
 /*
  *  The pow overloads with int were removed in C++ 2011 DR 550.
  */
@@ -3463,7 +4174,6 @@
     "		__powl(__X, (long double) (__Y)); }";
 };
 
-
 /*
  * Sun Solaris defines PTHREAD_RWLOCK_INITIALIZER with a "0" for some
  *  fields of the pthread_rwlock_t structure, which are of type
@@ -3490,173 +4200,6 @@
     "#define PTHREAD_RWLOCK_INITIALIZER\t{0, 0, 0, {0, 0, 0}, {0, 0}, {0, 0}}";
 };
 
-
-/*
- * Sun Solaris defines PTHREAD_ONCE_INIT as an array containing a
- * structure.  As such, it need two levels of brackets, but only
- * contains one.  Wrap the macro definition in an extra layer.
- */
-fix = {
-    hackname = solaris_once_init_1;
-    select = '@\(#\)pthread.h' "[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
-    files = pthread.h;
-    mach = '*-*-solaris*';
-    c_fix = format;
-    c_fix_arg = "%1{%2}%3";
-    c_fix_arg = "(^#define[ \t]+PTHREAD_ONCE_INIT[ \t]+\\{)([^}]+)(\\})[ \t]*$";
-    test_text =
-    '#pragma ident	"@(#)pthread.h	1.37	04/09/28 SMI"'"\n"
-    "#define PTHREAD_ONCE_INIT\t{0, 0, 0, PTHREAD_ONCE_NOTDONE}";
-};
-
-
-/*
- * Sun Solaris defines PTHREAD_ONCE_INIT with a "0" for some
- *  fields of the pthread_once_t structure, which are of type
- *  upad64_t, which itself is typedef'd to int64_t, but with __STDC__
- *  defined (e.g. by -ansi) it is a union. So change the initializer
- *  to "{0}" instead.  This test relies on solaris_once_init_1.
- */
-fix = {
-    hackname = solaris_once_init_2;
-    select = '@\(#\)pthread.h' "[ \t]+1.[0-9]+[ \t]+[0-9/]+ SMI";
-    files = pthread.h;
-    /*
-     * On Solaris 10, this fix is unnecessary because upad64_t is
-     * always defined correctly regardless of the definition of the
-     * __STDC__ macro.  The first "mach" pattern matches up to
-     * solaris9.  The second "mach" pattern will not match any two (or
-     * more) digit solaris version, but it will match e.g. 2.5.1.
-     */
-    mach = '*-*-solaris2.[0-9]', '*-*-solaris2.[0-9][!0-9]*';
-    c_fix = format;
-    c_fix_arg = "#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n"
-                "%0\n"
-                "#else\n"
-                "%1{0}, {0}, {0}, {%3}%4\n"
-                "#endif";
-    c_fix_arg = "(^#define[ \t]+PTHREAD_ONCE_INIT[ \t]+\\{\\{)"
-                "(0, 0, 0, )(PTHREAD_[A-Z_]+)(\\}\\})[ \t]*$";
-    test_text =
-    '#ident "@(#)pthread.h  1.26  98/04/12 SMI"'"\n"
-    "#define PTHREAD_ONCE_INIT\t{{0, 0, 0, PTHREAD_ONCE_NOTDONE}}\n";
-};
-
-
-/*
- * Sun Solaris 2 has a version of sys/int_const.h that defines
- * UINT8_C and UINT16_C to unsigned constants.
- */
-fix = {
-    hackname  = solaris_int_const;
-    files     = sys/int_const.h;
-    mach      = '*-*-solaris2*';
-    c_fix     = format;
-    c_fix_arg = "#define\tUINT8_C(c)\t(c)\n"
-                "%1\n"
-                "#define\tUINT16_C(c)\t(c)";
-    select    = "^#define[ \t]+UINT8_C\\(c\\)[ \t]+__CONCAT__.*\n"
-                "(/\*.*\*/)\n"
-                "#define[ \t]+UINT16_C\\(c\\)[ \t]+__CONCAT__.*";
-    test_text =
-    "#define	UINT8_C(c)	__CONCAT__(c,u)\n"
-    "/* CSTYLED */\n"
-    "#define	UINT16_C(c)	__CONCAT__(c,u)";
-};
-
-
-/*
- * Sun Solaris 2 has a version of sys/int_limits.h that defines
- * UINT8_MAX and UINT16_MAX to unsigned constants.
- */
-fix = {
-    hackname  = solaris_int_limits_1;
-    files     = sys/int_limits.h;
-    mach      = '*-*-solaris2*';
-    c_fix     = format;
-    c_fix_arg = "#define\tUINT8_MAX\t(255)\n"
-                "#define\tUINT16_MAX\t(65535)";
-    select    = "^#define[ \t]+UINT8_MAX[ \t]+\\(255U\\)\n"
-                "#define[ \t]+UINT16_MAX[ \t]+\\(65535U\\)";
-    test_text =
-    "#define	UINT8_MAX	(255U)\n"
-    "#define	UINT16_MAX	(65535U)";
-};
-
-
-/*
- * Sun Solaris 2 has a version of sys/int_limits.h that defines
- * INT_FAST16 limits to wrong values for sys/int_types.h.
- */
-fix = {
-    hackname  = solaris_int_limits_2;
-    files     = sys/int_limits.h;
-    mach      = '*-*-solaris2*';
-    c_fix     = format;
-    c_fix_arg = "#define\t%1_FAST16_%2 %132_%2";
-    select    = "^#define[ \t]+(INT|UINT)_FAST16_(MAX|MIN)[ \t](INT|UINT)16.*";
-    test_text =
-    "#define	INT_FAST16_MAX INT16_MAX\n"
-    "#define	UINT_FAST16_MAX UINT16_MAX\n"
-    "#define	INT_FAST16_MIN	INT16_MIN";
-};
-
-
-/*
- * Sun Solaris 2 has a version of sys/int_limits.h that defines
- * SIZE_MAX as unsigned long.
- */
-fix = {
-    hackname  = solaris_int_limits_3;
-    files     = sys/int_limits.h;
-    mach      = '*-*-solaris2*';
-    c_fix     = format;
-    c_fix_arg = "#define\tSIZE_MAX\t4294967295U";
-    select    = "^#define[ \t]+SIZE_MAX[ \t]+4294967295UL";
-    test_text =
-    "#define	SIZE_MAX	4294967295UL";
-};
-
-
-/*
- * Sun Solaris up to 9 has a version of sys/int_types.h that forbids use
- * of Standard C99 64-bit types in 32-bit mode.
- */
-fix = {
-    hackname  = solaris_int_types;
-    select    = "__STDC__ - 0 == 0";
-    bypass    = "_LONGLONG_TYPE";
-    files     = sys/int_types.h;
-    c_fix     = format;
-    c_fix_arg =
-    "(defined(_STDC_C99) || !defined(_STRICT_STDC) || defined(__GNUC__))";
-    test_text =
-    "#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)\n"
-    "typedef	long long		int64_t;\n"
-    "#endif\n\n"
-    "#if defined(_LP64) || (__STDC__ - 0 == 0 && !defined(_NO_LONGLONG))\n"
-    "typedef int64_t			intmax_t;\n"
-    "#endif";
-};
-
-
-/*
- * Solaris 10+ <spawn.h> uses char *const argv[_RESTRICT_KYWD] in the
- * posix_spawn declarations, which doesn't work with C++.
- */
-fix = {
-    hackname  = solaris_posix_spawn_restrict;
-    files     = spawn.h;
-    mach      = '*-*-solaris2*';
-    c_fix     = format;
-    c_fix_arg = "%1*_RESTRICT_KYWD %2%3";
-    select    = "(.*[ \t]+)([a-z]+)\\[_RESTRICT_KYWD\\](.*)";
-    test_text =
-    "char *const argv[_RESTRICT_KYWD],\n"
-    "char *const envp[_RESTRICT_KYWD]);";
-};
-
-
 /*
  * Before Solaris 10, <stdio.h> lacks declarations of std::__filbuf and
  * std::__flsbuf, but <iso/stdio_iso.h> uses them.
@@ -3677,6 +4220,20 @@
 		"#endif";
 };
 
+/*
+ *  Solaris <stdio.h> shouldn't use std::gets for C++14.
+ */
+fix = {
+    hackname  = solaris_std_gets_cxx14;
+    mach      = "*-*-solaris2*";
+    files     = "stdio.h";
+    select    = "using std::gets;";
+
+    c_fix     = format;
+    c_fix_arg = "#if __cplusplus < 201402L\n%0\n#endif";
+
+    test_text = "using std::gets;";
+};
 
 /*
  * Sun Solaris 8 has what appears to be some gross workaround for
@@ -3696,34 +4253,20 @@
     test_text = "#if\tdefined(__cplusplus) && (__cplusplus < 54321L)";
 };
 
-
 /*
- * On Solaris 9, __va_list needs to become a typedef for
- * __builtin_va_list to make -Wmissing-format-attribute work.
+ *  Solaris <stdlib.h> shouldn't use _Noreturn, breaks with C++.
  */
 fix = {
-    hackname = solaris_sys_va_list;
-    files    = sys/va_list.h;
-    mach     = '*-*-solaris2.9';
-    select   = "#if.*__STDC__.*\n"
-	       "typedef void \\*__va_list;\n"
-	       "#else\n"
-	       "typedef char \\*__va_list;\n"
-	       "#endif";
+    hackname  = solaris_stdlib_noreturn;
+    mach      = "*-*-solaris2*";
+    files     = "iso/stdlib_c99.h";
+    select    = "(extern) _Noreturn (void quick_exit\\(int\\));";
 
     c_fix    = format;
-    c_fix_arg = "#ifdef __GNUC__\n"
-		"typedef __builtin_va_list __va_list;\n"
-		"#else\n"
-		"%0\n"
-		"#endif";
-    test_text = "#if defined(__STDC__) && !defined(__ia64)\n"
-    		"typedef void *__va_list;\n"
-	        "#else\n"
-	        "typedef char *__va_list;\n"
-	        "#endif";
-};
+    c_fix_arg = "%1 %2 __attribute__((__noreturn__));";
 
+    test_text = "extern _Noreturn void quick_exit(int);";
+};
 
 /*
  *  a missing semi-colon at the end of the statsswtch structure definition.
@@ -3737,7 +4280,6 @@
     test_text = "struct statswtch {\n  int boottime\n};";
 };
 
-
 /*
  *  Arrange for stdio.h to use stdarg.h to define __gnuc_va_list.
  *  On 4BSD-derived systems, stdio.h defers to machine/ansi.h; that's
@@ -3761,7 +4303,6 @@
     test_text = "";
 };
 
-
 /*
  *  Don't use or define the name va_list in stdio.h.  This is for
  *  ANSI.  Note _BSD_VA_LIST_ is dealt with elsewhere.  The presence
@@ -3809,7 +4350,6 @@
     test_text = "extern void mumble( va_list);";
 };
 
-
 /*
  *  Fix headers that use va_list from stdio.h to use the updated
  *  va_list from the stdio_va_list change.  Note _BSD_VA_LIST_ is
@@ -3859,7 +4399,6 @@
     test_text = "extern void mumble( va_list);";
 };
 
-
 /*
  *  "!__STDC__" or "__STDC__==0" or "__STDC__!=1" or "__STDC__-0==0"
  *  is "!defined( __STRICT_ANSI__ )"
@@ -3922,7 +4461,6 @@
                "int foo;\n#endif";
 };
 
-
 /*
  *  "__STDC__!=0" or "__STDC__==1" or "__STDC__-0==1"
  *  is "defined( __STRICT_ANSI__ )"
@@ -3942,7 +4480,6 @@
     test_text = "#if __STDC__ == 1 /* is std C\n */\nint foo;\n#endif";
 };
 
-
 /*
  *  IRIX 4.0.5 <rpc/xdr.h> uses struct __file_s
  *  in prototype without previous definition.
@@ -3956,7 +4493,6 @@
     test_text = "extern void xdrstdio_create( struct __file_s* );";
 };
 
-
 /*
  *  IRIX 4.0.5 <rpc/auth.h> uses struct sockaddr
  *  in prototype without previous definition.
@@ -3975,7 +4511,6 @@
     test_text = "extern AUTH* authdes_create( struct sockaddr* );";
 };
 
-
 /*
  *  Apply fix this to all OSs since this problem seems to effect
  *  more than just SunOS.
@@ -4003,7 +4538,6 @@
     "};";
 };
 
-
 /*
  *  Fix bogus #ifdef on SunOS 4.1.
  */
@@ -4018,7 +4552,6 @@
     test_text = "#ifdef  __i386__ || __vax__ || __sun4c__";
 };
 
-
 /*
  *  Fix the CAT macro in SunOS memvar.h.
  */
@@ -4037,7 +4570,6 @@
     "#define CAT(a,b)\ta/**/b";
 };
 
-
 /*
  *  Fix return type of free and {c,m,re}alloc in <malloc.h> on SunOS 4.1.
  *  Also fix return type of {m,re}alloc in <malloc.h> on sysV68
@@ -4061,7 +4593,6 @@
     "char*\trealloc();";
 };
 
-
 /*
  *  Check for yet more missing ';' in struct (in SunOS 4.0.x)
  */
@@ -4073,7 +4604,6 @@
     test_text = "struct mumble\n  int _cnt\n};";
 };
 
-
 /*
  *  signal.h on SunOS defines signal using (),
  *  which causes trouble when compiling with g++ -pedantic.
@@ -4093,7 +4623,6 @@
     test_text = "void\t(*signal())();";
 };
 
-
 /*
  *  Correct the return type for strlen in strings.h in SunOS 4.
  */
@@ -4106,6 +4635,19 @@
     test_text = " int\tstrlen(); /* string length */";
 };
 
+/*
+ *  Linux kernel's vt.h breaks C++
+ */
+fix = {
+    hackname  = suse_linux_vt_cxx;
+    files     = linux/vt.h;
+
+    select    = "^[ \t]*unsigned int new;";
+    c_fix     = format;
+    c_fix_arg = "unsigned int newev;";
+
+    test_text = "        unsigned int new;      /* New console (if changing) */";
+};
 
 /*
  *  Disable apparent native compiler optimization cruft in SVR4.2 <string.h>
@@ -4120,7 +4662,6 @@
     test_text = "#define strlen __std_hdr_strlen\n";
 };
 
-
 /*
  *   Fix broken decl of getcwd present on some svr4 systems.
  */
@@ -4137,7 +4678,6 @@
     test_text = "extern char* getcwd(char *, int);";
 };
 
-
 /*
  *   Fix broken decl of profil present on some svr4 systems.
  */
@@ -4155,7 +4695,6 @@
     'profil(unsigned short *, unsigned int, unsigned int, unsigned int);';
 };
 
-
 /*
  * Correct types for signal handler constants like SIG_DFL; they might be
  * void (*) (), and should be void (*) (int).  C++ doesn't like the
@@ -4171,7 +4710,6 @@
                 "#define SIG_IGN (void (*)())0\n";
 };
 
-
 /*
  *  Some SysV r4 systems, including Sequent's DYNIX/ptx, use the local
  *  function 'getrnge' in <regexp.h> before they declare it.  For these
@@ -4200,7 +4738,6 @@
                 "{}";
 };
 
-
 /*
  *  Fix return value of mem{ccpy,chr,cpy,set} and str{len,spn,cspn}
  *  in string.h on sysV68
@@ -4248,7 +4785,6 @@
     "\tstrlen(), strspn();";
 };
 
-
 /*
  *  Fix return type of calloc, malloc, realloc, bsearch and exit
  */
@@ -4268,14 +4804,13 @@
     "extern char*\tbsearch(void*,size_t,size_t);\n";
 };
 
-
 /*
  * __thread is now a keyword.
  */
 fix = {
     hackname  = thread_keyword;
     files     = "pthread.h";
-    files     = "bits/sigthread.h";
+    files     = bits/sigthread.h, '*/bits/sigthread.h';
     select    = "([* ])__thread([,)])";
     c_fix     = format;
     c_fix_arg = "%1__thr%2";
@@ -4300,7 +4835,6 @@
     test_text = "#ifdef _cplusplus\nint bogus;\n#endif";
 };
 
-
 /*
  *  parameters not const on DECstation Ultrix V4.0 and OSF/1.
  */
@@ -4322,7 +4856,6 @@
     "extern int scanf( char *__format, ...);\n";
 };
 
-
 /*
  *  parameters not const on DECstation Ultrix V4.0 and OSF/1.
  */
@@ -4344,7 +4877,6 @@
     "extern char *tempnam(char*,char*);\n";
 };
 
-
 /*
  *  Fix definitions of macros used by va-i960.h in VxWorks header file.
  */
@@ -4363,6 +4895,40 @@
     "#define __alignof__(x) ...";
 };
 
+/*
+ * On VMS, add missing braces around sigset_t constants.
+ */
+fix = {
+    hackname  = vms_add_missing_braces;
+    select    = "(_SIG_[A-Z]+_SET[ \t]+= \\{)(0x[0F]+, 0x[0F]+)";
+    mach      = "*-*-*vms*";
+    files     = "rtldef/signal.h";
+    c_fix     = format;
+
+    c_fix_arg = '%1 {%2} ';
+
+    test_text = "static const __sigset_t _SIG_EMPTY_SET  = "
+                "{0x00000000, 0x00000000},\n"
+                " _SIG_FULL_SET   = {0xFFFFFFFF, 0xFFFFFFFF};\n";
+};
+
+/*
+ * On VMS, some DEC-C builtins are directly used.
+ */
+fix = {
+    hackname  = vms_decc_builtin;
+    select    = "(__MEMSET|__MEMMOVE|__MEMCPY|__STRLEN|__STRCPY)";
+    mach      = "*-*-*vms*";
+    files     = rtldef/string.h, rtldef/time.h, rtldef/strings.h,
+                rtldef/socket.h;
+    sed       = "s@__MEMSET@memset@";
+    sed       = "s@__MEMMOVE@memmove@";
+    sed       = "s@__MEMCPY@memcpy@";
+    sed       = "s@__STRLEN@strlen@";
+    sed       = "s@__STRCPY@strcpy@";
+
+    test_text = "define FD_ZERO(__p) __MEMSET((__p), 0, sizeof(*(__p)))\n";
+};
 
 /*
  *  Define __CAN_USE_EXTERN_PREFIX on vms.
@@ -4388,27 +4954,6 @@
 };
 
 /*
- * On VMS, use pragma extern_model instead of VAX-C keywords.
- */
-fix = {
-    hackname  = vms_use_pragma_extern_model;
-    select    = "#if defined\\(__DECC\\) \\|\\| defined\\(__DECCXX\\)\n"
-		"# pragma extern_model __save\n";
-    mach      = "*-*-*vms*";
-    c_fix     = format;
-
-    c_fix_arg = "#if defined(__DECC) || defined(__DECCXX) || defined(__GNUC__)\n"
-		"# pragma extern_model __save\n";
-
-    test_text = "#if defined(__DECC) || defined(__DECCXX)\n"
-		"# pragma extern_model __save\n"
-		"# pragma extern_model strict_refdef\n"
-		"   extern struct x zz$yy;\n"
-		"# pragma extern_model __restore\n"
-		"#endif\n";
-};
-
-/*
  * On VMS, disable the use of dec-c string builtins
  */
 fix = {
@@ -4424,39 +4969,6 @@
 };
 
 /*
- * On VMS, change <resource.h> to <sys/resource.h> to avoid a
- * conflict while building gcc.  Likewise for <builtins.h>
- */
-fix = {
-    hackname  = vms_use_quoted_include;
-    select    = "(#[ \t]*include[ \t]+)<(resource|builtins)\\.h>";
-    mach      = "*-*-*vms*";
-    files     = rtldef/wait.h, starlet_c/pthread.h;
-    c_fix     = format;
-
-    c_fix_arg = '%1<sys/%2.h>';
-
-    test_text = "#   include <resource.h>";
-};
-
-/*
- * On VMS, add missing braces around sigset_t constants.
- */
-fix = {
-    hackname  = vms_add_missing_braces;
-    select    = "(_SIG_[A-Z]+_SET[ \t]+= \\{)(0x[0F]+, 0x[0F]+)";
-    mach      = "*-*-*vms*";
-    files     = "rtldef/signal.h";
-    c_fix     = format;
-
-    c_fix_arg = '%1 {%2} ';
-
-    test_text = "static const __sigset_t _SIG_EMPTY_SET  = "
-                "{0x00000000, 0x00000000},\n"
-                " _SIG_FULL_SET   = {0xFFFFFFFF, 0xFFFFFFFF};\n";
-};
-
-/*
  * On VMS, fix incompatible redeclaration of hostalias.
  */
 fix = {
@@ -4475,21 +4987,23 @@
 };
 
 /*
- * On VMS, some DEC-C builtins are directly used.
+ * On VMS, forward declare structure before referencing them in prototypes.
  */
 fix = {
-    hackname  = vms_decc_builtin;
-    select    = "(__MEMSET|__MEMMOVE|__MEMCPY|__STRLEN|__STRCPY)";
+    hackname  = vms_forward_declare_struct;
+    select    = "(/\\* forward decls for C\\+\\+ \\*/\n)"
+                "#ifdef __cplusplus\n";
     mach      = "*-*-*vms*";
-    files     = rtldef/string.h, rtldef/time.h, rtldef/strings.h,
-                rtldef/socket.h;
-    sed       = "s@__MEMSET@memset@";
-    sed       = "s@__MEMMOVE@memmove@";
-    sed       = "s@__MEMCPY@memcpy@";
-    sed       = "s@__STRLEN@strlen@";
-    sed       = "s@__STRCPY@strcpy@";
+    files     = rtldef/if.h;
+    c_fix     = format;
 
-    test_text = "define FD_ZERO(__p) __MEMSET((__p), 0, sizeof(*(__p)))\n";
+    c_fix_arg = "%1"
+                "#if defined (__cplusplus) || defined (__GNUC__)\n";
+
+    test_text = "/* forward decls for C++ */\n"
+                "#ifdef __cplusplus\n"
+                "struct foo;\n"
+                "#endif\n";
 };
 
 /*
@@ -4497,53 +5011,72 @@
  */
 fix = {
     hackname  = vms_no_64bit_getopt;
-    select    = "^[ \t]*(extern[ \t]*)?(int[ \t]*(getopt|optind|opterr|optopt)|(char \\*optarg))([ \t]*\\(.*\\))?;\n";
-    /*    select    = "^[ \t](extern[ \t))?(int[ \t](getopt|optind|opterr|optopt))|(char *optarg).*;\n"; */
+    select    = "^[ \t]*(extern[ \t]*)?(int[ \t]*(getopt|optind|opterr|optopt)"
+                "|(char \\*optarg))([ \t]*\\(.*\\))?;\n";
     mach      = "*-*-*vms*";
     files     = rtldef/stdio.h, rtldef/unistd.h;
     c_fix     = format;
 
-    c_fix_arg = "#if __INITIAL_POINTER_SIZE != 64 /* getopt is short ptr only.  */\n"
-                "%0"
-                "#endif\n";
+    c_fix_arg = <<- _EOArg_
+	#if __INITIAL_POINTER_SIZE != 64 /* getopt is short ptr only.  */
+	%0#endif
+
+	_EOArg_;
 
     test_text = "int getopt (int, char * const [], const char *);";
 };
 
 /*
- * On VMS, forward declare structure before referencing them in prototypes.
+ * On VMS, force the use of fast setjmp, as the normal setjmp uses conditions
+ * which is not yet fully supported by gcc.
  */
 fix = {
-    hackname  = vms_forward_declare_struct;
-    select    = "(/\\* forward decls for C\\+\\+ \\*/\n)"
-                "#ifdef __cplusplus\n";
+    hackname  = vms_use_fast_setjmp;
+    select    = "(#[ \t]*if[ \t]*defined\\(__FAST_SETJMP\\)[ \t]*\\|\\|)";
     mach      = "*-*-*vms*";
-    files     = rtldef/if.h;
+    files     = rtldef/setjmp.h;
     c_fix     = format;
 
-    c_fix_arg = "%1"
-                "#if defined (__cplusplus) || defined (__GNUC__)\n";
+    c_fix_arg = "%0 defined (__GNUC__) ||";
 
-    test_text = "/* forward decls for C++ */\n"
-                "#ifdef __cplusplus\n"
-                "struct foo;\n"
+    test_text = "#   if defined(__FAST_SETJMP) || defined(__UNIX_SETJMP)";
+};
+
+/*
+ * On VMS, use pragma extern_model instead of VAX-C keywords.
+ */
+fix = {
+    hackname  = vms_use_pragma_extern_model;
+    select    = "#if defined\\(__DECC\\) \\|\\| defined\\(__DECCXX\\)\n"
+		"# pragma extern_model __save\n";
+    mach      = "*-*-*vms*";
+    c_fix     = format;
+
+    c_fix_arg = "#if defined(__DECC) || defined(__DECCXX) || defined(__GNUC__)\n"
+		"# pragma extern_model __save\n";
+
+    test_text = "#if defined(__DECC) || defined(__DECCXX)\n"
+		"# pragma extern_model __save\n"
+		"# pragma extern_model strict_refdef\n"
+		"   extern struct x zz$yy;\n"
+		"# pragma extern_model __restore\n"
                 "#endif\n";
 };
 
 /*
- * On VMS, force the use of fast setjmp, as the normal setjmp uses conditions
- * which is not yet fully supported by gcc.
+ * On VMS, change <resource.h> to <sys/resource.h> to avoid a
+ * conflict while building gcc.  Likewise for <builtins.h>
  */
 fix = {
-    hackname  = vms_use_fast_setjmp;
-    select    = "(#[ \t]*if[ \t]*defined\\(__FAST_SETJMP\\)[ \t]*\\|\\|)";
+    hackname  = vms_use_quoted_include;
+    select    = "(#[ \t]*include[ \t]+)<(resource|builtins)\\.h>";
     mach      = "*-*-*vms*";
-    files     = rtldef/setjmp.h;
+    files     = rtldef/wait.h, starlet_c/pthread.h;
     c_fix     = format;
 
-    c_fix_arg = "%0 defined (__GNUC__) ||";
+    c_fix_arg = '%1<sys/%2.h>';
 
-    test_text = "#   if defined(__FAST_SETJMP) || defined(__UNIX_SETJMP)";
+    test_text = "#   include <resource.h>";
 };
 
 /*
@@ -4552,27 +5085,29 @@
  */
 fix = {
     hackname  = void_null;
-    files     = curses.h;
-    files     = dbm.h;
-    files     = locale.h;
-    files     = stdio.h;
-    files     = stdlib.h;
-    files     = string.h;
-    files     = time.h;
-    files     = unistd.h;
-    files     = sys/dir.h;
-    files     = sys/param.h;
-    files     = sys/types.h;
+    files     = curses.h, dbm.h, locale.h, stdio.h, stdlib.h, string.h,
+    time.h, unistd.h, sys/dir.h, sys/param.h, sys/types.h;
     /* avoid changing C++ friendly NULL */
     bypass    = __cplusplus;
     bypass    = __null;
     select    = "^#[ \t]*define[ \t]+NULL[ \t]+\\(\\(void[ \t]*\\*\\)0\\)";
     c_fix     = format;
-    c_fix_arg = "#define NULL 0";
+    c_fix_arg = <<- _EOFix_
+	#ifndef NULL
+	#ifdef __cplusplus
+	#ifdef __GNUG__
+	#define NULL __null
+	#else /* ! __GNUG__  */
+	#define NULL 0L
+	#endif /* __GNUG__  */
+	#else /* ! __cplusplus  */
+	#define NULL ((void *)0)
+	#endif /* __cplusplus  */
+	#endif /* !NULL  */
+	_EOFix_;
     test_text = "# define\tNULL \t((void *)0)  /* typed NULL */";
 };
 
-
 /*
  *  Make VxWorks header which is almost gcc ready fully gcc ready.
  */
@@ -4648,7 +5183,6 @@
     test_text   = "extern STATUS mkdir (const char * _qwerty) ;";
 };
 
-
 /*
  *  Fix VxWorks <time.h> to not require including <vxTypes.h>.
  */
@@ -4661,7 +5195,6 @@
     test_text = "uint_t\t_clocks_per_sec;";
 };
 
-
 /*
  *  Fix VxWorks <sys/stat.h> to not require including <vxWorks.h>.
  */
@@ -4695,7 +5228,6 @@
     test_text   = "#include <regs.h>\n";
 };
 
-
 /*
  *  Another bad dependency in VxWorks 5.2 <time.h>.
  */
@@ -4759,7 +5291,6 @@
     "} mumble;\n";
 };
 
-
 /*
  *  class in Xm/BaseClassI.h
  */
@@ -4775,7 +5306,6 @@
     test_text = "extern mumble (int  class);\n";
 };
 
-
 /*
  *  new in Xm/Traversal.h
  */
@@ -4799,7 +5329,6 @@
     "};\nextern Wedged( Widget new, Widget old );";
 };
 
-
 /*
  *  Incorrect sprintf declaration in X11/Xmu.h
  */
@@ -4814,54 +5343,4 @@
 
     test_text = "extern char *\tsprintf();";
 };
-
-/*
- *  Incorrect feraiseexcept extern inline in bits/fenv.h on x86_64
- *  that fails when compiling for SSE-less 32-bit x86.
- */
-fix = {
-    hackname  = feraiseexcept_nosse_invalid;
-    mach      = 'i[34567]86-*-linux*', 'x86*-linux*', 'amd64-*-linux*';
-    files     = bits/fenv.h;
-    select    = "^([\t ]*)__asm__ __volatile__ \\(\"divss %0, %0 *\" : "
-		": \"x\" \\(__f\\)\\);$";
-    bypass    = "\"fdiv .*; fwait\"";
-    
-    c_fix     = format;
-    c_fix_arg = <<- _EOText_
-	# ifdef __SSE_MATH__
-	%0
-	# else
-	%1__asm__ __volatile__ ("fdiv %%%%st, %%%%st(0); fwait"
-	%1			: "=t" (__f) : "0" (__f));
-	# endif
-	_EOText_;
-
-    test_text = <<- _EOText_
-	  __asm__ __volatile__ ("divss %0, %0" : : "x" (__f));
-	_EOText_;
-};
-fix = {
-    hackname  = feraiseexcept_nosse_divbyzero;
-    mach      = 'i[34567]86-*-linux*', 'x86*-linux*', 'amd64-*-linux*';
-    files     = bits/fenv.h;
-    select    = "^([\t ]*)__asm__ __volatile__ \\(\"divss %1, %0 *\" : "
-		": \"x\" \\(__f\\), \"x\" \\(__g\\)\\);$";
-    bypass    = "\"fdivp .*; fwait\"";
-    
-    c_fix     = format;
-    c_fix_arg = <<- _EOText_
-	# ifdef __SSE_MATH__
-	%0
-	# else
-	%1__asm__ __volatile__ ("fdivp %%%%st, %%%%st(1); fwait"
-	%1			: "=t" (__f) : "0" (__f), "u" (__g) : "st(1)");
-	# endif
-	_EOText_;
-
-    test_text = <<- _EOText_
-	  __asm__ __volatile__ ("divss %1, %0" : : "x" (__f), "x" (__g));
-	_EOText_;
-};
-
 /*EOF*/
diff -N -u -r -w gcc-4.8.2/fixincludes/mkfixinc.sh gcc-4.8.2-patched/fixincludes/mkfixinc.sh
--- gcc-4.8.2/fixincludes/mkfixinc.sh	2012-10-28 21:42:48.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/mkfixinc.sh	2019-08-09 16:06:37.358979560 +0000
@@ -14,12 +14,12 @@
     i?86-*-cygwin* | \
     i?86-*-mingw32* | \
     x86_64-*-mingw32* | \
-    i?86-*-interix* | \
     powerpc-*-eabisim* | \
     powerpc-*-eabi*    | \
     powerpc-*-rtems*   | \
     powerpcle-*-eabisim* | \
-    powerpcle-*-eabi* )
+    powerpcle-*-eabi* | \
+    *-musl* )
 	#  IF there is no include fixing,
 	#  THEN create a no-op fixer and exit
 	(echo "#! /bin/sh" ; echo "exit 0" ) > ${target}
diff -N -u -r -w gcc-4.8.2/fixincludes/server.c gcc-4.8.2-patched/fixincludes/server.c
--- gcc-4.8.2/fixincludes/server.c	2009-03-27 21:56:01.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/server.c	2019-08-09 16:06:37.448421240 +0000
@@ -192,7 +192,8 @@
 
   fputs ("trap : 1\n", server_pair.pf_write);
   fflush (server_pair.pf_write);
-  getcwd (buff, MAXPATHLEN + 1);
+  if (getcwd (buff, MAXPATHLEN + 1) == NULL)
+    buff[0] = 0;
   p_cur_dir = xstrdup (buff);
 }
 
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/AvailabilityInternal.h gcc-4.8.2-patched/fixincludes/tests/base/AvailabilityInternal.h
--- gcc-4.8.2/fixincludes/tests/base/AvailabilityInternal.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/AvailabilityInternal.h	2019-08-09 16:06:38.748404280 +0000
@@ -0,0 +1,31 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/AvailabilityInternal.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( DARWIN_AVAILABILITYINTERNAL_CHECK )
+#if defined(__has_attribute)
+  #if __has_attribute(availability)
+#define __API_A(x) __attribute__((availability(__API_AVAILABLE_PLATFORM_##x)))
+  #else
+    #define __API_A(x)
+  #endif
+#else
+    #define __API_A(x)
+#endif
+#if defined(__has_attribute)
+  #if __has_attribute(availability)
+#define __API_D(msg,x) __attribute__((availability(__API_DEPRECATED_PLATFORM_##x,message=msg)))
+  #else
+    #define __API_D(msg,x)
+  #endif
+#else
+    #define __API_D(msg,x)
+#endif
+#endif  /* DARWIN_AVAILABILITYINTERNAL_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/alloca.h gcc-4.8.2-patched/fixincludes/tests/base/alloca.h
--- gcc-4.8.2/fixincludes/tests/base/alloca.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/alloca.h	2019-08-09 16:06:38.835454840 +0000
@@ -0,0 +1,18 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/alloca.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( HPPA_HPUX11_ALLOCA_CHECK )
+#ifndef _SYS_STDSYMS_INCLUDED
+#  include <sys/stdsyms.h>
+#endif /* _SYS_STDSYMS_INCLUDED */
+
+#ifndef _STDDEF_INCLUDED
+#endif  /* HPPA_HPUX11_ALLOCA_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/assert.h gcc-4.8.2-patched/fixincludes/tests/base/assert.h
--- gcc-4.8.2/fixincludes/tests/base/assert.h	2004-08-31 10:27:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/assert.h	2019-08-09 16:06:38.809515480 +0000
@@ -19,6 +19,13 @@
 #include <stdio.h>
 
 
+#if defined( AIX_ASSERT_CHECK )
+#ifndef __cplusplus
+#define static_assert _Static_assert
+#endif
+#endif  /* AIX_ASSERT_CHECK */
+
+
 #if defined( ALPHA___ASSERT_CHECK )
 extern void __assert(const char *, const char *, int);
 #endif  /* ALPHA___ASSERT_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/bits/fenv.h gcc-4.8.2-patched/fixincludes/tests/base/bits/fenv.h
--- gcc-4.8.2/fixincludes/tests/base/bits/fenv.h	2013-01-16 04:07:20.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/bits/fenv.h	2019-08-09 16:06:39.728841840 +0000
@@ -9,16 +9,6 @@
 
 
 
-#if defined( FERAISEEXCEPT_NOSSE_INVALID_CHECK )
-# ifdef __SSE_MATH__
-  __asm__ __volatile__ ("divss %0, %0" : : "x" (__f));
-# else
-  __asm__ __volatile__ ("fdiv %%st, %%st(0); fwait"
-  			: "=t" (__f) : "0" (__f));
-# endif
-#endif  /* FERAISEEXCEPT_NOSSE_INVALID_CHECK */
-
-
 #if defined( FERAISEEXCEPT_NOSSE_DIVBYZERO_CHECK )
 # ifdef __SSE_MATH__
   __asm__ __volatile__ ("divss %1, %0" : : "x" (__f), "x" (__g));
@@ -27,3 +17,13 @@
   			: "=t" (__f) : "0" (__f), "u" (__g) : "st(1)");
 # endif
 #endif  /* FERAISEEXCEPT_NOSSE_DIVBYZERO_CHECK */
+
+
+#if defined( FERAISEEXCEPT_NOSSE_INVALID_CHECK )
+# ifdef __SSE_MATH__
+  __asm__ __volatile__ ("divss %0, %0" : : "x" (__f));
+# else
+  __asm__ __volatile__ ("fdiv %%st, %%st(0); fwait"
+  			: "=t" (__f) : "0" (__f));
+# endif
+#endif  /* FERAISEEXCEPT_NOSSE_INVALID_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/complex.h gcc-4.8.2-patched/fixincludes/tests/base/complex.h
--- gcc-4.8.2/fixincludes/tests/base/complex.h	2012-03-14 16:33:37.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/complex.h	2019-08-09 16:06:39.338388280 +0000
@@ -21,6 +21,12 @@
 #endif  /* HPUX_IMAGINARY_I_CHECK */
 
 
+#if defined( IRIX_COMPLEX_CHECK )
+#define _Complex_I (__extension__ 1.0iF)
+#define I _Complex_I
+#endif  /* IRIX_COMPLEX_CHECK */
+
+
 #if defined( SOLARIS_COMPLEX_CHECK )
 #define _Complex_I (__extension__ 1.0iF)
 #define	complex		_Complex
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/ctype.h gcc-4.8.2-patched/fixincludes/tests/base/ctype.h
--- gcc-4.8.2/fixincludes/tests/base/ctype.h	2004-08-31 10:27:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/ctype.h	2019-08-09 16:06:39.208364360 +0000
@@ -7,6 +7,18 @@
     This had to be done to correct non-standard usages in the
     original, manufacturer supplied header file.  */
 
+#ifndef FIXINC_WRAP_CTYPE_H_AIX_EXTERNC
+#define FIXINC_WRAP_CTYPE_H_AIX_EXTERNC 1
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+#if defined( AIX_EXTERNC_CHECK )
+extern int __n_pthreads;
+
+#endif  /* AIX_EXTERNC_CHECK */
 
 
 #if defined( HPUX10_CTYPE_DECLARATIONS1_CHECK )
@@ -63,3 +75,8 @@
 # define isalpha(__c) (__SB_masks ? (int)__SB_masks[__c] & _IS
 
 #endif  /* HPUX_CTYPE_MACROS_CHECK */
+#ifdef __cplusplus
+}
+#endif
+
+#endif  /* FIXINC_WRAP_CTYPE_H_AIX_EXTERNC */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/curses.h gcc-4.8.2-patched/fixincludes/tests/base/curses.h
--- gcc-4.8.2/fixincludes/tests/base/curses.h	2004-11-13 20:41:01.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/curses.h	2019-08-09 16:06:39.012912200 +0000
@@ -9,6 +9,11 @@
 
 
 
+#if defined( AIX_NULL_CHECK )
+# define	NULL 	(0L)  /* typed NULL */
+#endif  /* AIX_NULL_CHECK */
+
+
 #if defined( AVOID_BOOL_DEFINE_CHECK )
 #ifndef __cplusplus
 # define bool	 char 
@@ -31,5 +36,15 @@
 
 
 #if defined( VOID_NULL_CHECK )
-#define NULL 0  /* typed NULL */
+#ifndef NULL
+#ifdef __cplusplus
+#ifdef __GNUG__
+#define NULL __null
+#else /* ! __GNUG__  */
+#define NULL 0L
+#endif /* __GNUG__  */
+#else /* ! __cplusplus  */
+#define NULL ((void *)0)
+#endif /* __cplusplus  */
+#endif /* !NULL  */  /* typed NULL */
 #endif  /* VOID_NULL_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/fcntl.h gcc-4.8.2-patched/fixincludes/tests/base/fcntl.h
--- gcc-4.8.2/fixincludes/tests/base/fcntl.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/fcntl.h	2019-08-09 16:06:38.808419720 +0000
@@ -0,0 +1,25 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/fcntl.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+#ifndef FIXINC_WRAP_FCNTL_H_AIX_EXTERNC
+#define FIXINC_WRAP_FCNTL_H_AIX_EXTERNC 1
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+#if defined( AAB_AIX_FCNTL_CHECK )
+
+#endif  /* AAB_AIX_FCNTL_CHECK */
+#ifdef __cplusplus
+}
+#endif
+
+#endif  /* FIXINC_WRAP_FCNTL_H_AIX_EXTERNC */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/i386/setjmp.h gcc-4.8.2-patched/fixincludes/tests/base/i386/setjmp.h
--- gcc-4.8.2/fixincludes/tests/base/i386/setjmp.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/i386/setjmp.h	2019-08-09 16:06:40.036376880 +0000
@@ -0,0 +1,14 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/i386/setjmp.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( DARWIN_LONGJMP_NORETURN_CHECK )
+void siglongjmp(sigjmp_buf, int) __attribute__ ((__noreturn__));
+#endif  /* DARWIN_LONGJMP_NORETURN_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/internal/math_core.h gcc-4.8.2-patched/fixincludes/tests/base/internal/math_core.h
--- gcc-4.8.2/fixincludes/tests/base/internal/math_core.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/internal/math_core.h	2019-08-09 16:06:40.071774880 +0000
@@ -0,0 +1,39 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/internal/math_core.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( IRIX___GENERIC1_CHECK )
+extern int isnan(double);
+extern int isnanf(float);
+extern int isnanl(long double);
+#if !defined(__cplusplus)
+#define isnan(x) (sizeof(x) == sizeof(double) ? _isnan(x) \
+               : sizeof(x) == sizeof(float) ? _isnanf(x) \
+               : _isnanl(x))
+#else
+namespace std
+{
+    inline int isnan(double x) { return _isnan(x); };
+    inline int isnanf(float x) { return _isnanf(x); };
+    inline int isnanl(long double x) { return _isnanl(x); };
+}
+#endif
+
+
+#endif  /* IRIX___GENERIC1_CHECK */
+
+
+#if defined( IRIX___GENERIC2_CHECK )
+#define isless(x,y) \
+  ((sizeof(x)<=4 && sizeof(y)<=4) ? _islessf(x,y) \
+   : (sizeof(x)<=8 && sizeof(y)<=8) ? _isless(x,y) \
+   : _islessl(x,y))
+
+#endif  /* IRIX___GENERIC2_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/internal/sgimacros.h gcc-4.8.2-patched/fixincludes/tests/base/internal/sgimacros.h
--- gcc-4.8.2/fixincludes/tests/base/internal/sgimacros.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/internal/sgimacros.h	2019-08-09 16:06:40.075360400 +0000
@@ -0,0 +1,17 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/internal/sgimacros.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( IRIX___RESTRICT_CHECK )
+#ifdef __c99
+#  ifndef __cplusplus
+#  define __restrict restrict
+#  endif
+#endif  /* IRIX___RESTRICT_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/internal/wchar_core.h gcc-4.8.2-patched/fixincludes/tests/base/internal/wchar_core.h
--- gcc-4.8.2/fixincludes/tests/base/internal/wchar_core.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/internal/wchar_core.h	2019-08-09 16:06:40.109872000 +0000
@@ -0,0 +1,15 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/internal/wchar_core.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( IRIX_WCSFTIME_CHECK )
+#if _NO_XOPEN5 && !defined(__c99)
+extern size_t wcsftime(wchar_t *, __SGI_LIBC_NAMESPACE_QUALIFIER size_t, const char *, const struct tm *);
+#endif  /* IRIX_WCSFTIME_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/iso/math_c99.h gcc-4.8.2-patched/fixincludes/tests/base/iso/math_c99.h
--- gcc-4.8.2/fixincludes/tests/base/iso/math_c99.h	2008-05-24 21:52:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/iso/math_c99.h	2019-08-09 16:06:37.946030480 +0000
@@ -20,6 +20,13 @@
 #endif  /* SOLARIS_MATH_1_CHECK */
 
 
+#if defined( SOLARIS_MATH_10_CHECK )
+#pragma ident	"@(#)math_c99.h	1.12	07/01/21 SMI"
+#undef	isinf
+#define	isinf(x) __builtin_isinf(x)
+#endif  /* SOLARIS_MATH_10_CHECK */
+
+
 #if defined( SOLARIS_MATH_2_CHECK )
 #ident	"@(#)math_c99.h	1.9	04/11/01 SMI"
 #undef	INFINITY
@@ -70,8 +77,12 @@
 #endif  /* SOLARIS_MATH_9_CHECK */
 
 
-#if defined( SOLARIS_MATH_10_CHECK )
-#pragma ident	"@(#)math_c99.h	1.12	07/01/21 SMI"
-#undef	isinf
-#define	isinf(x) __builtin_isinf(x)
-#endif  /* SOLARIS_MATH_10_CHECK */
+#if defined( SOLARIS_MATH_11_CHECK )
+/* @(#)math_c99.h	1.14	13/03/27 */
+#undef	signbit
+#define	signbit(x)	(sizeof(x) == sizeof(float) \
+			   ? __builtin_signbitf(x) \
+			   : sizeof(x) == sizeof(long double) \
+			     ? __builtin_signbitl(x) \
+			     : __builtin_signbit(x))
+#endif  /* SOLARIS_MATH_11_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/iso/stdio_iso.h gcc-4.8.2-patched/fixincludes/tests/base/iso/stdio_iso.h
--- gcc-4.8.2/fixincludes/tests/base/iso/stdio_iso.h	2011-08-10 09:43:38.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/iso/stdio_iso.h	2019-08-09 16:06:37.875030960 +0000
@@ -12,3 +12,16 @@
 #if defined( SOLARIS_GETC_STRICT_STDC_CHECK )
 #if	!defined(_REENTRANT) && !defined(_LP64) && (!defined(_STRICT_STDC) || (__cplusplus >= 199711L))
 #endif  /* SOLARIS_GETC_STRICT_STDC_CHECK */
+
+
+#if defined( SOLARIS_GETS_C11_CHECK )
+#if __STDC_VERSION__ < 201112L && __cplusplus < 201402L
+extern char	*gets(char *) __attribute__((__deprecated__));
+#endif
+#endif  /* SOLARIS_GETS_C11_CHECK */
+
+
+#if defined( SOLARIS_GETS_CXX14_CHECK )
+#if __STDC_VERSION__ < 201112L && __cplusplus < 201402L
+extern char	*gets(char *) __ATTR_DEPRECATED;
+#endif  /* SOLARIS_GETS_CXX14_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/iso/stdlib_c99.h gcc-4.8.2-patched/fixincludes/tests/base/iso/stdlib_c99.h
--- gcc-4.8.2/fixincludes/tests/base/iso/stdlib_c99.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/iso/stdlib_c99.h	2019-08-09 16:06:37.898424400 +0000
@@ -0,0 +1,14 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/iso/stdlib_c99.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( SOLARIS_STDLIB_NORETURN_CHECK )
+extern void quick_exit(int) __attribute__((__noreturn__));
+#endif  /* SOLARIS_STDLIB_NORETURN_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/linux/vt.h gcc-4.8.2-patched/fixincludes/tests/base/linux/vt.h
--- gcc-4.8.2/fixincludes/tests/base/linux/vt.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/linux/vt.h	2019-08-09 16:06:40.935593800 +0000
@@ -0,0 +1,14 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/linux/vt.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( SUSE_LINUX_VT_CXX_CHECK )
+unsigned int newev;      /* New console (if changing) */
+#endif  /* SUSE_LINUX_VT_CXX_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/math.h gcc-4.8.2-patched/fixincludes/tests/base/math.h
--- gcc-4.8.2/fixincludes/tests/base/math.h	2012-10-28 21:42:48.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/math.h	2019-08-09 16:06:38.388478800 +0000
@@ -85,6 +85,12 @@
 #endif  /* RS6000_DOUBLE_CHECK */
 
 
+#if defined( SOLARIS_MATH_12_CHECK )
+#if __cplusplus >= 201103L
+#endif
+#endif  /* SOLARIS_MATH_12_CHECK */
+
+
 #if defined( STRICT_ANSI_NOT_CTD_CHECK )
 #if 1 && \
 && defined(mumbling) |& ( !defined(__STRICT_ANSI__)) \
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/os/trace.h gcc-4.8.2-patched/fixincludes/tests/base/os/trace.h
--- gcc-4.8.2/fixincludes/tests/base/os/trace.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/os/trace.h	2019-08-09 16:06:37.969242720 +0000
@@ -0,0 +1,38 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/os/trace.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( DARWIN_OS_TRACE_1_CHECK )
+_os_trace_verify_printf(const char *msg, ...)
+#endif  /* DARWIN_OS_TRACE_1_CHECK */
+
+
+#if defined( DARWIN_OS_TRACE_2_CHECK )
+#if __BLOCKS__
+typedef void (^os_trace_payload_t)(xpc_object_t xdict);
+#endif
+#endif  /* DARWIN_OS_TRACE_2_CHECK */
+
+
+#if defined( DARWIN_OS_TRACE_3_CHECK )
+#if __BLOCKS__
+__API_AVAILABLE(macosx(10.10), ios(8.0), watchos(2.0), tvos(8.0))
+OS_EXPORT OS_NOTHROW OS_NOT_TAIL_CALLED
+void
+_os_trace_with_buffer(void *dso, const char *message, uint8_t type, const void *buffer, size_t buffer_size, os_trace_payload_t payload);
+#endif
+
+#if __BLOCKS__
+__OSX_AVAILABLE_STARTING(__MAC_10_12, __IPHONE_10_0)
+OS_EXPORT OS_NOTHROW
+void
+_os_trace_internal(void *dso, uint8_t type, const char *format, const uint8_t *buf, size_t buf_size, os_trace_payload_t payload);
+#endif
+#endif  /* DARWIN_OS_TRACE_3_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/pthread.h gcc-4.8.2-patched/fixincludes/tests/base/pthread.h
--- gcc-4.8.2/fixincludes/tests/base/pthread.h	2012-06-19 18:55:14.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/pthread.h	2019-08-09 16:06:39.360068840 +0000
@@ -91,69 +91,32 @@
 #endif  /* GLIBC_MUTEX_INIT_CHECK */
 
 
+#if defined( IRIX_PTHREAD_INIT_CHECK )
+#define PTHREAD_MUTEX_INITIALIZER	{ { 0 } }
+#define PTHREAD_COND_INITIALIZER	{ { 0 } }
+#define PTHREAD_RWLOCK_INITIALIZER	{ { 0 } }
+#endif  /* IRIX_PTHREAD_INIT_CHECK */
+
+
 #if defined( PTHREAD_INCOMPLETE_STRUCT_ARGUMENT_CHECK )
 extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask);
 #endif  /* PTHREAD_INCOMPLETE_STRUCT_ARGUMENT_CHECK */
 
 
-#if defined( SOLARIS_MUTEX_INIT_2_CHECK )
-#ident "@(#)pthread.h  1.26  98/04/12 SMI"
-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)
-#define PTHREAD_MUTEX_INITIALIZER	{{{0},0}, {{{0}}}, 0}
-#else
-#define PTHREAD_MUTEX_INITIALIZER	{{{0},0}, {{{0}}}, {0}}
-#endif
-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)
-#define PTHREAD_COND_INITIALIZER	{{{0}, 0}, 0}	/* DEFAULTCV */
-#else
-#define PTHREAD_COND_INITIALIZER	{{{0}, 0}, {0}}	/* DEFAULTCV */
-#endif
-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)
-#define	PTHREAD_MUTEX_INITIALIZER		/* = DEFAULTMUTEX */	\
-	{{0, 0, 0, DEFAULT_TYPE, _MUTEX_MAGIC}, {{{0}}}, 0}
-#else
-#define	PTHREAD_MUTEX_INITIALIZER		/* = DEFAULTMUTEX */	\
-	{{0, 0, 0, DEFAULT_TYPE, _MUTEX_MAGIC}, {{{0}}}, {0}}
-#endif
-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)
-#define	PTHREAD_COND_INITIALIZER		/* = DEFAULTCV */	\
-	{{{0, 0, 0, 0}, DEFAULT_TYPE, _COND_MAGIC}, 0}
-#else
-#define	PTHREAD_COND_INITIALIZER		/* = DEFAULTCV */	\
-	{{{0, 0, 0, 0}, DEFAULT_TYPE, _COND_MAGIC}, {0}}
-#endif
-#endif  /* SOLARIS_MUTEX_INIT_2_CHECK */
-
-
-#if defined( SOLARIS_RWLOCK_INIT_1_CHECK )
-#ident "@(#)pthread.h  1.26  98/04/12 SMI"
-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)
-#define PTHREAD_RWLOCK_INITIALIZER	{0, 0, 0, {0, 0, 0}, {0, 0}, {0, 0}}
-#else
-#define PTHREAD_RWLOCK_INITIALIZER	{0, 0, 0, {{0}, {0}, {0}}, {{0}, {0}}, {{0}, {0}}}
-#endif
-#endif  /* SOLARIS_RWLOCK_INIT_1_CHECK */
-
-
 #if defined( SOLARIS_ONCE_INIT_1_CHECK )
 #pragma ident	"@(#)pthread.h	1.37	04/09/28 SMI"
-#if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)
 #define PTHREAD_ONCE_INIT	{{0, 0, 0, PTHREAD_ONCE_NOTDONE}}
-#else
-#define PTHREAD_ONCE_INIT	{{{0}, {0}, {0}, {PTHREAD_ONCE_NOTDONE}}}
-#endif
 #endif  /* SOLARIS_ONCE_INIT_1_CHECK */
 
 
-#if defined( SOLARIS_ONCE_INIT_2_CHECK )
+#if defined( SOLARIS_RWLOCK_INIT_1_CHECK )
 #ident "@(#)pthread.h  1.26  98/04/12 SMI"
 #if __STDC__ - 0 == 0 && !defined(_NO_LONGLONG)
-#define PTHREAD_ONCE_INIT	{{0, 0, 0, PTHREAD_ONCE_NOTDONE}}
+#define PTHREAD_RWLOCK_INITIALIZER	{0, 0, 0, {0, 0, 0}, {0, 0}, {0, 0}}
 #else
-#define PTHREAD_ONCE_INIT	{{{0}, {0}, {0}, {PTHREAD_ONCE_NOTDONE}}}
+#define PTHREAD_RWLOCK_INITIALIZER	{0, 0, 0, {{0}, {0}, {0}}, {{0}, {0}}, {{0}, {0}}}
 #endif
-
-#endif  /* SOLARIS_ONCE_INIT_2_CHECK */
+#endif  /* SOLARIS_RWLOCK_INIT_1_CHECK */
 
 
 #if defined( THREAD_KEYWORD_CHECK )
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/rtldef/string.h gcc-4.8.2-patched/fixincludes/tests/base/rtldef/string.h
--- gcc-4.8.2/fixincludes/tests/base/rtldef/string.h	2012-03-12 14:23:03.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/rtldef/string.h	2019-08-09 16:06:38.136259360 +0000
@@ -9,13 +9,13 @@
 
 
 
-#if defined( VMS_DISABLE_DECC_STRING_BUILTINS_CHECK )
-#if !defined(__VAX) && !defined(__GNUC__)
-
-#endif  /* VMS_DISABLE_DECC_STRING_BUILTINS_CHECK */
-
-
 #if defined( VMS_DECC_BUILTIN_CHECK )
 define FD_ZERO(__p) memset((__p), 0, sizeof(*(__p)))
 
 #endif  /* VMS_DECC_BUILTIN_CHECK */
+
+
+#if defined( VMS_DISABLE_DECC_STRING_BUILTINS_CHECK )
+#if !defined(__VAX) && !defined(__GNUC__)
+
+#endif  /* VMS_DISABLE_DECC_STRING_BUILTINS_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/setjmp.h gcc-4.8.2-patched/fixincludes/tests/base/setjmp.h
--- gcc-4.8.2/fixincludes/tests/base/setjmp.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/setjmp.h	2019-08-09 16:06:39.070006600 +0000
@@ -0,0 +1,14 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/setjmp.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( HPUX_LONGJMP_CHECK )
+extern void	longjmp __((jmp_buf, int)) __attribute__ ((__noreturn__));
+#endif  /* HPUX_LONGJMP_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/standards.h gcc-4.8.2-patched/fixincludes/tests/base/standards.h
--- gcc-4.8.2/fixincludes/tests/base/standards.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/standards.h	2019-08-09 16:04:25.982493680 +0000
@@ -0,0 +1,14 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/standards.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( ALPHA___EXTERN_PREFIX_STANDARDS_CHECK )
+#if (_ISO_C_SOURCE>=19990L) && !defined(_LIBC_POLLUTION_H_) && !defined(__DECC) && !defined(__PRAGMA_EXTERN_PREFIX)
+#endif  /* ALPHA___EXTERN_PREFIX_STANDARDS_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/stdint-irix65.h gcc-4.8.2-patched/fixincludes/tests/base/stdint-irix65.h
--- gcc-4.8.2/fixincludes/tests/base/stdint-irix65.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/stdint-irix65.h	2019-08-09 16:06:39.398393560 +0000
@@ -0,0 +1,40 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/stdint-irix65.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( IRIX_STDINT_C99_TYPES_CHECK )
+#define INT64_MIN               (-0x7fffffffffffffffLL - 1)
+#define INT64_MAX               0x7fffffffffffffffLL
+#define UINT32_MAX              0xffffffffU
+#define UINT64_MAX              0xffffffffffffffffULL
+#define INTPTR_MIN              (-0x7fffffffL - 1)
+#define INTPTR_MAX              0x7fffffffL
+#define UINTPTR_MAX             0xffffffffUL
+#define INTPTR_MIN              (-0x7fffffffffffffffL - 1)
+#define INTPTR_MAX              0x7fffffffffffffffL
+#define UINTPTR_MAX             0xffffffffffffffffUL
+#define PTRDIFF_MIN             (-0x7fffffffffffffffL - 1)
+#define PTRDIFF_MAX             0x7fffffffffffffffL
+#define SIZE_MAX                0xffffffffffffffffUL
+#endif  /* IRIX_STDINT_C99_TYPES_CHECK */
+
+
+#if defined( IRIX_STDINT_C99_MACROS_CHECK )
+#define INT8_C(x)               (x)
+#define INT16_C(x)              (x)
+#define INT32_C(x)              (x)
+#define INT64_C(x)              (x ## LL)
+#define UINT8_C(x)              (x)
+#define UINT16_C(x)             (x)
+#define UINT32_C(x)             (x ## U)
+#define UINT64_C(x)             (x ## ULL)
+#define INTMAX_C(x)             (x ## LL)
+#define UINTMAX_C(x)            (x ## ULL)
+#endif  /* IRIX_STDINT_C99_MACROS_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/stdint.h gcc-4.8.2-patched/fixincludes/tests/base/stdint.h
--- gcc-4.8.2/fixincludes/tests/base/stdint.h	2012-03-14 16:33:37.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/stdint.h	2019-08-09 16:06:39.420281240 +0000
@@ -14,3 +14,10 @@
 # define UINT8_C(c)	c
 # define UINT16_C(c)	c
 #endif  /* GLIBC_STDINT_CHECK */
+
+
+#if defined( IRIX_STDINT_C99_MODE_CHECK )
+#if 0
+#error This header file is to be used only for c99 mode compilations
+#else
+#endif  /* IRIX_STDINT_C99_MODE_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/stdio.h gcc-4.8.2-patched/fixincludes/tests/base/stdio.h
--- gcc-4.8.2/fixincludes/tests/base/stdio.h	2011-08-10 09:43:38.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/stdio.h	2019-08-09 16:06:38.458464720 +0000
@@ -19,6 +19,16 @@
 #endif  /* AAB_AIX_STDIO_CHECK */
 
 
+#if defined( AIX_STDIO_INLINE_CHECK )
+#ifdef __cplusplus
+}
+#endif
+
+#if (defined(__cplusplus) && defined(__IBMCPP__))
+#ifdef ferror
+#endif  /* AIX_STDIO_INLINE_CHECK */
+
+
 #if defined( ALPHA_GETOPT_CHECK )
 extern int getopt(int, char *const[], const char *);
 #endif  /* ALPHA_GETOPT_CHECK */
@@ -49,6 +59,11 @@
 #endif  /* HPUX11_VSNPRINTF_CHECK */
 
 
+#if defined( HPUX_VSSCANF_CHECK )
+extern int vsscanf(const char *, const char *, __gnuc_va_list);
+#endif  /* HPUX_VSSCANF_CHECK */
+
+
 #if defined( IRIX_STDIO_DUMMY_VA_LIST_CHECK )
 extern int printf( const char *, __gnuc_va_list );
 #endif  /* IRIX_STDIO_DUMMY_VA_LIST_CHECK */
@@ -75,6 +90,13 @@
 #endif  /* SOLARIS_STD___FILBUF_CHECK */
 
 
+#if defined( SOLARIS_STD_GETS_CXX14_CHECK )
+#if __cplusplus < 201402L
+using std::gets;
+#endif
+#endif  /* SOLARIS_STD_GETS_CXX14_CHECK */
+
+
 #if defined( STDIO_STDARG_H_CHECK )
 
 #endif  /* STDIO_STDARG_H_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/stdlib.h gcc-4.8.2-patched/fixincludes/tests/base/stdlib.h
--- gcc-4.8.2/fixincludes/tests/base/stdlib.h	2009-04-28 16:17:49.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/stdlib.h	2019-08-09 16:06:38.215239200 +0000
@@ -9,6 +9,41 @@
 
 
 
+#if defined( AIX_STDLIB_MALLOC_CHECK )
+extern void *malloc(size_t) __asm__("__linux_malloc");
+#endif  /* AIX_STDLIB_MALLOC_CHECK */
+
+
+#if defined( AIX_STDLIB_REALLOC_CHECK )
+extern void *realloc(void *, size_t) __asm__("__linux_realloc");
+#endif  /* AIX_STDLIB_REALLOC_CHECK */
+
+
+#if defined( AIX_STDLIB_CALLOC_CHECK )
+extern void *calloc(size_t, size_t) __asm__("__linux_calloc");
+#endif  /* AIX_STDLIB_CALLOC_CHECK */
+
+
+#if defined( AIX_STDLIB_VALLOC_CHECK )
+extern void *valloc(size_t) __asm__("__linux_valloc");
+#endif  /* AIX_STDLIB_VALLOC_CHECK */
+
+
+#if defined( AIX_STDLIB_VEC_MALLOC_CHECK )
+extern void *malloc(size_t) __asm__("vec_malloc");
+#endif  /* AIX_STDLIB_VEC_MALLOC_CHECK */
+
+
+#if defined( AIX_STDLIB_VEC_CALLOC_CHECK )
+extern void *calloc(size_t, size_t) __asm__("vec_calloc");
+#endif  /* AIX_STDLIB_VEC_CALLOC_CHECK */
+
+
+#if defined( AIX_STRTOF_CONST_CHECK )
+extern float    strtof(const char *, char **);
+#endif  /* AIX_STRTOF_CONST_CHECK */
+
+
 #if defined( HPUX11_ABS_CHECK )
 #if !defined(_MATH_INCLUDED) || defined(__GNUG__)
 #endif  /* HPUX11_ABS_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/sys/asm.h gcc-4.8.2-patched/fixincludes/tests/base/sys/asm.h
--- gcc-4.8.2/fixincludes/tests/base/sys/asm.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/sys/asm.h	2019-08-09 16:04:25.992101360 +0000
@@ -0,0 +1,14 @@
+/*  DO NOT EDIT THIS FILE.
+
+    It has been auto-edited by fixincludes from:
+
+	"fixinc/tests/inc/sys/asm.h"
+
+    This had to be done to correct non-standard usages in the
+    original, manufacturer supplied header file.  */
+
+
+
+#if defined( IRIX_ASM_APOSTROPHE_CHECK )
+	# and we are on vacation
+#endif  /* IRIX_ASM_APOSTROPHE_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/sys/cdefs.h gcc-4.8.2-patched/fixincludes/tests/base/sys/cdefs.h
--- gcc-4.8.2/fixincludes/tests/base/sys/cdefs.h	2012-01-11 16:23:48.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/sys/cdefs.h	2019-08-09 16:06:40.598515400 +0000
@@ -9,11 +9,6 @@
 
 
 
-#if defined( CDEF_CPLUSPLUS_CHECK )
-#define _Noreturn	__attribute__((__noreturn__))
-#endif  /* CDEF_CPLUSPLUS_CHECK */
-
-
 #if defined( FREEBSD_GCC3_BREAKAGE_CHECK )
 #if __GNUC__ == 2 && __GNUC_MINOR__ >= 7
 #endif  /* FREEBSD_GCC3_BREAKAGE_CHECK */
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/sys/pthread.h gcc-4.8.2-patched/fixincludes/tests/base/sys/pthread.h
--- gcc-4.8.2/fixincludes/tests/base/sys/pthread.h	2007-10-14 23:22:25.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/sys/pthread.h	2019-08-09 16:06:40.375235600 +0000
@@ -9,8 +9,18 @@
 
 
 
+#if defined( HPUX11_LWP_RWLOCK_VALID_CHECK )
+#define __LWP_RWLOCK_VALID              -29551
+#endif  /* HPUX11_LWP_RWLOCK_VALID_CHECK */
+
+
+#if defined( HPUX11_PTHREAD_POINTER_CHECK )
+#define __MPOINTER		long	m_ptr
+#endif  /* HPUX11_PTHREAD_POINTER_CHECK */
+
+
 #if defined( HPUX11_PTHREAD_CONST_CHECK )
-#define __POINTER_SET		((void *) 1L)
+#define __POINTER_SET		1
 #endif  /* HPUX11_PTHREAD_CONST_CHECK */
 
 
diff -N -u -r -w gcc-4.8.2/fixincludes/tests/base/sys/socket.h gcc-4.8.2-patched/fixincludes/tests/base/sys/socket.h
--- gcc-4.8.2/fixincludes/tests/base/sys/socket.h	2012-03-14 16:33:37.000000000 +0000
+++ gcc-4.8.2-patched/fixincludes/tests/base/sys/socket.h	2019-08-09 16:06:40.898431640 +0000
@@ -9,6 +9,18 @@
 
 
 
+#if defined( AIX_EXTERNCPP1_CHECK )
+#ifdef __cplusplus
+extern "C++" {
+#endif  /* AIX_EXTERNCPP1_CHECK */
+
+
+#if defined( AIX_EXTERNCPP2_CHECK )
+} /* extern "C++" */
+#else  /* __cplusplus */
+#endif  /* AIX_EXTERNCPP2_CHECK */
+
+
 #if defined( HPUX11_EXTERN_SENDFILE_CHECK )
 #ifndef _APP32_64BIT_OFF_T
    extern sbsize_t sendfile __((int, int, off_t, bsize_t,
@@ -25,3 +37,13 @@
 #endif
 
 #endif  /* HPUX11_EXTERN_SENDPATH_CHECK */
+
+
+#if defined( IRIX_SOCKLEN_T_CHECK )
+#define _SOCKLEN_T
+#if _NO_XOPEN4 && _NO_XOPEN5
+typedef int socklen_t;
+#else
+typedef u_int32_t socklen_t;
+#endif /* _NO_XOPEN4 && _NO_XOPEN5 */
+#endif  /* IRIX_SOCKLEN_T_CHECK */
diff -N -u -r -w gcc-4.8.2/gcc/config/mips/driver-native.c gcc-4.8.2-patched/gcc/config/mips/driver-native.c
--- gcc-4.8.2/gcc/config/mips/driver-native.c	2013-01-10 20:38:27.000000000 +0000
+++ gcc-4.8.2-patched/gcc/config/mips/driver-native.c	2019-08-09 16:04:26.021473280 +0000
@@ -22,6 +22,59 @@
 #include "coretypes.h"
 #include "tm.h"
 
+#ifdef __sgi__
+#include <invent.h>
+#include <sys/sbd.h>
+
+/* Cf. MIPS R10000 Microprocessor User Guide, Version 2.0, 14.13 Processor
+   Revision Identifier (PRId) Register (15).
+
+   http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi/hdwr/bks/SGI_Developer/books/R10K_UM/sgi_html/t5.Ver.2.0.book_279.html  */
+
+static const struct cpu_types {
+  int impl;
+  const char *cpu;
+} cpu_types[] = {
+  { C0_IMP_R2000, "r2000" },
+  { C0_IMP_R3000, "r3000" },
+  { C0_IMP_R6000, "r6000" },
+  { C0_IMP_R4000, "r4000" },
+  { C0_IMP_R6000A, "r6000" },
+  { C0_IMP_R10000, "r10000" },
+  { C0_IMP_R12000, "r12000" },
+  { C0_IMP_R14000, "r14000" },
+  { C0_IMP_R8000,  "r8000" },
+  { C0_IMP_R4600,  "r4600" },
+  { C0_IMP_R4700,  "r4600" },
+  { C0_IMP_R4650,  "r4650" },
+  { C0_IMP_R5000,  "vr5000" },
+  { C0_IMP_RM7000, "rm7000" },
+  { C0_IMP_RM5271, "vr5000" },
+  { 0, 0 }
+};
+
+static int
+cputype (inventory_t *inv, void *arg)
+{
+  if (inv != NULL
+      && inv->inv_class == INV_PROCESSOR
+      && inv->inv_type == INV_CPUCHIP)
+    {
+      int i;
+      /* inv_state is the cpu revision number.  */
+      int impl = (inv->inv_state & C0_IMPMASK) >> C0_IMPSHIFT;
+
+      for (i = 0; cpu_types[i].cpu != NULL; i++)
+	if (cpu_types[i].impl == impl)
+	  {
+	    *((const char **) arg) = cpu_types[i].cpu;
+	    break;
+	  }
+    }
+  return 0;
+}
+#endif
+
 /* This will be called by the spec parser in gcc.c when it sees
    a %:local_cpu_detect(args) construct.  Currently it will be called
    with either "arch" or "tune" as argument depending on if -march=native
@@ -39,8 +92,10 @@
 host_detect_local_cpu (int argc, const char **argv)
 {
   const char *cpu = NULL;
+#ifndef __sgi__
   char buf[128];
   FILE *f;
+#endif
   bool arch;
 
   if (argc < 1)
@@ -50,6 +105,9 @@
   if (!arch && strcmp (argv[0], "tune"))
     return NULL;
 
+#ifdef __sgi__
+  scaninvent (cputype, &cpu);
+#else
   f = fopen ("/proc/cpuinfo", "r");
   if (f == NULL)
     return NULL;
@@ -75,6 +133,7 @@
       }
 
   fclose (f);
+#endif
 
   if (cpu == NULL)
     return NULL;
diff -N -u -r -w gcc-4.8.2/gcc/config/mips/iris6.h gcc-4.8.2-patched/gcc/config/mips/iris6.h
--- gcc-4.8.2/gcc/config/mips/iris6.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/gcc/config/mips/iris6.h	2019-08-09 16:04:26.025654240 +0000
@@ -0,0 +1,385 @@
+/* Definitions of target machine for GNU compiler.  IRIX 6.5 version.
+   Copyright (C) 1993, 1994, 1995, 1996, 1997, 1998, 2000,
+   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012
+   Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING3.  If not see
+<http://www.gnu.org/licenses/>.  */
+
+/* We are compiling for IRIX 6 now.  */
+#undef TARGET_IRIX6
+#define TARGET_IRIX6 1
+
+/* we use GNU binutils here */
+#define IRIX_USING_GNU_LD 1
+
+/* Default to -mabi=n32 and -mips3.  */
+#undef MULTILIB_DEFAULTS
+#define MULTILIB_DEFAULTS { "mabi=n32" }
+
+/* -march=native handling only makes sense with compiler running on
+   a MIPS chip.  */
+#if defined(__mips__)
+extern const char *host_detect_local_cpu (int argc, const char **argv);
+# define EXTRA_SPEC_FUNCTIONS \
+  { "local_cpu_detect", host_detect_local_cpu },
+
+# define MARCH_MTUNE_NATIVE_SPECS				\
+  " %{march=native:%<march=native %:local_cpu_detect(arch)}"	\
+  " %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}"
+#else
+# define MARCH_MTUNE_NATIVE_SPECS ""
+#endif
+
+#define PREFERRRED_DEBUGGING_TYPE DWARF2_DEBUG
+
+/* Force the default ABI onto the command line in order to make the specs
+   easier to write.  */
+#undef DRIVER_SELF_SPECS
+#define DRIVER_SELF_SPECS 			\
+  "%{!mabi=*: -mabi=n32}", 			\
+  /* Configuration-independent MIPS rules.  */	\
+  BASE_DRIVER_SELF_SPECS,			\
+  MARCH_MTUNE_NATIVE_SPECS
+
+/* IRIX 6.5 has the float and long double forms of math functions.  */
+/* #define TARGET_C99_FUNCTIONS 1 */
+
+/* MIPS specific debugging info */
+/* #define MIPS_DEBUGGING_INFO 1 */
+#define SGUG_DEBUGGING_INFO 1
+
+/* Force the generation of dwarf .debug_frame sections even if not
+   compiling -g.  This guarantees that we can unwind the stack.  */
+#define DWARF2_FRAME_INFO 1
+
+/* The system unwinder in libexc requires a specific dwarf return address
+   column to work.  */
+#undef  DWARF_FRAME_RETURN_COLUMN
+#define DWARF_FRAME_RETURN_COLUMN (FP_REG_LAST + 1)
+
+/* The size in bytes of a DWARF field indicating an offset or length
+   relative to a debug info section, specified to be 4 bytes in the DWARF-2
+   specification.  The SGI/MIPS ABI defines it to be the same as PTR_SIZE.  */
+#define DWARF_OFFSET_SIZE PTR_SIZE
+
+/* The size in bytes of the initial length field in a debug info
+   section.  The DWARF 3 (draft) specification defines this to be
+   either 4 or 12 (with a 4-byte "escape" word when it's 12), but the
+   SGI/MIPS ABI predates this standard and defines it to be the same
+   as DWARF_OFFSET_SIZE.  */
+#define DWARF_INITIAL_LENGTH_SIZE DWARF_OFFSET_SIZE
+
+/* MIPS assemblers don't have the usual .set foo,bar construct;
+   .set is used for assembler options instead.  */
+#undef SET_ASM_OP
+#define ASM_OUTPUT_DEF(FILE, LABEL1, LABEL2)			\
+  do								\
+    {								\
+      fputc ('\t', FILE);					\
+      assemble_name (FILE, LABEL1);				\
+      fputs (" = ", FILE);					\
+      assemble_name (FILE, LABEL2);				\
+      fputc ('\n', FILE);					\
+    }								\
+  while (0)
+
+#undef LOCAL_LABEL_PREFIX
+#define LOCAL_LABEL_PREFIX "."
+
+#undef ASM_DECLARE_OBJECT_NAME
+#define ASM_DECLARE_OBJECT_NAME mips_declare_object_name
+
+#undef ASM_FINISH_DECLARE_OBJECT
+#define ASM_FINISH_DECLARE_OBJECT mips_finish_declare_object
+
+/* The native IRIX 6 linker does not support merging without a special
+   elspec(5) file.  */
+#ifndef IRIX_USING_GNU_LD
+#undef HAVE_GAS_SHF_MERGE
+#define HAVE_GAS_SHF_MERGE 0
+#endif
+
+/* Specify wchar_t types.  */
+#undef WCHAR_TYPE
+#define WCHAR_TYPE (Pmode == DImode ? "int" : "long int")
+
+#undef WCHAR_TYPE_SIZE
+#define WCHAR_TYPE_SIZE INT_TYPE_SIZE
+
+/* Same for wint_t.  */
+#undef WINT_TYPE
+#define WINT_TYPE (Pmode == DImode ? "int" : "long int")
+
+#undef WINT_TYPE_SIZE
+#define WINT_TYPE_SIZE INT_TYPE_SIZE
+
+#ifndef USED_FOR_TARGET
+/* Use long for intmax_t, uintmax_t?  */
+extern int long_intmax;
+#endif
+
+/* C99 stdint.h types.  */
+#define INT8_TYPE "signed char"
+#define INT16_TYPE "short int"
+#define INT32_TYPE "int"
+#define INT64_TYPE "long long int"
+#define UINT8_TYPE "unsigned char"
+#define UINT16_TYPE "short unsigned int"
+#define UINT32_TYPE "unsigned int"
+#define UINT64_TYPE "long long unsigned int"
+
+#define INT_LEAST8_TYPE "signed char"
+#define INT_LEAST16_TYPE "short int"
+#define INT_LEAST32_TYPE "int"
+#define INT_LEAST64_TYPE "long long int"
+#define UINT_LEAST8_TYPE "unsigned char"
+#define UINT_LEAST16_TYPE "short unsigned int"
+#define UINT_LEAST32_TYPE "unsigned int"
+#define UINT_LEAST64_TYPE "long long unsigned int"
+
+#define INT_FAST8_TYPE "signed char"
+#define INT_FAST16_TYPE "short int"
+#define INT_FAST32_TYPE "int"
+#define INT_FAST64_TYPE "long long int"
+#define UINT_FAST8_TYPE "unsigned char"
+#define UINT_FAST16_TYPE "short unsigned int"
+#define UINT_FAST32_TYPE "unsigned int"
+#define UINT_FAST64_TYPE "long long unsigned int"
+
+#define INTMAX_TYPE (long_intmax ? "long int" : "long long int")
+#define UINTMAX_TYPE (long_intmax ? "long unsigned int" : "long long unsigned int")
+
+#define INTPTR_TYPE "long int"
+#define UINTPTR_TYPE "long unsigned int"
+
+#define SIG_ATOMIC_TYPE "int"
+
+/* Plain char is unsigned in the SGI compiler.  */
+#undef DEFAULT_SIGNED_CHAR
+#define DEFAULT_SIGNED_CHAR 0
+
+#define TARGET_OS_CPP_BUILTINS()				\
+  do								\
+    {								\
+      builtin_define_std ("host_mips");				\
+      builtin_define_std ("sgi");				\
+      builtin_define_std ("unix");				\
+      builtin_define_std ("SYSTYPE_SVR4");			\
+      builtin_define ("_MODERN_C");				\
+      builtin_define ("_SVR4_SOURCE");				\
+      builtin_define ("__DSO__");				\
+      builtin_assert ("system=unix");				\
+      builtin_assert ("system=svr4");				\
+      builtin_assert ("machine=sgi");				\
+								\
+      if (!ISA_MIPS1 && !ISA_MIPS2)				\
+	builtin_define ("_COMPILER_VERSION=601");		\
+								\
+      /* We must always define _LONGLONG, even when -ansi is	\
+	 used, because IRIX 5 system header files require it.	\
+	 This is OK, because gcc never warns when long long	\
+	 is used in system header files.			\
+								\
+	 An alternative would be to support the SGI builtin	\
+	 type __long_long.  */					\
+      builtin_define ("_LONGLONG");				\
+								\
+      /* IRIX 6.5.18 and above provide many ISO C99		\
+	 features protected by the __c99 macro.			\
+	 libstdc++ v3 needs them as well.  */			\
+      if (flag_isoc99 || c_dialect_cxx ())			\
+	builtin_define ("__c99");				\
+								\
+      /* The GNU C++ standard library requires that		\
+	 __EXTENSIONS__ and _SGI_SOURCE be defined on at	\
+	 least IRIX 6.2 and probably all IRIX 6 prior to 6.5.	\
+	 We don't need this on IRIX 6.5 itself, but it		\
+	 shouldn't hurt other than the namespace pollution.  */	\
+      if (!flag_iso || c_dialect_cxx ())			\
+	{							\
+	  builtin_define ("__EXTENSIONS__");			\
+	  builtin_define ("_SGI_SOURCE");			\
+	}							\
+    }								\
+  while (0)
+
+/* SUBTARGET_OVERRIDE_OPTIONS is run after C_COMMON_OVERRIDE_OPTIONS, so
+   only set long_intmax if uninitialized.  */
+#undef SUBTARGET_OVERRIDE_OPTIONS
+#define SUBTARGET_OVERRIDE_OPTIONS 		\
+  do						\
+    {						\
+      if (long_intmax == -1)			\
+	long_intmax = mips_abi == ABI_64;	\
+    }						\
+  while (0)
+
+/*
+      if (!global_options_set.x_dwarf_strict)	\
+	dwarf_strict = 1;			\
+      if (!global_options_set.x_dwarf_version)	\
+	dwarf_version = 2;			\
+*/
+
+extern void irix6_c_common_override_options (void);
+#define C_COMMON_OVERRIDE_OPTIONS irix6_c_common_override_options()
+
+#undef SUBTARGET_CC1_SPEC
+#define SUBTARGET_CC1_SPEC "%{static: -mno-abicalls}"
+
+#undef SUBTARGET_CPP_SPEC
+#define SUBTARGET_CPP_SPEC "%{pthread:-D_REENTRANT}"
+
+#undef INIT_SECTION_ASM_OP
+#define INIT_SECTION_ASM_OP "\t.section\t.gcc_init,\"ax\",@progbits"
+
+#undef FINI_SECTION_ASM_OP
+#define FINI_SECTION_ASM_OP "\t.section\t.gcc_fini,\"ax\",@progbits"
+
+#ifdef IRIX_USING_GNU_LD
+#define IRIX_NO_UNRESOLVED ""
+#else
+#define IRIX_NO_UNRESOLVED "-no_unresolved"
+#endif
+
+#ifdef IRIX_USING_GNU_LD
+#define SUBTARGET_DONT_WARN_UNUSED_SPEC ""
+#define SUBTARGET_WARN_UNUSED_SPEC ""
+#else
+#define SUBTARGET_DONT_WARN_UNUSED_SPEC "-dont_warn_unused"
+#define SUBTARGET_WARN_UNUSED_SPEC "-warn_unused"
+#endif
+
+/* Profiling is supported via libprof1.a not -lc_p as in IRIX 3.  */
+#undef STARTFILE_SPEC
+#define STARTFILE_SPEC \
+  "%{!shared: \
+     %{mabi=n32: \
+       %{mips4:%{pg:/usr/lib32/mips4/gcrt1.o%s} \
+         %{!pg:%{p:/usr/lib32/mips4/mcrt1.o%s /usr/lib32/mips4/libprof1.a%s} \
+           %{!p:/usr/lib32/mips4/crt1.o%s}}} \
+       %{!mips4:%{pg:/usr/lib32/mips3/gcrt1.o%s} \
+         %{!pg:%{p:/usr/lib32/mips3/mcrt1.o%s /usr/lib32/mips3/libprof1.a%s} \
+           %{!p:/usr/lib32/mips3/crt1.o%s}}}} \
+     %{mabi=64: \
+       %{mips4:%{pg:/usr/lib64/mips4/gcrt1.o} \
+         %{!pg:%{p:/usr/lib64/mips4/mcrt1.o /usr/lib64/mips4/libprof1.a} \
+           %{!p:/usr/lib64/mips4/crt1.o}}} \
+       %{!mips4:%{pg:/usr/lib64/mips3/gcrt1.o} \
+         %{!pg:%{p:/usr/lib64/mips3/mcrt1.o /usr/lib64/mips3/libprof1.a} \
+           %{!p:/usr/lib64/mips3/crt1.o}}}}} \
+  irix-crti.o%s crtbegin.o%s"
+
+#undef LIB_SPEC
+#define LIB_SPEC \
+  "%{mabi=n32: %{mips4:-L/usr/lib32/mips4} %{!mips4:-L/usr/lib32/mips3} \
+     -L/usr/lib32} \
+   %{mabi=64: %{mips4:-L/usr/lib64/mips4} %{!mips4:-L/usr/lib64/mips3} \
+     -L/usr/lib64} \
+   %{!shared:" \
+     SUBTARGET_DONT_WARN_UNUSED_SPEC \
+     " %{pthread:-lpthread} %{p:libprof1.a%s}%{pg:libprof1.a%s} -lc " \
+     SUBTARGET_WARN_UNUSED_SPEC "}"
+
+/* Avoid getting two warnings for libgcc.a everytime we link.  libgcc.a
+   contains references to copysignl, so link with libm to resolve them.  */
+#undef LIBGCC_SPEC
+#define LIBGCC_SPEC \
+  SUBTARGET_DONT_WARN_UNUSED_SPEC " -lgcc -lm " SUBTARGET_WARN_UNUSED_SPEC
+
+#undef ENDFILE_SPEC
+#define ENDFILE_SPEC \
+  "%{Ofast|ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \
+   crtend.o%s irix-crtn.o%s \
+   %{!shared: \
+     %{mabi=n32:%{mips4:/usr/lib32/mips4/crtn.o%s}\
+       %{!mips4:/usr/lib32/mips3/crtn.o%s}}\
+     %{mabi=64:%{mips4:/usr/lib64/mips4/crtn.o%s}\
+       %{!mips4:/usr/lib64/mips3/crtn.o%s}}}"
+
+/* Generic part of the LINK_SPEC.  */
+#undef LINK_SPEC
+#define LINK_SPEC "\
+%{G*} %{EB} %{EL} %{mips1} %{mips2} %{mips3} %{mips4} \
+%{bestGnum} %{shared} %{non_shared} \
+%{call_shared} %{no_archive} %{exact_version} \
+%{!shared: \
+  %{!non_shared: %{!call_shared:%{!r: -call_shared " IRIX_NO_UNRESOLVED "}}}} \
+%{rpath} %{!r: -init __gcc_init -fini __gcc_fini} " IRIX_SUBTARGET_LINK_SPEC
+
+#ifdef IRIX_USING_GNU_LD
+#define IRIX_SUBTARGET_LINK_SPEC \
+  "%{mabi=n32: -melf32bmipn32}%{mabi=64: -melf64bmip}"
+#else
+  /* Explicitly hide crt symbols that would normally be marked with
+     a "hidden" visibility attribute.
+     
+     We have traditionally disabled this attribute when using the
+     native linker because the native linker's visibility support is
+     not fully-compatible with the GNU linker's.  In particular, the
+     native linker does not pull in archive objects purely to resolve
+     references to the object's hidden symbols, whereas the GNU
+     linker does.
+     
+     The gcc build system currently hides symbols in some static
+     libraries (typically libgcov.a or libgcc.a) whenever visibility
+     attributes are supported.  On targets with GNU semantics, this
+     makes sure that uses of libx.so symbols in one dynamic object are
+     not resolved to libx.a symbols in another dynamic object.  But
+     on targets with IRIX semantics, hiding the symbols prevents the
+     static archive from working at all.
+     
+     It would probably be better to enable visiblity attributes for
+     IRIX ld and disable the static archives versioning.  It shouldn't
+     make anything worse, since libx.a symbols are global by default
+     anyway.  However, no-one has volunteered to do this yet.  */
+
+#define IRIX_SUBTARGET_LINK_SPEC \
+  "%{w} -_SYSTYPE_SVR4 -woff 131 \
+   %{shared:-hidden_symbol __dso_handle} \
+   %{mabi=n32: -n32}%{mabi=64: -64}%{!mabi*: -n32}"
+#endif
+
+/* A linker error can empirically be avoided by removing duplicate
+   library search directories.  */
+/* #define LINK_ELIMINATE_DUPLICATE_LDIRECTORIES 1 */
+
+/* The SGI linker doesn't understand constructor priorities.  */
+#ifndef IRIX_USING_GNU_LD
+#define SUPPORTS_INIT_PRIORITY 0
+#endif
+
+/* Add -g to mips.h default to avoid confusing gas with local symbols
+   generated from stabs info.  */
+#undef NM_FLAGS
+#define NM_FLAGS "-Bng"
+
+/* The system header files are C++ aware.  */
+/* ??? Unfortunately, most but not all of the headers are C++ aware.
+   Specifically, curses.h is not, and as a consequence, defining this
+   used to prevent libg++ building.  This is no longer the case so
+   define it again to prevent other problems, e.g. with getopt in
+   unistd.h.  We still need some way to fix just those files that need
+   fixing.  */
+#define NO_IMPLICIT_EXTERN_C 1
+
+/* -G is incompatible with -KPIC which is the default, so only allow objects
+   in the small data section if the user explicitly asks for it.  */
+#undef MIPS_DEFAULT_GVALUE
+#define MIPS_DEFAULT_GVALUE 0
+
+#define MIPS_TFMODE_FORMAT mips_extended_format
diff -N -u -r -w gcc-4.8.2/gcc/config/mips/iris6.opt gcc-4.8.2-patched/gcc/config/mips/iris6.opt
--- gcc-4.8.2/gcc/config/mips/iris6.opt	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/gcc/config/mips/iris6.opt	2019-08-09 16:04:26.029025040 +0000
@@ -0,0 +1,45 @@
+; IRIX 6.5 options.
+
+; Copyright (C) 2011
+; Free Software Foundation, Inc.
+;
+; This file is part of GCC.
+;
+; GCC is free software; you can redistribute it and/or modify it under
+; the terms of the GNU General Public License as published by the Free
+; Software Foundation; either version 3, or (at your option) any later
+; version.
+;
+; GCC is distributed in the hope that it will be useful, but WITHOUT ANY
+; WARRANTY; without even the implied warranty of MERCHANTABILITY or
+; FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+; for more details.
+;
+; You should have received a copy of the GNU General Public License
+; along with GCC; see the file COPYING3.  If not see
+; <http://www.gnu.org/licenses/>.
+
+; See the GCC internals manual (options.texi) for a description of
+; this file's format.
+
+; Please try to keep this file in ASCII collating order.
+
+bestGnum
+Driver
+
+call_shared
+Driver
+
+exact_version
+Driver
+
+no_archive
+Driver
+
+non_shared
+Driver
+
+pthread
+Driver
+
+; This comment is to ensure we retain the blank line above.
diff -N -u -r -w gcc-4.8.2/gcc/config/mips/irix6-c.c gcc-4.8.2-patched/gcc/config/mips/irix6-c.c
--- gcc-4.8.2/gcc/config/mips/irix6-c.c	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/gcc/config/mips/irix6-c.c	2019-08-09 16:04:26.031537440 +0000
@@ -0,0 +1,38 @@
+/* IRIX 6 support needed only by C/C++ frontends.
+   Copyright (C) 2012 Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License
+along with GCC; see the file COPYING3.  If not see
+<http://www.gnu.org/licenses/>.  */
+
+#include "config.h"
+#include "system.h"
+#include "coretypes.h"
+#include "tree.h"
+#include "tm.h"
+#include "c-family/c-common.h"
+
+/* For C99, intmax_t, uintmax_t are always long long int, otherwise the
+   type differs between 32-bit and 64-bit compilations.  */
+void
+irix6_c_common_override_options (void)
+{
+  if (flag_isoc99 || c_dialect_cxx ())
+    long_intmax = 0;
+  else
+    /* Cannot use LONG_TYPE_SIZE == 64.  LONG_TYPE_SIZE is only set in
+       mips_option_override after C_COMMON_OVERRIDE_OPTIONS.  */
+    long_intmax = mips_abi == ABI_64;
+}
diff -N -u -r -w gcc-4.8.2/gcc/config/mips/mips.c gcc-4.8.2-patched/gcc/config/mips/mips.c
--- gcc-4.8.2/gcc/config/mips/mips.c	2013-02-25 13:53:16.000000000 +0000
+++ gcc-4.8.2-patched/gcc/config/mips/mips.c	2019-08-09 16:04:26.152500240 +0000
@@ -544,6 +544,12 @@
 enum processor mips_arch;
 const struct mips_cpu_info *mips_arch_info;
 
+#if TARGET_IRIX6
+/* On IRIX 6, intmax_t and uintmax_t depend on __c99, which is only
+   available in C-family compilers.  See irix6_c_common_override_options.  */
+int long_intmax = -1;
+#endif
+
 /* The processor that we should tune the code for.  */
 enum processor mips_tune;
 const struct mips_cpu_info *mips_tune_info;
@@ -5721,6 +5727,9 @@
       layout_type (record);
       return record;
     }
+  else if (TARGET_IRIX6)
+    /* On IRIX 6, this type is 'char *'.  */
+    return build_pointer_type (char_type_node);
   else
     /* Otherwise, we use 'void *'.  */
     return ptr_type_node;
@@ -8714,6 +8723,7 @@
 
   /* Generate a special section to describe the ABI switches used to
      produce the resultant binary.  */
+  if (!TARGET_IRIX6)    {
 
   /* Record the ABI itself.  Modern versions of binutils encode
      this information in the ELF header flags, but GDB needs the
@@ -8754,6 +8764,7 @@
     fprintf (asm_out_file, "\t.gnu_attribute 4, %d\n", attr);
   }
 #endif
+    }
 
   /* If TARGET_ABICALLS, tell GAS to generate -KPIC code.  */
   if (TARGET_ABICALLS)
@@ -16670,6 +16681,10 @@
 	}
     }
 
+#ifdef MIPS_TFMODE_FORMAT
+  REAL_MODE_FORMAT (TFmode) = &MIPS_TFMODE_FORMAT;
+#endif
+
   /* Make sure that the user didn't turn off paired single support when
      MIPS-3D support is requested.  */
   if (TARGET_MIPS3D
diff -N -u -r -w gcc-4.8.2/gcc/config/mips/mips.h gcc-4.8.2-patched/gcc/config/mips/mips.h
--- gcc-4.8.2/gcc/config/mips/mips.h	2013-02-25 13:53:16.000000000 +0000
+++ gcc-4.8.2-patched/gcc/config/mips/mips.h	2019-08-09 16:04:26.192493840 +0000
@@ -157,7 +157,9 @@
 
 /* True if .gpword or .gpdword should be used for switch tables.  */
 #define TARGET_GPWORD				\
-  (TARGET_ABICALLS && !TARGET_ABSOLUTE_ABICALLS)
+  (TARGET_ABICALLS				\
+   && !TARGET_ABSOLUTE_ABICALLS			\
+   && !(mips_abi == ABI_64 && TARGET_IRIX6))
 
 /* True if the output must have a writable .eh_frame.
    See ASM_PREFERRED_EH_DATA_FORMAT for details.  */
diff -N -u -r -w gcc-4.8.2/gcc/config/mips/t-irix6 gcc-4.8.2-patched/gcc/config/mips/t-irix6
--- gcc-4.8.2/gcc/config/mips/t-irix6	2011-06-03 18:16:44.000000000 +0000
+++ gcc-4.8.2-patched/gcc/config/mips/t-irix6	2019-08-09 16:04:26.195569040 +0000
@@ -2,3 +2,7 @@
 MULTILIB_DIRNAMES=n32 64
 MULTILIB_MATCHES=
 MULTILIB_OSDIRNAMES=../lib32 ../lib64
+
+irix6-c.o: $(srcdir)/config/mips/irix6-c.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \
+  tree.h $(TM_H) $(C_COMMON_H)
+	$(COMPILER) -c $(ALL_COMPILERFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<
diff -N -u -r -w gcc-4.8.2/gcc/config.gcc gcc-4.8.2-patched/gcc/config.gcc
--- gcc-4.8.2/gcc/config.gcc	2013-10-03 01:47:24.000000000 +0000
+++ gcc-4.8.2-patched/gcc/config.gcc	2019-08-09 16:04:26.231121440 +0000
@@ -1782,6 +1782,28 @@
 	cxx_target_objs="${cxx_target_objs} microblaze-c.o"
 	tmake_file="${tmake_file} microblaze/t-microblaze"
         ;;
+mips-sgi-irix6.5*)
+	tm_file="elfos.h ${tm_file} mips/iris6.h"
+	tmake_file="mips/t-irix6 t-slibgcc"
+	c_target_objs="irix6-c.o"
+	cxx_target_objs="irix6-c.o"
+	extra_options="${extra_options} rpath.opt mips/iris6.opt"
+	target_cpu_default="MASK_ABICALLS"
+	tm_defines="${tm_defines} MIPS_ISA_DEFAULT=3 MIPS_ABI_DEFAULT=ABI_N32"
+	# Only IRIX Development Foundation 1.3 for IRIX 6.5 provides stdint.h.
+	use_gcc_stdint=wrap
+	if test "x$stabs" = xyes
+	then
+		tm_file="${tm_file} dbx.h"
+	fi
+	if test "x$gnu_ld" = xyes
+	then
+		tm_defines="${tm_defines} IRIX_USING_GNU_LD"
+	fi
+	case ${enable_threads}:${have_pthread_h} in
+	  "":yes | yes:yes ) thread_file=posix ;;
+	esac
+	;;
 mips*-*-netbsd*)			# NetBSD/mips, either endian.
 	target_cpu_default="MASK_ABICALLS"
 	tm_file="elfos.h ${tm_file} mips/elf.h netbsd.h netbsd-elf.h mips/netbsd.h"
diff -N -u -r -w gcc-4.8.2/gcc/config.host gcc-4.8.2-patched/gcc/config.host
--- gcc-4.8.2/gcc/config.host	2013-01-10 20:38:27.000000000 +0000
+++ gcc-4.8.2-patched/gcc/config.host	2019-08-09 16:04:26.234765040 +0000
@@ -125,9 +125,9 @@
 	;;
     esac
     ;;
-  mips*-*-linux*)
+  mips*-*-linux* | mips-sgi-irix*)
     case ${target} in
-      mips*-*-linux*)
+      mips*-*-linux* | mips-sgi-irix*)
 	host_extra_gcc_objs="driver-native.o"
 	host_xmake_file="${host_xmake_file} mips/x-native"
       ;;
diff -N -u -r -w gcc-4.8.2/gcc/configure gcc-4.8.2-patched/gcc/configure
--- gcc-4.8.2/gcc/configure	2013-06-19 02:18:38.000000000 +0000
+++ gcc-4.8.2-patched/gcc/configure	2019-08-09 16:04:26.443784080 +0000
@@ -7144,8 +7144,17 @@
       ;;
 
     mips*-*-*)
+      case $host in
+	mips*-sgi-irix*)
+	  { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: fixed-point is not supported on IRIX, ignored" >&5
+$as_echo "$as_me: WARNING: fixed-point is not supported on IRIX, ignored" >&2;}
+	  enable_fixed_point=no
+	  ;;
+	*)
       enable_fixed_point=yes
       ;;
+      esac
+      ;;
     *)
       { $as_echo "$as_me:${as_lineno-$LINENO}: WARNING: fixed-point is not supported for this target, ignored" >&5
 $as_echo "$as_me: WARNING: fixed-point is not supported for this target, ignored" >&2;}
diff -N -u -r -w gcc-4.8.2/gcc/configure.ac gcc-4.8.2-patched/gcc/configure.ac
--- gcc-4.8.2/gcc/configure.ac	2013-06-19 02:18:38.000000000 +0000
+++ gcc-4.8.2-patched/gcc/configure.ac	2019-08-09 16:04:26.486633920 +0000
@@ -672,8 +672,16 @@
       ;;
 
     mips*-*-*)
+      case $host in
+	mips*-sgi-irix*)
+	  AC_MSG_WARN([fixed-point is not supported on IRIX, ignored])
+	  enable_fixed_point=no
+	  ;;
+	*)
       enable_fixed_point=yes
       ;;
+      esac
+      ;;
     *)
       AC_MSG_WARN([fixed-point is not supported for this target, ignored])
       enable_fixed_point=no
@@ -3256,6 +3264,11 @@
   [set_have_as_tls=yes])
 fi
 case "$target" in
+  *-*-irix6*)
+    # IRIX 6.5 rld and libc.so lack TLS support, so even if gas and gld
+    # with TLS support are in use, native TLS cannot work.
+    set_have_as_tls=no
+    ;;
   # TLS was introduced in the Solaris 9 FCS release.  Support for GNU-style
   # TLS on x86 was only introduced in Solaris 9 4/04, replacing the earlier
   # Sun style that Sun ld and GCC don't support any longer.
@@ -3346,6 +3359,10 @@
 	  gcc_cv_ld_dynamic_option="-adefault"
 	fi
 	;;
+      # IRIX 6 ld supports -Bstatic/-Bdynamic.
+      mips-sgi-irix6*)
+        gcc_cv_ld_static_dynamic=yes
+        ;;
       # Solaris 2 ld always supports -Bstatic/-Bdynamic.
       *-*-solaris2*)
         gcc_cv_ld_static_dynamic=yes
diff -N -u -r -w gcc-4.8.2/gcc/dwarf2cfi.c gcc-4.8.2-patched/gcc/dwarf2cfi.c
--- gcc-4.8.2/gcc/dwarf2cfi.c	2013-01-10 20:38:27.000000000 +0000
+++ gcc-4.8.2-patched/gcc/dwarf2cfi.c	2019-08-09 16:04:26.539433400 +0000
@@ -714,6 +714,7 @@
 	cfi->dw_cfi_opc = DW_CFA_def_cfa_offset;
       cfi->dw_cfi_oprnd1.dw_cfi_offset = new_cfa->offset;
     }
+#ifndef SGUG_DEBUGGING_INFO
   else if (new_cfa->offset == old_cfa->offset
 	   && old_cfa->reg != INVALID_REGNUM
 	   && !new_cfa->indirect
@@ -725,6 +726,8 @@
       cfi->dw_cfi_opc = DW_CFA_def_cfa_register;
       cfi->dw_cfi_oprnd1.dw_cfi_reg_num = new_cfa->reg;
     }
+#endif
+
   else if (new_cfa->indirect == 0)
     {
       /* Construct a "DW_CFA_def_cfa <register> <offset>" instruction,
@@ -2694,22 +2697,23 @@
 create_pseudo_cfg (void)
 {
   bool saw_barrier, switch_sections;
-  dw_trace_info ti;
+  dw_trace_info ti1;
+  dw_trace_info* ti = &ti1;
   rtx insn;
   unsigned i;
 
   /* The first trace begins at the start of the function,
      and begins with the CIE row state.  */
   trace_info.create (16);
-  memset (&ti, 0, sizeof (ti));
-  ti.head = get_insns ();
-  ti.beg_row = cie_cfi_row;
-  ti.cfa_store = cie_cfi_row->cfa;
-  ti.cfa_temp.reg = INVALID_REGNUM;
-  trace_info.quick_push (ti);
+  memset (&ti1, 0, sizeof (ti1));
+  ti1.head = get_insns ();
+  ti1.beg_row = cie_cfi_row;
+  ti1.cfa_store = cie_cfi_row->cfa;
+  ti1.cfa_temp.reg = INVALID_REGNUM;
+  ti = trace_info.quick_push (ti1);
 
   if (cie_return_save)
-    ti.regs_saved_in_regs.safe_push (*cie_return_save);
+    ti->regs_saved_in_regs.safe_push (*cie_return_save);
 
   /* Walk all the insns, collecting start of trace locations.  */
   saw_barrier = false;
@@ -2731,11 +2735,12 @@
       else if (save_point_p (insn)
 	       && (LABEL_P (insn) || !saw_barrier))
 	{
-	  memset (&ti, 0, sizeof (ti));
-	  ti.head = insn;
-	  ti.switch_sections = switch_sections;
-	  ti.id = trace_info.length () - 1;
-	  trace_info.safe_push (ti);
+	  dw_trace_info ti2;
+	  memset (&ti2, 0, sizeof (ti2));
+	  ti2.head = insn;
+	  ti2.switch_sections = switch_sections;
+	  ti2.id = trace_info.length ();
+	  ti = trace_info.safe_push (ti2);
 
 	  saw_barrier = false;
 	  switch_sections = false;
@@ -2746,20 +2751,19 @@
      avoiding stale pointer problems due to reallocation.  */
   trace_index = htab_create (trace_info.length (),
 			     dw_trace_info_hash, dw_trace_info_eq, NULL);
-  dw_trace_info *tp;
-  FOR_EACH_VEC_ELT (trace_info, i, tp)
+  FOR_EACH_VEC_ELT (trace_info, i, ti)
     {
       void **slot;
 
       if (dump_file)
 	fprintf (dump_file, "Creating trace %u : start at %s %d%s\n", i,
-		 rtx_name[(int) GET_CODE (tp->head)], INSN_UID (tp->head),
-		 tp->switch_sections ? " (section switch)" : "");
+		 rtx_name[(int) GET_CODE (ti->head)], INSN_UID (ti->head),
+		 ti->switch_sections ? " (section switch)" : "");
 
-      slot = htab_find_slot_with_hash (trace_index, tp,
-				       INSN_UID (tp->head), INSERT);
+      slot = htab_find_slot_with_hash (trace_index, ti,
+				       INSN_UID (ti->head), INSERT);
       gcc_assert (*slot == NULL);
-      *slot = (void *) tp;
+      *slot = (void *) ti;
     }
 }
 
@@ -3318,6 +3322,10 @@
 {
   int enc;
 
+#ifdef SGUG_DEBUGGING_INFO
+  return false;
+#endif
+
   if (saved_do_cfi_asm != 0)
     return saved_do_cfi_asm > 0;
 
diff -N -u -r -w gcc-4.8.2/gcc/dwarf2out.c gcc-4.8.2-patched/gcc/dwarf2out.c
--- gcc-4.8.2/gcc/dwarf2out.c	2013-03-21 21:24:47.000000000 +0000
+++ gcc-4.8.2-patched/gcc/dwarf2out.c	2019-08-09 16:04:26.705328280 +0000
@@ -883,6 +883,12 @@
 
   if (for_eh && targetm.terminate_dw2_eh_frame_info)
     dw2_asm_output_data (4, 0, "End of Table");
+#ifdef SGUG_DEBUGGING_INFO
+  /* Work around Irix 6 assembler bug whereby labels at the end of a section
+     get a value of 0.  Putting .align 0 after the label fixes it.  */
+  ASM_OUTPUT_ALIGN (asm_out_file, 0);
+#endif
+
 
   /* Turn off app to make assembly quicker.  */
   if (flag_debug_asm)
@@ -14594,7 +14600,15 @@
 	  /* The DWARF2 standard says that we should assume that the structure
 	     address is already on the stack, so we can specify a structure
 	     field address by using DW_OP_plus_uconst.  */
+#ifdef SGUG_DEBUGGING_INFO
+	  /* ??? The SGI dwarf reader does not handle the DW_OP_plus_uconst
+	     operator correctly.  It works only if we leave the offset on the
+	     stack.  */
+	  op = DW_OP_constu;
+#else
 	  op = DW_OP_plus_uconst;
+#endif
+
 	  loc_descr = new_loc_descr (op, offset, 0);
 	}
     }
@@ -16660,6 +16674,17 @@
       return;
     }
 
+  /* ??? The SGI dwarf reader fails for array of array of enum types
+     (e.g. const enum machine_mode insn_operand_mode[2][10]) unless the inner
+     array type comes before the outer array type.  We thus call gen_type_die
+     before we new_die and must prevent nested array types collapsing for this
+     target.  */
+
+#ifdef SGUG_DEBUGGING_INFO
+  gen_type_die (TREE_TYPE (type), context_die);
+  collapse_nested_arrays = false;
+#endif
+
   array_die = new_die (DW_TAG_array_type, scope_die, type);
   add_name_attribute (array_die, type_tag (type));
   equate_type_number_to_die (type, array_die);
@@ -16684,6 +16709,14 @@
      for multidimensional arrays.  */
   add_AT_unsigned (array_die, DW_AT_ordering, DW_ORD_row_major);
 #endif
+#ifdef SGUG_DEBUGGING_INFO
+  /* The SGI compilers handle arrays of unknown bound by setting
+     AT_declaration and not emitting any subrange DIEs.  */
+  if (TREE_CODE (type) == ARRAY_TYPE
+      && ! TYPE_DOMAIN (type))
+    add_AT_flag (array_die, DW_AT_declaration, 1);
+  else
+#endif
 
   if (TREE_CODE (type) == VECTOR_TYPE)
     {
@@ -16707,6 +16740,10 @@
 	element_type = TREE_TYPE (element_type);
       }
 
+#ifndef SGUG_DEBUGGING_INFO
+  gen_type_die (element_type, context_die);
+#endif
+
   add_type_attribute (array_die, element_type, 0, 0, context_die);
 
   add_gnat_descriptive_type_attribute (array_die, type, context_die);
@@ -17860,6 +17897,11 @@
                                false);
 	}
 
+#ifdef SGUG_DEBUGGING_INFO
+      /* Add a reference to the FDE for this routine.  */
+      add_AT_fde_ref (subr_die, DW_AT_MIPS_fde, cfun->fde->fde_index);
+#endif
+
       cfa_fb_offset = CFA_FRAME_BASE_OFFSET (decl);
 
       /* We define the "frame base" as the function's CFA.  This is more
@@ -18840,6 +18882,24 @@
   sprintf (tail, "%s %s", language_string, version_string);
   tail += plen;
 
+  if (!dwarf_record_gcc_switches)
+    {
+#ifdef SGUG_DEBUGGING_INFO
+      /* The MIPS/SGI compilers place the 'cc' command line options in the
+	 producer string.  The SGI debugger looks for -g, -g1, -g2, or -g3;
+	 if they do not appear in the producer string, the debugger reaches
+	 the conclusion that the object file is stripped and has no debugging
+	 information.  To get the MIPS/SGI debugger to believe that there is
+	 debugging information in the object file, we add a -g to the producer
+	 string.  */
+      if (debug_info_level > DINFO_LEVEL_TERSE)
+	{
+	  memcpy (tail, " -g", 3);
+	  tail += 3;
+	}
+#endif
+    }
+
   FOR_EACH_VEC_ELT (switches, j, p)
     {
       len = strlen (p);
diff -N -u -r -w gcc-4.8.2/libgcc/config/mips/irix-crti.S gcc-4.8.2-patched/libgcc/config/mips/irix-crti.S
--- gcc-4.8.2/libgcc/config/mips/irix-crti.S	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libgcc/config/mips/irix-crti.S	2019-08-09 16:04:26.709612280 +0000
@@ -0,0 +1,71 @@
+/* Copyright (C) 2004, 2008, 2011 Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify it under
+the terms of the GNU General Public License as published by the Free
+Software Foundation; either version 3, or (at your option) any later
+version.
+
+GCC is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+Under Section 7 of GPL version 3, you are granted additional
+permissions described in the GCC Runtime Library Exception, version
+3.1, as published by the Free Software Foundation.
+
+You should have received a copy of the GNU General Public License and
+a copy of the GCC Runtime Library Exception along with this program;
+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+<http://www.gnu.org/licenses/>.  */
+
+	.abicalls
+	.set	noreorder
+	.set	nomacro
+
+/* The GNU and SGI linkers differ in their implementation of -init and -fini.
+   With the GNU linker, there can only be a single -init option, and the
+   linker simply sets DT_INIT to that value.  gcc's initialization and
+   finalization code can go directly in .init, with the prologue and
+   epilogue of the main initialization routine being provided by external
+   object files (*crti.o and *crtn.o in this case).
+
+   The SGI linker instead accepts several -init options.  It will set DT_INIT
+   to a linker-created function (placed in .init) that calls each of the -init
+   functions in turn.  If there is any user code in .init, this linker-created
+   function will be placed after it.  Note that such user code is not treated
+   specially; it will only be called if the -init options arrange for it to
+   be called.
+
+   In theory, the SGI model should allow the crti, crtn and intermediate code
+   to go in .init, just like it can with the GNU linker.  However, doing this
+   seems to confuse the linker and triggers an internal error:
+
+      ld32: FATAL   2  : Internal: at ../../ld/mips_code.c mips_code_fixup()
+	 text section overflow!
+
+   (seen with MIPSpro 7.30).  We therefore put everything in a special
+   .gcc_init section instead.  */
+
+	.section .gcc_init,"ax",@progbits
+	.globl	__gcc_init
+__gcc_init:
+	daddiu	$sp,$sp,-16
+	sd	$31,0($sp)
+	sd	$28,8($sp)
+
+	.section .gcc_fini,"ax",@progbits
+	.globl	__gcc_fini
+__gcc_fini:
+	daddiu	$sp,$sp,-16
+	sd	$31,0($sp)
+	sd	$28,8($sp)
+
+/* This object will typically be included in the final link for both
+   shared libraries and executable, and we need to hide the symbols to
+   prevent possible symbol preemption warnings from the SGI linker.  */
+.hidden __gcc_init
+.hidden __gcc_fini
+
diff -N -u -r -w gcc-4.8.2/libgcc/config/mips/irix-crtn.S gcc-4.8.2-patched/libgcc/config/mips/irix-crtn.S
--- gcc-4.8.2/libgcc/config/mips/irix-crtn.S	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libgcc/config/mips/irix-crtn.S	2019-08-09 16:04:26.712223160 +0000
@@ -0,0 +1,38 @@
+/* Copyright (C) 2004, 2011 Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify it under
+the terms of the GNU General Public License as published by the Free
+Software Foundation; either version 3, or (at your option) any later
+version.
+
+GCC is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or
+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+for more details.
+
+Under Section 7 of GPL version 3, you are granted additional
+permissions described in the GCC Runtime Library Exception, version
+3.1, as published by the Free Software Foundation.
+
+You should have received a copy of the GNU General Public License and
+a copy of the GCC Runtime Library Exception along with this program;
+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+<http://www.gnu.org/licenses/>.  */
+
+	.abicalls
+	.set	noreorder
+	.set	nomacro
+
+	.section .gcc_init,"ax",@progbits
+	ld	$31,0($sp)
+	ld	$28,8($sp)
+	jr	$31
+	daddiu	$sp,$sp,16
+
+	.section .gcc_fini,"ax",@progbits
+	ld	$31,0($sp)
+	ld	$28,8($sp)
+	jr	$31
+	daddiu	$sp,$sp,16
diff -N -u -r -w gcc-4.8.2/libgcc/config/mips/irix6-unwind.h gcc-4.8.2-patched/libgcc/config/mips/irix6-unwind.h
--- gcc-4.8.2/libgcc/config/mips/irix6-unwind.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libgcc/config/mips/irix6-unwind.h	2019-08-09 16:04:26.715594680 +0000
@@ -0,0 +1,180 @@
+/* DWARF2 EH unwinding support for MIPS IRIX 6.
+   Copyright (C) 2011 Free Software Foundation, Inc.
+
+This file is part of GCC.
+
+GCC is free software; you can redistribute it and/or modify
+it under the terms of the GNU General Public License as published by
+the Free Software Foundation; either version 3, or (at your option)
+any later version.
+
+GCC is distributed in the hope that it will be useful,
+but WITHOUT ANY WARRANTY; without even the implied warranty of
+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+GNU General Public License for more details.
+
+Under Section 7 of GPL version 3, you are granted additional
+permissions described in the GCC Runtime Library Exception, version
+3.1, as published by the Free Software Foundation.
+
+You should have received a copy of the GNU General Public License and
+a copy of the GCC Runtime Library Exception along with this program;
+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+<http://www.gnu.org/licenses/>.  */
+
+/* Do code reading to identify a signal frame, and set the frame
+   state data appropriately.  See unwind-dw2.c for the structs.  */
+
+/* This code was developed-for and only tested-in limited ABI
+   configurations.  Characterize that.  */
+
+#if defined (_ABIN32) || defined (_ABI64)
+#define SUPPORTED_ABI 1
+#else
+#define SUPPORTED_ABI 0
+#endif
+
+#include <signal.h>
+
+#define MD_FALLBACK_FRAME_STATE_FOR mips_fallback_frame_state
+
+/* Look at the code around RA to see if it matches a sighandler caller with a
+   sigcontext_t * argument (SA_SIGINFO cleared).  Return that pointer argument
+   if it does match, or 0 otherwise.  */
+
+static sigcontext_t *
+sigcontext_for (unsigned int *ra, void *cfa)
+{
+  /* IRIX 6.5, mono-threaded application.  We're lucky enough to be able
+     to expect a short very sighandler specific sequence around.
+
+     <_sigtramp+124>:	li	v0,1088 (SYS_sigreturn)
+     <_sigtramp+128>:	syscall  */
+
+  if (   ra[6] == 0x24020440
+      && ra[7] == 0x0000000c)
+    return (sigcontext_t *)(cfa + 0x30);
+
+  /* IRIX 6.5 variants, multi-threaded application, pthreads.  Nothing really
+     sighandler specific handy, so match a fairly long constant sequence.  */
+
+#if _MIPS_SIM == _ABIN32
+  /* 
+     <sig_fixup_mask+40>:	sd	s0,0(sp)
+     <sig_fixup_mask+44>:	sll	ra,a0,0x2
+     <sig_fixup_mask+48>:	addiu	t9,t9,-28584/-28456/-28448
+     <sig_fixup_mask+52>:	lw	s0,3804(at)
+     <sig_fixup_mask+56>:	addu	t9,t9,ra
+     <sig_fixup_mask+60>:	lw	t9,0(t9)
+     <sig_fixup_mask+64>:	ld	at,3696(at)
+     <sig_fixup_mask+68>:	ld	s2,88(s0)
+     <sig_fixup_mask+72>:	jalr	t9
+     <sig_fixup_mask+76>:	sd	at,88(s0)  */
+   if (   ra[-10] == 0xffb00000
+      && ra[ -9] == 0x0004f880
+      && (ra[-8] == 0x27399058
+	  || ra[-8] == 0x273990d8
+	  || ra[-8] == 0x273990e0)
+      && ra[ -7] == 0x8c300edc
+      && ra[ -6] == 0x033fc821
+      && ra[ -5] == 0x8f390000
+      && ra[ -4] == 0xdc210e70
+      && ra[ -3] == 0xde120058
+      && ra[ -2] == 0x0320f809
+      && ra[ -1] == 0xfe010058)
+
+#elif _MIPS_SIM == _ABI64
+  /* 
+     <sig_fixup_mask+44>:	sd	s0,0(sp)
+     <sig_fixup_mask+48>:	daddu	t9,t9,ra
+     <sig_fixup_mask+52>:	dsll	ra,a0,0x3
+     <sig_fixup_mask+56>:	ld	s0,3880(at)
+     <sig_fixup_mask+60>:	daddu	t9,t9,ra
+     <sig_fixup_mask+64>:	ld	t9,0(t9)
+     <sig_fixup_mask+68>:	ld	at,3696(at)
+     <sig_fixup_mask+72>:	ld	s2,152(s0)
+     <sig_fixup_mask+76>:	jalr	t9
+     <sig_fixup_mask+80>:	sd	at,152(s0)  */
+  if (   ra[-10] == 0xffb00000
+      && ra[ -9] == 0x033fc82d
+      && ra[ -8] == 0x0004f8f8
+      && ra[ -7] == 0xdc300f28
+      && ra[ -6] == 0x033fc82d
+      && ra[ -5] == 0xdf390000
+      && ra[ -4] == 0xdc210e70
+      && ra[ -3] == 0xde120098
+      && ra[ -2] == 0x0320f809
+      && ra[ -1] == 0xfe010098)
+#endif
+    return (sigcontext_t *)(cfa + 0x60);
+
+  return 0;
+}
+
+#define SIGCTX_GREG_ADDR(REGNO,SIGCTX) \
+  ((void *) &(SIGCTX)->sc_regs[REGNO])
+
+#define SIGCTX_FPREG_ADDR(REGNO,SIGCTX) \
+  ((void *) &(SIGCTX)->sc_fpregs[REGNO])
+
+static _Unwind_Reason_Code
+mips_fallback_frame_state (struct _Unwind_Context *context,
+			   _Unwind_FrameState *fs)
+{
+  /* Return address and CFA of the frame we're attempting to unwind through,
+     possibly a signal handler.  */
+  void *ctx_ra  = (void *)context->ra;
+  void *ctx_cfa = (void *)context->cfa;
+
+  /* CFA of the intermediate abstract kernel frame between the interrupted
+     code and the signal handler, if we're indeed unwinding through a signal
+     handler.  */
+  void *k_cfa;
+
+  /* Pointer to the sigcontext_t structure pushed by the kernel when we're
+     unwinding through a signal handler setup with SA_SIGINFO cleared.  */
+  sigcontext_t *sigctx;
+  int i;
+
+  if (! SUPPORTED_ABI)
+    return _URC_END_OF_STACK;
+    
+  sigctx = sigcontext_for (ctx_ra, ctx_cfa);
+
+  if (sigctx == 0)
+    return _URC_END_OF_STACK;
+
+  /* The abstract kernel frame's CFA is extactly the stack pointer
+     value at the interruption point.  */
+  k_cfa = *(void **)SIGCTX_GREG_ADDR (CTX_SP, sigctx);
+
+  /* State the rules to compute the CFA we have the value of: use the
+     previous CFA and offset by the difference between the two.  See
+     uw_update_context_1 for the supporting details.  */
+  fs->regs.cfa_how = CFA_REG_OFFSET;
+  fs->regs.cfa_reg = __builtin_dwarf_sp_column ();
+  fs->regs.cfa_offset = k_cfa - ctx_cfa;
+
+  /* Fill the internal frame_state structure with information stating where
+     each register of interest can be found from the CFA.  */
+  for (i = 0; i <= 31; i ++)
+    {
+      fs->regs.reg[i].how = REG_SAVED_OFFSET;
+      fs->regs.reg[i].loc.offset = SIGCTX_GREG_ADDR (i, sigctx) - k_cfa;
+    }
+
+  for (i = 0; i <= 31; i ++)
+    {
+      fs->regs.reg[32+i].how = REG_SAVED_OFFSET;
+      fs->regs.reg[32+i].loc.offset = SIGCTX_FPREG_ADDR (i, sigctx) - k_cfa;
+    }
+
+  /* State the rules to find the kernel's code "return address", which is the
+     address of the active instruction when the signal was caught.  */
+  fs->retaddr_column = DWARF_FRAME_RETURN_COLUMN;
+  fs->regs.reg[fs->retaddr_column].how = REG_SAVED_OFFSET;
+  fs->regs.reg[fs->retaddr_column].loc.offset = (void *)&sigctx->sc_pc - k_cfa;
+  fs->signal_frame = 1;
+
+  return _URC_NO_REASON;
+}
diff -N -u -r -w gcc-4.8.2/libgcc/config/mips/t-irix6 gcc-4.8.2-patched/libgcc/config/mips/t-irix6
--- gcc-4.8.2/libgcc/config/mips/t-irix6	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libgcc/config/mips/t-irix6	2019-08-09 16:04:26.738512440 +0000
@@ -0,0 +1,24 @@
+# Copyright (C) 1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005,
+# 2006, 2010, 2011 Free Software Foundation, Inc.
+#
+# This file is part of GCC.
+#
+# GCC is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3, or (at your option)
+# any later version.
+#
+# GCC is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with GCC; see the file COPYING3.  If not see
+# <http://www.gnu.org/licenses/>.
+
+irix-crti.o: $(srcdir)/config/mips/irix-crti.S
+	$(crt_compile) -c $<
+
+irix-crtn.o: $(srcdir)/config/mips/irix-crtn.S
+	$(crt_compile) -c $<
diff -N -u -r -w gcc-4.8.2/libgcc/config/mips/t-slibgcc-irix gcc-4.8.2-patched/libgcc/config/mips/t-slibgcc-irix
--- gcc-4.8.2/libgcc/config/mips/t-slibgcc-irix	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libgcc/config/mips/t-slibgcc-irix	2019-08-09 16:04:26.740997080 +0000
@@ -0,0 +1,9 @@
+# Build a shared libgcc library with the SGI linker.
+
+SHLIB_LDFLAGS = -Wl,-soname,$(SHLIB_SONAME) 
+#\
+	#-Wl,-exports_file,$(SHLIB_MAP)
+
+SHLIB_MKMAP = $(srcdir)/mkmap-flat.awk
+SHLIB_MAPFILES = libgcc-std.ver
+SHLIB_LC =
diff -N -u -r -w gcc-4.8.2/libgcc/config.host gcc-4.8.2-patched/libgcc/config.host
--- gcc-4.8.2/libgcc/config.host	2013-07-09 22:35:57.000000000 +0000
+++ gcc-4.8.2-patched/libgcc/config.host	2019-08-09 16:04:26.755597320 +0000
@@ -718,6 +718,11 @@
 	tmake_file="${tmake_file} microblaze/t-microblaze t-fdpbit"
 	extra_parts="$extra_parts crtbeginS.o crtendS.o crtbeginT.o crti.o crtn.o"
 	;;
+mips-sgi-irix6.5*)
+	tmake_file="$tmake_file mips/t-irix6 t-crtfm mips/t-tpbit t-slibgcc mips/t-slibgcc-irix"
+	extra_parts="crtbegin.o crtend.o crtfastmath.o irix-crti.o irix-crtn.o"
+	md_unwind_header=mips/irix6-unwind.h
+	;;
 mips*-*-netbsd*)			# NetBSD/mips, either endian.
 	;;
 mips*-*-linux*)				# Linux MIPS, either endian.
diff -N -u -r -w gcc-4.8.2/libstdc++-v3/config/os/irix/atomic_word.h gcc-4.8.2-patched/libstdc++-v3/config/os/irix/atomic_word.h
--- gcc-4.8.2/libstdc++-v3/config/os/irix/atomic_word.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libstdc++-v3/config/os/irix/atomic_word.h	2019-08-09 16:04:26.788655480 +0000
@@ -0,0 +1,35 @@
+// Low-level type for atomic operations -*- C++ -*-
+
+// Copyright (C) 2004, 2009, 2010 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License and
+// a copy of the GCC Runtime Library Exception along with this program;
+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+// <http://www.gnu.org/licenses/>.
+
+/** @file bits/atomic_word.h
+ *  This is an internal header file, included by other library headers.
+ *  Do not attempt to use it directly. @headername{ext/atomicity.h}
+ */
+
+#ifndef _GLIBCXX_ATOMIC_WORD_H
+#define _GLIBCXX_ATOMIC_WORD_H	1
+
+typedef long _Atomic_word;
+
+#endif 
diff -N -u -r -w gcc-4.8.2/libstdc++-v3/config/os/irix/atomicity.h gcc-4.8.2-patched/libstdc++-v3/config/os/irix/atomicity.h
--- gcc-4.8.2/libstdc++-v3/config/os/irix/atomicity.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libstdc++-v3/config/os/irix/atomicity.h	2019-08-09 16:04:26.791452840 +0000
@@ -0,0 +1,41 @@
+// Low-level functions for atomic operations: IRIX version  -*- C++ -*-
+
+// Copyright (C) 2001, 2004, 2005, 2009 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License and
+// a copy of the GCC Runtime Library Exception along with this program;
+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+// <http://www.gnu.org/licenses/>.
+
+#include <mutex.h>
+#include <ext/atomicity.h>
+
+namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
+{
+_GLIBCXX_BEGIN_NAMESPACE_VERSION
+
+  _Atomic_word
+  __exchange_and_add(volatile _Atomic_word* __mem, int __val) throw ()
+  { return (_Atomic_word) test_then_add((unsigned long*) const_cast<_Atomic_word*>(__mem), __val); }
+
+  void
+  __atomic_add(volatile _Atomic_word* __mem, int __val) throw ()
+  { __exchange_and_add(__mem, __val); }
+
+_GLIBCXX_END_NAMESPACE_VERSION
+} // namespace
diff -N -u -r -w gcc-4.8.2/libstdc++-v3/config/os/irix/irix6.5/ctype_base.h gcc-4.8.2-patched/libstdc++-v3/config/os/irix/irix6.5/ctype_base.h
--- gcc-4.8.2/libstdc++-v3/config/os/irix/irix6.5/ctype_base.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libstdc++-v3/config/os/irix/irix6.5/ctype_base.h	2019-08-09 16:04:26.816309560 +0000
@@ -0,0 +1,65 @@
+// Locale support -*- C++ -*-
+
+// Copyright (C) 1997, 1998, 1999, 2003, 2009, 2010
+// Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License and
+// a copy of the GCC Runtime Library Exception along with this program;
+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+// <http://www.gnu.org/licenses/>.
+
+/** @file bits/ctype_base.h
+ *  This is an internal header file, included by other library headers.
+ *  Do not attempt to use it directly. @headername{locale}
+ */
+
+//
+// ISO C++ 14882: 22.1  Locales
+//
+
+// Information as gleaned from /usr/include/ctype.h on irix 6.5
+
+namespace std _GLIBCXX_VISIBILITY(default)
+{
+_GLIBCXX_BEGIN_NAMESPACE_VERSION
+
+  /// @brief  Base class for ctype.
+  struct ctype_base
+  {
+    // Non-standard typedefs.
+    typedef int* 		__to_type;
+
+    // NB: Offsets into ctype<char>::_M_table force a particular size
+    // on the mask type. Because of this, we don't use an enum.
+    typedef unsigned int 	mask;
+    static const mask upper    	= _ISupper;
+    static const mask lower 	= _ISlower;
+    static const mask alpha 	= _ISalpha;
+    static const mask digit 	= _ISdigit;
+    static const mask xdigit 	= _ISxdigit;
+    static const mask space 	= _ISspace;
+    static const mask print 	= _ISprint;
+    static const mask graph 	= _ISalpha | _ISdigit | _ISpunct;
+    static const mask cntrl 	= _IScntrl;
+    static const mask punct 	= _ISpunct;
+    static const mask alnum 	= _ISalpha | _ISdigit;
+    static const mask blank	= _ISblank;
+  };
+
+_GLIBCXX_END_NAMESPACE_VERSION
+} // namespace
diff -N -u -r -w gcc-4.8.2/libstdc++-v3/config/os/irix/irix6.5/ctype_configure_char.cc gcc-4.8.2-patched/libstdc++-v3/config/os/irix/irix6.5/ctype_configure_char.cc
--- gcc-4.8.2/libstdc++-v3/config/os/irix/irix6.5/ctype_configure_char.cc	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libstdc++-v3/config/os/irix/irix6.5/ctype_configure_char.cc	2019-08-09 16:04:26.819435400 +0000
@@ -0,0 +1,101 @@
+// Locale support -*- C++ -*-
+
+// Copyright (C) 2011 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License and
+// a copy of the GCC Runtime Library Exception along with this program;
+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+// <http://www.gnu.org/licenses/>.
+
+/** @file ctype_configure_char.cc */
+
+//
+// ISO C++ 14882: 22.1  Locales
+//
+
+#include <locale>
+#include <cstdlib>
+#include <cstring>
+
+namespace std _GLIBCXX_VISIBILITY(default)
+{
+_GLIBCXX_BEGIN_NAMESPACE_VERSION
+
+// Information as gleaned from /usr/include/ctype.h
+
+  const ctype_base::mask*
+  ctype<char>::classic_table() throw()
+  { return 0; }
+
+  ctype<char>::ctype(__c_locale, const mask* __table, bool __del,
+		     size_t __refs)
+  : facet(__refs), _M_del(__table != 0 && __del),
+  _M_toupper(NULL), _M_tolower(NULL),
+  _M_table(!__table ?
+	   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table)
+  {
+    memset(_M_widen, 0, sizeof(_M_widen));
+    _M_widen_ok = 0;
+    memset(_M_narrow, 0, sizeof(_M_narrow));
+    _M_narrow_ok = 0;
+  }
+
+  ctype<char>::ctype(const mask* __table, bool __del, size_t __refs)
+  : facet(__refs), _M_del(__table != 0 && __del),
+  _M_toupper(NULL), _M_tolower(NULL),
+  _M_table(!__table ?
+	   (const mask*) (__libc_attr._ctype_tbl->_class + 1) : __table)
+  {
+    memset(_M_widen, 0, sizeof(_M_widen));
+    _M_widen_ok = 0;
+    memset(_M_narrow, 0, sizeof(_M_narrow));
+    _M_narrow_ok = 0;
+  }
+
+  char
+  ctype<char>::do_toupper(char __c) const
+  { return _toupper(__c); }
+
+  const char*
+  ctype<char>::do_toupper(char* __low, const char* __high) const
+  {
+    while (__low < __high)
+      {
+	*__low = do_toupper(*__low);
+	++__low;
+      }
+    return __high;
+  }
+
+  char
+  ctype<char>::do_tolower(char __c) const
+  { return _tolower(__c); }
+
+  const char*
+  ctype<char>::do_tolower(char* __low, const char* __high) const
+  {
+    while (__low < __high)
+      {
+	*__low = do_tolower(*__low);
+	++__low;
+      }
+    return __high;
+  }
+
+_GLIBCXX_END_NAMESPACE_VERSION
+} // namespace
diff -N -u -r -w gcc-4.8.2/libstdc++-v3/config/os/irix/irix6.5/ctype_inline.h gcc-4.8.2-patched/libstdc++-v3/config/os/irix/irix6.5/ctype_inline.h
--- gcc-4.8.2/libstdc++-v3/config/os/irix/irix6.5/ctype_inline.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libstdc++-v3/config/os/irix/irix6.5/ctype_inline.h	2019-08-09 16:04:26.823115960 +0000
@@ -0,0 +1,74 @@
+// Locale support -*- C++ -*-
+
+// Copyright (C) 2000, 2002, 2009, 2010 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License and
+// a copy of the GCC Runtime Library Exception along with this program;
+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+// <http://www.gnu.org/licenses/>.
+
+/** @file bits/ctype_inline.h
+ *  This is an internal header file, included by other library headers.
+ *  Do not attempt to use it directly. @headername{locale}
+ */
+
+//
+// ISO C++ 14882: 22.1  Locales
+//
+
+// ctype bits to be inlined go here. Non-inlinable (ie virtual do_*)
+// functions go in ctype.cc
+
+namespace std _GLIBCXX_VISIBILITY(default)
+{
+_GLIBCXX_BEGIN_NAMESPACE_VERSION
+
+  bool
+  ctype<char>::
+  is(mask __m, char __c) const
+  { return (_M_table)[static_cast<unsigned char>(__c)] & __m; }
+
+  const char*
+  ctype<char>::
+  is(const char* __low, const char* __high, mask* __vec) const
+  {
+    while (__low < __high)
+      *__vec++ = (_M_table)[static_cast<unsigned char>(*__low++)];
+    return __high;
+  }
+
+  const char*
+  ctype<char>::
+  scan_is(mask __m, const char* __low, const char* __high) const
+  {
+    while (__low < __high && ! this->is(__m, *__low))
+      ++__low;
+    return __low;
+  }
+
+  const char*
+  ctype<char>::
+  scan_not(mask __m, const char* __low, const char* __high) const
+  {
+    while (__low < __high && this->is(__m, *__low))
+      ++__low;
+    return __low;
+  }
+
+_GLIBCXX_END_NAMESPACE_VERSION
+} // namespace
diff -N -u -r -w gcc-4.8.2/libstdc++-v3/config/os/irix/irix6.5/os_defines.h gcc-4.8.2-patched/libstdc++-v3/config/os/irix/irix6.5/os_defines.h
--- gcc-4.8.2/libstdc++-v3/config/os/irix/irix6.5/os_defines.h	1970-01-01 00:00:00.000000000 +0000
+++ gcc-4.8.2-patched/libstdc++-v3/config/os/irix/irix6.5/os_defines.h	2019-08-09 16:04:26.825835560 +0000
@@ -0,0 +1,60 @@
+// Specific definitions for IRIX  -*- C++ -*-
+
+// Copyright (C) 2000, 2002, 2009, 2010 Free Software Foundation, Inc.
+//
+// This file is part of the GNU ISO C++ Library.  This library is free
+// software; you can redistribute it and/or modify it under the
+// terms of the GNU General Public License as published by the
+// Free Software Foundation; either version 3, or (at your option)
+// any later version.
+
+// This library is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+
+// Under Section 7 of GPL version 3, you are granted additional
+// permissions described in the GCC Runtime Library Exception, version
+// 3.1, as published by the Free Software Foundation.
+
+// You should have received a copy of the GNU General Public License and
+// a copy of the GCC Runtime Library Exception along with this program;
+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
+// <http://www.gnu.org/licenses/>.
+
+/** @file bits/os_defines.h
+ *  This is an internal header file, included by other library headers.
+ *  Do not attempt to use it directly. @headername{iosfwd}
+ */
+
+#ifndef _GLIBCXX_OS_DEFINES
+#define _GLIBCXX_OS_DEFINES 1
+
+// System-specific #define, typedefs, corrections, etc, go here.  This
+// file will come before all others.
+
+#define _GLIBCXX_USE_C99 1
+#define _GLIBCXX_USE_C99_STDIO 1
+#define _GLIBCXX_USE_C99_STDLIB 1
+#define _GLIBCXX_USE_C99_WCHAR 1
+#define _GLIBCXX_USE_WCHAR_T 1
+
+// We need large file support.  There are two ways to turn it on: by
+// defining either _LARGEFILE64_SOURCE or _SGI_SOURCE.  However, it
+// does not actually work to define only the former, as then
+// <sys/stat.h> is invalid: `st_blocks' is defined to be a macro, but
+// then used as a field name.  So, we have to turn on _SGI_SOURCE.
+// That only works if _POSIX_SOURCE is turned off, so we have to
+// explicitly turn it off.  (Some of the libio C files explicitly try
+// to turn it on.)  _SGI_SOURCE is actually turned on implicitly via
+// the command-line.
+#undef _POSIX_SOURCE
+
+// GCC does not use thunks on IRIX. 
+#define _G_USING_THUNKS 0
+
+// FINOREAD takes an "off_t *" as argument.
+#define _GLIBCXX_FIONREAD_TAKES_OFF_T
+
+#endif
+
diff -N -u -r -w gcc-4.8.2/libstdc++-v3/configure.host gcc-4.8.2-patched/libstdc++-v3/configure.host
--- gcc-4.8.2/libstdc++-v3/configure.host	2013-06-19 02:18:38.000000000 +0000
+++ gcc-4.8.2-patched/libstdc++-v3/configure.host	2019-08-09 16:04:26.837973640 +0000
@@ -275,6 +275,15 @@
   hpux*)
     os_include_dir="os/hpux"
     ;;
+  irix6.5*)
+    os_include_dir="os/irix/irix6.5"
+    atomicity_dir=os/irix
+    atomic_word_dir=os/irix
+    # libstdc++.so relies on emutls on IRIX, which only works with the
+    # real functions implemented in libpthread.so, not with the stubs in
+    # libc, so always pass -lpthread.
+    OPT_LDFLAGS="${OPT_LDFLAGS} -lpthread"
+    ;;
   mingw32*)
     case "$host" in
       *-w64-*)
