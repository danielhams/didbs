diff -u -r -w binutils-2.26.1/bfd/elfxx-mips.c binutils-2.26.1-patched/bfd/elfxx-mips.c
--- binutils-2.26.1/bfd/elfxx-mips.c	2016-01-25 08:51:06.000000000 +0000
+++ binutils-2.26.1-patched/bfd/elfxx-mips.c	2019-07-06 09:21:43.611045520 +0000
@@ -4428,11 +4428,18 @@
     {
       /* Make a final decision about whether the symbol belongs in the
 	 local or global GOT.  */
+      /*
       if (mips_use_local_got_p (info, h))
+      */
+      if (h->root.forced_local || h->root.dynindx == -1)
+	{
 	/* The symbol belongs in the local GOT.  We no longer need this
 	   entry if it was only used for relocations; those relocations
 	   will be against the null or section symbol instead of H.  */
+	  if (h->global_got_area != GGA_RELOC_ONLY)
+	    g->local_gotno++;
 	h->global_got_area = GGA_NONE;
+	}
       else if (htab->is_vxworks
 	       && h->got_only_for_calls
 	       && h->root.plt.plist->mips_offset != MINUS_ONE)
@@ -4965,10 +4972,12 @@
 static bfd_boolean
 mips_elf_local_relocation_p (bfd *input_bfd,
 			     const Elf_Internal_Rela *relocation,
-			     asection **local_sections)
+			     asection **local_sections,
+			     bfd_boolean check_forced)
 {
   unsigned long r_symndx;
   Elf_Internal_Shdr *symtab_hdr;
+  struct mips_elf_link_hash_entry *h;
   size_t extsymoff;
 
   r_symndx = ELF_R_SYM (input_bfd, relocation->r_info);
@@ -4980,6 +4989,20 @@
   if (elf_bad_symtab (input_bfd) && local_sections[r_symndx] != NULL)
     return TRUE;
 
+  if (check_forced)
+    {
+      /* Look up the hash table to check whether the symbol
+ 	 was forced local.  */
+      h = (struct mips_elf_link_hash_entry *)
+	elf_sym_hashes (input_bfd) [r_symndx - extsymoff];
+      /* Find the real hash-table entry for this symbol.  */
+      while (h->root.root.type == bfd_link_hash_indirect
+ 	     || h->root.root.type == bfd_link_hash_warning)
+	h = (struct mips_elf_link_hash_entry *) h->root.root.u.i.link;
+      if (h->root.forced_local)
+	return TRUE;
+    }
+
   return FALSE;
 }
 
@@ -5277,7 +5300,7 @@
      used in the array of hash table entries.  */
   symtab_hdr = &elf_tdata (input_bfd)->symtab_hdr;
   local_p = mips_elf_local_relocation_p (input_bfd, relocation,
-					 local_sections);
+					 local_sections, FALSE);
   was_local_p = local_p;
   if (! elf_bad_symtab (input_bfd))
     extsymoff = symtab_hdr->sh_info;
@@ -5570,7 +5593,11 @@
 				&& (target_is_16_bit_code_p
 				    || target_is_micromips_code_p))));
 
-  local_p = (h == NULL || mips_use_local_got_p (info, h));
+  local_p = (h == NULL || 
+	     (mips_use_local_got_p (info, h)
+	      &&
+	      mips_elf_local_relocation_p(input_bfd, relocation, local_sections, TRUE))
+	    );
 
   gp0 = _bfd_get_gp_value (input_bfd);
   gp = _bfd_get_gp_value (abfd);
@@ -9897,7 +9924,7 @@
   Elf_Internal_Sym *sym;
   asection *sec;
 
-  if (mips_elf_local_relocation_p (input_bfd, rel, local_sections))
+  if (mips_elf_local_relocation_p (input_bfd, rel, local_sections,FALSE))
     {
       r_type = ELF_R_TYPE (output_bfd, rel->r_info);
       if (gprel16_reloc_p (r_type)
@@ -10015,7 +10042,7 @@
 
       r_symndx = ELF_R_SYM (input_bfd, rel->r_info);
       symtab_hdr = &elf_tdata (input_bfd)->symtab_hdr;
-      if (mips_elf_local_relocation_p (input_bfd, rel, local_sections))
+      if (mips_elf_local_relocation_p (input_bfd, rel, local_sections,FALSE))
 	{
 	  sec = local_sections[r_symndx];
 	  h = NULL;
@@ -10077,7 +10104,7 @@
 	      if (hi16_reloc_p (r_type)
 		  || (got16_reloc_p (r_type)
 		      && mips_elf_local_relocation_p (input_bfd, rel,
-						      local_sections)))
+						      local_sections,FALSE)))
 		{
 		  if (!mips_elf_add_lo16_rel_addend (input_bfd, rel, relend,
 						     contents, &addend))
diff -u -r -w binutils-2.26.1/binutils/readelf.c binutils-2.26.1-patched/binutils/readelf.c
--- binutils-2.26.1/binutils/readelf.c	2015-11-13 08:27:41.000000000 +0000
+++ binutils-2.26.1-patched/binutils/readelf.c	2019-07-06 10:02:16.584788160 +0000
@@ -12174,7 +12174,9 @@
 	{
 	  size_t maxlen = end - data;
 
-#ifndef __MSVCRT__
+#if defined(__sgi)
+	  printf ("  [%06x]  ", (size_t) (data - start));
+#elif !defined(__MSVCRT__)
 	  /* PR 11128: Use two separate invocations in order to work
              around bugs in the Solaris 8 implementation of printf.  */
 	  printf ("  [%6tx]  ", data - start);
diff -u -r -w binutils-2.26.1/libiberty/testsuite/test-strtol.c binutils-2.26.1-patched/libiberty/testsuite/test-strtol.c
--- binutils-2.26.1/libiberty/testsuite/test-strtol.c	2015-11-13 08:27:42.000000000 +0000
+++ binutils-2.26.1-patched/libiberty/testsuite/test-strtol.c	2019-07-06 10:07:15.631468720 +0000
@@ -155,19 +155,19 @@
       /* Compare result */
       if (res != test_data[i].res)
         {
-          printf ("FAIL: test-strtol-%zd. Results don't match.\n", i);
+          printf ("FAIL: test-strtol-%ld. Results don't match.\n", i);
 	  failed++;
         }
 
       /* Compare errno */
       if (saved_errno != test_data[i].errnum)
         {
-          printf ("FAIL: test-strtol-%zd. Errnos don't match.\n", i);
+          printf ("FAIL: test-strtol-%ld. Errnos don't match.\n", i);
 	  failed++;
         }
 
       if (!failed)
-        printf ("PASS: test-strtol-%zd.\n", i);
+        printf ("PASS: test-strtol-%ld.\n", i);
       else
         fails++;
     }
