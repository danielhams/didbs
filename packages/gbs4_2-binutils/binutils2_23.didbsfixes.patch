diff -N -r -u -w binutils-2.23.2/bfd/elflink.c binutils-2.23.2-patched/bfd/elflink.c
--- binutils-2.23.2/bfd/elflink.c	2013-03-25 08:06:20.000000000 +0000
+++ binutils-2.23.2-patched/bfd/elflink.c	2019-09-23 21:42:25.551584160 +0000
@@ -4287,16 +4287,18 @@
 		  /* PR binutils/2735 */
 		  if (normal_bfd == NULL)
 		    (*_bfd_error_handler)
-		      (_("Warning: alignment %u of common symbol `%s' in %B"
-			 " is greater than the alignment (%u) of its section %A"),
-		       common_bfd, h->root.u.def.section,
-		       1 << common_align, name, 1 << normal_align);
+		      /* xgettext:c-format */
+		      (_("warning: alignment %u of common symbol `%s' in %pB is"
+			 " greater than the alignment (%u) of its section %pA"),
+		       1 << common_align, name, common_bfd,
+		       1 << normal_align, h->root.u.def.section);
 		  else
 		    (*_bfd_error_handler)
-		      (_("Warning: alignment %u of symbol `%s' in %B"
-			 " is smaller than %u in %B"),
-		       normal_bfd, common_bfd,
-		       1 << normal_align, name, 1 << common_align);
+		      /* xgettext:c-format */
+		      (_("warning: alignment %u of symbol `%s' in %pB"
+			 " is smaller than %u in %pB"),
+		       1 << normal_align, name, normal_bfd,
+		       1 << common_align, common_bfd);
 		}
 	    }
 
diff -N -r -u -w binutils-2.23.2/bfd/elfxx-mips.c binutils-2.23.2-patched/bfd/elfxx-mips.c
--- binutils-2.23.2/bfd/elfxx-mips.c	2013-03-25 08:06:20.000000000 +0000
+++ binutils-2.23.2-patched/bfd/elfxx-mips.c	2019-09-23 21:41:00.739372680 +0000
@@ -4036,10 +4036,13 @@
 	 Note that the former condition does not always imply the
 	 latter: symbols do not bind locally if they are completely
 	 undefined.  We'll report undefined symbols later if appropriate.  */
+      /*
       if (h->root.dynindx == -1
 	  || (h->got_only_for_calls
 	      ? SYMBOL_CALLS_LOCAL (info, &h->root)
 	      : SYMBOL_REFERENCES_LOCAL (info, &h->root)))
+      */
+      if (h->root.forced_local || h->root.dynindx == -1)
 	{
 	  /* The symbol belongs in the local GOT.  We no longer need this
 	     entry if it was only used for relocations; those relocations
@@ -4752,10 +4755,12 @@
 static bfd_boolean
 mips_elf_local_relocation_p (bfd *input_bfd,
 			     const Elf_Internal_Rela *relocation,
-			     asection **local_sections)
+			     asection **local_sections,
+			     bfd_boolean check_forced)
 {
   unsigned long r_symndx;
   Elf_Internal_Shdr *symtab_hdr;
+  struct mips_elf_link_hash_entry *h;
   size_t extsymoff;
 
   r_symndx = ELF_R_SYM (input_bfd, relocation->r_info);
@@ -4767,6 +4772,20 @@
   if (elf_bad_symtab (input_bfd) && local_sections[r_symndx] != NULL)
     return TRUE;
 
+  if (check_forced)
+    {
+      /* Look up the hash table to check whether the symbol
+ 	 was forced local.  */
+      h = (struct mips_elf_link_hash_entry *)
+	elf_sym_hashes (input_bfd) [r_symndx - extsymoff];
+      /* Find the real hash-table entry for this symbol.  */
+      while (h->root.root.type == bfd_link_hash_indirect
+ 	     || h->root.root.type == bfd_link_hash_warning)
+	h = (struct mips_elf_link_hash_entry *) h->root.root.u.i.link;
+      if (h->root.forced_local)
+	return TRUE;
+    }
+
   return FALSE;
 }
 
@@ -5085,7 +5104,7 @@
      used in the array of hash table entries.  */
   symtab_hdr = &elf_tdata (input_bfd)->symtab_hdr;
   local_p = mips_elf_local_relocation_p (input_bfd, relocation,
-					 local_sections);
+					 local_sections, FALSE);
   was_local_p = local_p;
   if (! elf_bad_symtab (input_bfd))
     extsymoff = symtab_hdr->sh_info;
@@ -5357,9 +5376,12 @@
 				    || target_is_micromips_code_p))));
 
   local_p = (h == NULL
-	     || (h->got_only_for_calls
+	     ||
+	     ((h->got_only_for_calls
 		 ? SYMBOL_CALLS_LOCAL (info, &h->root)
-		 : SYMBOL_REFERENCES_LOCAL (info, &h->root)));
+		 : SYMBOL_REFERENCES_LOCAL (info, &h->root)))
+	     &&
+	     mips_elf_local_relocation_p(input_bfd, relocation, local_sections, TRUE));
 
   gp0 = _bfd_get_gp_value (input_bfd);
   gp = _bfd_get_gp_value (abfd);
@@ -7352,6 +7374,11 @@
 	     _bfd_mips_elf_finish_dynamic_symbol.  */
 	  s = bfd_get_linker_section (abfd, ".rld_map");
 	  BFD_ASSERT (s != NULL);
+	  if(s == NULL) {
+	    _bfd_error_handler( _( "Warning: %B missing .rld_map in data section" ),
+				abfd );
+	    return FALSE;
+	  }
 
 	  name = SGI_COMPAT (abfd) ? "__rld_map" : "__RLD_MAP";
 	  bh = NULL;
@@ -9318,7 +9345,7 @@
   Elf_Internal_Sym *sym;
   asection *sec;
 
-  if (mips_elf_local_relocation_p (input_bfd, rel, local_sections))
+  if (mips_elf_local_relocation_p (input_bfd, rel, local_sections, FALSE))
     {
       r_type = ELF_R_TYPE (output_bfd, rel->r_info);
       if (gprel16_reloc_p (r_type)
@@ -9436,7 +9463,7 @@
 
       r_symndx = ELF_R_SYM (input_bfd, rel->r_info);
       symtab_hdr = &elf_tdata (input_bfd)->symtab_hdr;
-      if (mips_elf_local_relocation_p (input_bfd, rel, local_sections))
+      if (mips_elf_local_relocation_p (input_bfd, rel, local_sections, FALSE))
 	{
 	  sec = local_sections[r_symndx];
 	  h = NULL;
@@ -9498,7 +9525,7 @@
 	      if (hi16_reloc_p (r_type)
 		  || (got16_reloc_p (r_type)
 		      && mips_elf_local_relocation_p (input_bfd, rel,
-						      local_sections)))
+						      local_sections, FALSE)))
 		{
 		  if (!mips_elf_add_lo16_rel_addend (input_bfd, rel, relend,
 						     contents, &addend))
diff -N -r -u -w binutils-2.23.2/binutils/readelf.c binutils-2.23.2-patched/binutils/readelf.c
--- binutils-2.23.2/binutils/readelf.c	2013-03-25 08:06:21.000000000 +0000
+++ binutils-2.23.2-patched/binutils/readelf.c	2019-09-23 21:41:00.772296520 +0000
@@ -10468,7 +10468,9 @@
 
       if (data < end)
 	{
-#ifndef __MSVCRT__
+#if defined(__sgi)
+	  printf ("  [%06x]  %s\n", (size_t) (data - start), data);
+#elif !defined(__MSVCRT__)
 	  /* PR 11128: Use two separate invocations in order to work
              around bugs in the Solaris 8 implementation of printf.  */
 	  printf ("  [%6tx]  ", data - start);
